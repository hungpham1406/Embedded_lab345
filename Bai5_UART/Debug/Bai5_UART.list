
Bai5_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000079e8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003078  08007b78  08007b78  00017b78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800abf0  0800abf0  00020064  2**0
                  CONTENTS
  4 .ARM          00000008  0800abf0  0800abf0  0001abf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800abf8  0800abf8  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800abf8  0800abf8  0001abf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800abfc  0800abfc  0001abfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  0800ac00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020064  2**0
                  CONTENTS
 10 .bss          000003dc  20000064  20000064  00020064  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000440  20000440  00020064  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 14 .debug_info   000176c2  00000000  00000000  000200d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003d69  00000000  00000000  00037799  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001590  00000000  00000000  0003b508  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000010ca  00000000  00000000  0003ca98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000243e0  00000000  00000000  0003db62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001d18c  00000000  00000000  00061f42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d2e80  00000000  00000000  0007f0ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005dec  00000000  00000000  00151f50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005c  00000000  00000000  00157d3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000064 	.word	0x20000064
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007b60 	.word	0x08007b60

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000068 	.word	0x20000068
 80001cc:	08007b60 	.word	0x08007b60

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <button_init>:
#include "button.h"

uint16_t button_count[16];
uint16_t spi_button = 0x0000;

void button_init(){
 800056c:	b580      	push	{r7, lr}
 800056e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 8000570:	2201      	movs	r2, #1
 8000572:	2108      	movs	r1, #8
 8000574:	4802      	ldr	r0, [pc, #8]	; (8000580 <button_init+0x14>)
 8000576:	f002 fcfd 	bl	8002f74 <HAL_GPIO_WritePin>
}
 800057a:	bf00      	nop
 800057c:	bd80      	pop	{r7, pc}
 800057e:	bf00      	nop
 8000580:	40020c00 	.word	0x40020c00

08000584 <button_Scan>:

void button_Scan(){
 8000584:	b580      	push	{r7, lr}
 8000586:	b084      	sub	sp, #16
 8000588:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 0);
 800058a:	2200      	movs	r2, #0
 800058c:	2108      	movs	r1, #8
 800058e:	482f      	ldr	r0, [pc, #188]	; (800064c <button_Scan+0xc8>)
 8000590:	f002 fcf0 	bl	8002f74 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 8000594:	2201      	movs	r2, #1
 8000596:	2108      	movs	r1, #8
 8000598:	482c      	ldr	r0, [pc, #176]	; (800064c <button_Scan+0xc8>)
 800059a:	f002 fceb 	bl	8002f74 <HAL_GPIO_WritePin>
	  HAL_SPI_Receive(&hspi1, (void*)&spi_button, 2, 10);
 800059e:	230a      	movs	r3, #10
 80005a0:	2202      	movs	r2, #2
 80005a2:	492b      	ldr	r1, [pc, #172]	; (8000650 <button_Scan+0xcc>)
 80005a4:	482b      	ldr	r0, [pc, #172]	; (8000654 <button_Scan+0xd0>)
 80005a6:	f004 fc4a 	bl	8004e3e <HAL_SPI_Receive>
	  int button_index = 0;
 80005aa:	2300      	movs	r3, #0
 80005ac:	60fb      	str	r3, [r7, #12]
	  uint16_t mask = 0x8000;
 80005ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80005b2:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 80005b4:	2300      	movs	r3, #0
 80005b6:	607b      	str	r3, [r7, #4]
 80005b8:	e03f      	b.n	800063a <button_Scan+0xb6>
		  if(i >= 0 && i <= 3){
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	2b00      	cmp	r3, #0
 80005be:	db06      	blt.n	80005ce <button_Scan+0x4a>
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	2b03      	cmp	r3, #3
 80005c4:	dc03      	bgt.n	80005ce <button_Scan+0x4a>
			  button_index = i + 4; // do theo schematic thì spi gửi ko giống như button trên mạch
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	3304      	adds	r3, #4
 80005ca:	60fb      	str	r3, [r7, #12]
 80005cc:	e018      	b.n	8000600 <button_Scan+0x7c>
		  } else if (i >= 4 && i <= 7){  //-> cần convert lại cho nó đúng với thứ tự mình mún
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	2b03      	cmp	r3, #3
 80005d2:	dd07      	ble.n	80005e4 <button_Scan+0x60>
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	2b07      	cmp	r3, #7
 80005d8:	dc04      	bgt.n	80005e4 <button_Scan+0x60>
			  button_index = 7 - i;
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	f1c3 0307 	rsb	r3, r3, #7
 80005e0:	60fb      	str	r3, [r7, #12]
 80005e2:	e00d      	b.n	8000600 <button_Scan+0x7c>
		  } else if (i >= 8 && i <= 11){
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	2b07      	cmp	r3, #7
 80005e8:	dd06      	ble.n	80005f8 <button_Scan+0x74>
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	2b0b      	cmp	r3, #11
 80005ee:	dc03      	bgt.n	80005f8 <button_Scan+0x74>
			  button_index = i + 4;
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	3304      	adds	r3, #4
 80005f4:	60fb      	str	r3, [r7, #12]
 80005f6:	e003      	b.n	8000600 <button_Scan+0x7c>
		  } else {
			  button_index = 23 - i;
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	f1c3 0317 	rsb	r3, r3, #23
 80005fe:	60fb      	str	r3, [r7, #12]
		  }
		  if(spi_button & mask) button_count[button_index] = 0;
 8000600:	4b13      	ldr	r3, [pc, #76]	; (8000650 <button_Scan+0xcc>)
 8000602:	881a      	ldrh	r2, [r3, #0]
 8000604:	897b      	ldrh	r3, [r7, #10]
 8000606:	4013      	ands	r3, r2
 8000608:	b29b      	uxth	r3, r3
 800060a:	2b00      	cmp	r3, #0
 800060c:	d005      	beq.n	800061a <button_Scan+0x96>
 800060e:	4a12      	ldr	r2, [pc, #72]	; (8000658 <button_Scan+0xd4>)
 8000610:	68fb      	ldr	r3, [r7, #12]
 8000612:	2100      	movs	r1, #0
 8000614:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000618:	e009      	b.n	800062e <button_Scan+0xaa>
		  else button_count[button_index]++;
 800061a:	4a0f      	ldr	r2, [pc, #60]	; (8000658 <button_Scan+0xd4>)
 800061c:	68fb      	ldr	r3, [r7, #12]
 800061e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000622:	3301      	adds	r3, #1
 8000624:	b299      	uxth	r1, r3
 8000626:	4a0c      	ldr	r2, [pc, #48]	; (8000658 <button_Scan+0xd4>)
 8000628:	68fb      	ldr	r3, [r7, #12]
 800062a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
//		  if(spi_button & mask) button_count[i] = 0;
//		  else button_count[i]++;
		  mask = mask >> 1;
 800062e:	897b      	ldrh	r3, [r7, #10]
 8000630:	085b      	lsrs	r3, r3, #1
 8000632:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	3301      	adds	r3, #1
 8000638:	607b      	str	r3, [r7, #4]
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	2b0f      	cmp	r3, #15
 800063e:	ddbc      	ble.n	80005ba <button_Scan+0x36>
	  }
}
 8000640:	bf00      	nop
 8000642:	bf00      	nop
 8000644:	3710      	adds	r7, #16
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	40020c00 	.word	0x40020c00
 8000650:	200000a0 	.word	0x200000a0
 8000654:	20000184 	.word	0x20000184
 8000658:	20000080 	.word	0x20000080

0800065c <ds3231_init>:
uint8_t ds3231_date;
uint8_t ds3231_day;
uint8_t ds3231_month;
uint8_t ds3231_year;

void ds3231_init(){
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
	ds3231_buffer[0] = DEC2BCD(30); //second
 8000660:	201e      	movs	r0, #30
 8000662:	f002 f863 	bl	800272c <DEC2BCD>
 8000666:	4603      	mov	r3, r0
 8000668:	461a      	mov	r2, r3
 800066a:	4b1c      	ldr	r3, [pc, #112]	; (80006dc <ds3231_init+0x80>)
 800066c:	701a      	strb	r2, [r3, #0]
	ds3231_buffer[1] = DEC2BCD(22); //minute
 800066e:	2016      	movs	r0, #22
 8000670:	f002 f85c 	bl	800272c <DEC2BCD>
 8000674:	4603      	mov	r3, r0
 8000676:	461a      	mov	r2, r3
 8000678:	4b18      	ldr	r3, [pc, #96]	; (80006dc <ds3231_init+0x80>)
 800067a:	705a      	strb	r2, [r3, #1]
	ds3231_buffer[2] = DEC2BCD(21); //hour
 800067c:	2015      	movs	r0, #21
 800067e:	f002 f855 	bl	800272c <DEC2BCD>
 8000682:	4603      	mov	r3, r0
 8000684:	461a      	mov	r2, r3
 8000686:	4b15      	ldr	r3, [pc, #84]	; (80006dc <ds3231_init+0x80>)
 8000688:	709a      	strb	r2, [r3, #2]
	ds3231_buffer[3] = DEC2BCD(6);  //day
 800068a:	2006      	movs	r0, #6
 800068c:	f002 f84e 	bl	800272c <DEC2BCD>
 8000690:	4603      	mov	r3, r0
 8000692:	461a      	mov	r2, r3
 8000694:	4b11      	ldr	r3, [pc, #68]	; (80006dc <ds3231_init+0x80>)
 8000696:	70da      	strb	r2, [r3, #3]
	ds3231_buffer[4] = DEC2BCD(15); //date
 8000698:	200f      	movs	r0, #15
 800069a:	f002 f847 	bl	800272c <DEC2BCD>
 800069e:	4603      	mov	r3, r0
 80006a0:	461a      	mov	r2, r3
 80006a2:	4b0e      	ldr	r3, [pc, #56]	; (80006dc <ds3231_init+0x80>)
 80006a4:	711a      	strb	r2, [r3, #4]
	ds3231_buffer[5] = DEC2BCD(9);  //month
 80006a6:	2009      	movs	r0, #9
 80006a8:	f002 f840 	bl	800272c <DEC2BCD>
 80006ac:	4603      	mov	r3, r0
 80006ae:	461a      	mov	r2, r3
 80006b0:	4b0a      	ldr	r3, [pc, #40]	; (80006dc <ds3231_init+0x80>)
 80006b2:	715a      	strb	r2, [r3, #5]
	ds3231_buffer[6] = DEC2BCD(23); //year
 80006b4:	2017      	movs	r0, #23
 80006b6:	f002 f839 	bl	800272c <DEC2BCD>
 80006ba:	4603      	mov	r3, r0
 80006bc:	461a      	mov	r2, r3
 80006be:	4b07      	ldr	r3, [pc, #28]	; (80006dc <ds3231_init+0x80>)
 80006c0:	719a      	strb	r2, [r3, #6]
	if(HAL_I2C_IsDeviceReady(&hi2c1, DS3231_ADDRESS, 3, 50) != HAL_OK){
 80006c2:	2332      	movs	r3, #50	; 0x32
 80006c4:	2203      	movs	r2, #3
 80006c6:	21d0      	movs	r1, #208	; 0xd0
 80006c8:	4805      	ldr	r0, [pc, #20]	; (80006e0 <ds3231_init+0x84>)
 80006ca:	f003 f8d1 	bl	8003870 <HAL_I2C_IsDeviceReady>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d000      	beq.n	80006d6 <ds3231_init+0x7a>
		while(1);
 80006d4:	e7fe      	b.n	80006d4 <ds3231_init+0x78>
	};
}
 80006d6:	bf00      	nop
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	200000a4 	.word	0x200000a4
 80006e0:	20000108 	.word	0x20000108

080006e4 <ds3231_Write>:

void ds3231_Write(uint8_t address, uint8_t value){
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b088      	sub	sp, #32
 80006e8:	af04      	add	r7, sp, #16
 80006ea:	4603      	mov	r3, r0
 80006ec:	460a      	mov	r2, r1
 80006ee:	71fb      	strb	r3, [r7, #7]
 80006f0:	4613      	mov	r3, r2
 80006f2:	71bb      	strb	r3, [r7, #6]
	uint8_t temp = DEC2BCD(value);
 80006f4:	79bb      	ldrb	r3, [r7, #6]
 80006f6:	4618      	mov	r0, r3
 80006f8:	f002 f818 	bl	800272c <DEC2BCD>
 80006fc:	4603      	mov	r3, r0
 80006fe:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(&hi2c1, DS3231_ADDRESS, address, I2C_MEMADD_SIZE_8BIT, &temp, 1,10);
 8000700:	79fb      	ldrb	r3, [r7, #7]
 8000702:	b29a      	uxth	r2, r3
 8000704:	230a      	movs	r3, #10
 8000706:	9302      	str	r3, [sp, #8]
 8000708:	2301      	movs	r3, #1
 800070a:	9301      	str	r3, [sp, #4]
 800070c:	f107 030f 	add.w	r3, r7, #15
 8000710:	9300      	str	r3, [sp, #0]
 8000712:	2301      	movs	r3, #1
 8000714:	21d0      	movs	r1, #208	; 0xd0
 8000716:	4803      	ldr	r0, [pc, #12]	; (8000724 <ds3231_Write+0x40>)
 8000718:	f002 fd8a 	bl	8003230 <HAL_I2C_Mem_Write>
}
 800071c:	bf00      	nop
 800071e:	3710      	adds	r7, #16
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}
 8000724:	20000108 	.word	0x20000108

08000728 <ds3231_ReadTime>:

void ds3231_ReadTime(){
 8000728:	b580      	push	{r7, lr}
 800072a:	b084      	sub	sp, #16
 800072c:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDRESS, 0x00, I2C_MEMADD_SIZE_8BIT, ds3231_buffer, 7, 10);
 800072e:	230a      	movs	r3, #10
 8000730:	9302      	str	r3, [sp, #8]
 8000732:	2307      	movs	r3, #7
 8000734:	9301      	str	r3, [sp, #4]
 8000736:	4b25      	ldr	r3, [pc, #148]	; (80007cc <ds3231_ReadTime+0xa4>)
 8000738:	9300      	str	r3, [sp, #0]
 800073a:	2301      	movs	r3, #1
 800073c:	2200      	movs	r2, #0
 800073e:	21d0      	movs	r1, #208	; 0xd0
 8000740:	4823      	ldr	r0, [pc, #140]	; (80007d0 <ds3231_ReadTime+0xa8>)
 8000742:	f002 fe6f 	bl	8003424 <HAL_I2C_Mem_Read>
	ds3231_sec = BCD2DEC(ds3231_buffer[0]);
 8000746:	4b21      	ldr	r3, [pc, #132]	; (80007cc <ds3231_ReadTime+0xa4>)
 8000748:	781b      	ldrb	r3, [r3, #0]
 800074a:	4618      	mov	r0, r3
 800074c:	f001 ffd4 	bl	80026f8 <BCD2DEC>
 8000750:	4603      	mov	r3, r0
 8000752:	461a      	mov	r2, r3
 8000754:	4b1f      	ldr	r3, [pc, #124]	; (80007d4 <ds3231_ReadTime+0xac>)
 8000756:	701a      	strb	r2, [r3, #0]
	ds3231_min = BCD2DEC(ds3231_buffer[1]);
 8000758:	4b1c      	ldr	r3, [pc, #112]	; (80007cc <ds3231_ReadTime+0xa4>)
 800075a:	785b      	ldrb	r3, [r3, #1]
 800075c:	4618      	mov	r0, r3
 800075e:	f001 ffcb 	bl	80026f8 <BCD2DEC>
 8000762:	4603      	mov	r3, r0
 8000764:	461a      	mov	r2, r3
 8000766:	4b1c      	ldr	r3, [pc, #112]	; (80007d8 <ds3231_ReadTime+0xb0>)
 8000768:	701a      	strb	r2, [r3, #0]
	ds3231_hours = BCD2DEC(ds3231_buffer[2]);
 800076a:	4b18      	ldr	r3, [pc, #96]	; (80007cc <ds3231_ReadTime+0xa4>)
 800076c:	789b      	ldrb	r3, [r3, #2]
 800076e:	4618      	mov	r0, r3
 8000770:	f001 ffc2 	bl	80026f8 <BCD2DEC>
 8000774:	4603      	mov	r3, r0
 8000776:	461a      	mov	r2, r3
 8000778:	4b18      	ldr	r3, [pc, #96]	; (80007dc <ds3231_ReadTime+0xb4>)
 800077a:	701a      	strb	r2, [r3, #0]
	ds3231_day = BCD2DEC(ds3231_buffer[3]);
 800077c:	4b13      	ldr	r3, [pc, #76]	; (80007cc <ds3231_ReadTime+0xa4>)
 800077e:	78db      	ldrb	r3, [r3, #3]
 8000780:	4618      	mov	r0, r3
 8000782:	f001 ffb9 	bl	80026f8 <BCD2DEC>
 8000786:	4603      	mov	r3, r0
 8000788:	461a      	mov	r2, r3
 800078a:	4b15      	ldr	r3, [pc, #84]	; (80007e0 <ds3231_ReadTime+0xb8>)
 800078c:	701a      	strb	r2, [r3, #0]
	ds3231_date = BCD2DEC(ds3231_buffer[4]);
 800078e:	4b0f      	ldr	r3, [pc, #60]	; (80007cc <ds3231_ReadTime+0xa4>)
 8000790:	791b      	ldrb	r3, [r3, #4]
 8000792:	4618      	mov	r0, r3
 8000794:	f001 ffb0 	bl	80026f8 <BCD2DEC>
 8000798:	4603      	mov	r3, r0
 800079a:	461a      	mov	r2, r3
 800079c:	4b11      	ldr	r3, [pc, #68]	; (80007e4 <ds3231_ReadTime+0xbc>)
 800079e:	701a      	strb	r2, [r3, #0]
	ds3231_month = BCD2DEC(ds3231_buffer[5]);
 80007a0:	4b0a      	ldr	r3, [pc, #40]	; (80007cc <ds3231_ReadTime+0xa4>)
 80007a2:	795b      	ldrb	r3, [r3, #5]
 80007a4:	4618      	mov	r0, r3
 80007a6:	f001 ffa7 	bl	80026f8 <BCD2DEC>
 80007aa:	4603      	mov	r3, r0
 80007ac:	461a      	mov	r2, r3
 80007ae:	4b0e      	ldr	r3, [pc, #56]	; (80007e8 <ds3231_ReadTime+0xc0>)
 80007b0:	701a      	strb	r2, [r3, #0]
	ds3231_year = BCD2DEC(ds3231_buffer[6]);
 80007b2:	4b06      	ldr	r3, [pc, #24]	; (80007cc <ds3231_ReadTime+0xa4>)
 80007b4:	799b      	ldrb	r3, [r3, #6]
 80007b6:	4618      	mov	r0, r3
 80007b8:	f001 ff9e 	bl	80026f8 <BCD2DEC>
 80007bc:	4603      	mov	r3, r0
 80007be:	461a      	mov	r2, r3
 80007c0:	4b0a      	ldr	r3, [pc, #40]	; (80007ec <ds3231_ReadTime+0xc4>)
 80007c2:	701a      	strb	r2, [r3, #0]
}
 80007c4:	bf00      	nop
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	200000a4 	.word	0x200000a4
 80007d0:	20000108 	.word	0x20000108
 80007d4:	200000ad 	.word	0x200000ad
 80007d8:	200000ac 	.word	0x200000ac
 80007dc:	200000ab 	.word	0x200000ab
 80007e0:	200000af 	.word	0x200000af
 80007e4:	200000ae 	.word	0x200000ae
 80007e8:	200000b0 	.word	0x200000b0
 80007ec:	200000b1 	.word	0x200000b1

080007f0 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b08e      	sub	sp, #56	; 0x38
 80007f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 80007f6:	f107 031c 	add.w	r3, r7, #28
 80007fa:	2200      	movs	r2, #0
 80007fc:	601a      	str	r2, [r3, #0]
 80007fe:	605a      	str	r2, [r3, #4]
 8000800:	609a      	str	r2, [r3, #8]
 8000802:	60da      	str	r2, [r3, #12]
 8000804:	611a      	str	r2, [r3, #16]
 8000806:	615a      	str	r2, [r3, #20]
 8000808:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 800080a:	463b      	mov	r3, r7
 800080c:	2200      	movs	r2, #0
 800080e:	601a      	str	r2, [r3, #0]
 8000810:	605a      	str	r2, [r3, #4]
 8000812:	609a      	str	r2, [r3, #8]
 8000814:	60da      	str	r2, [r3, #12]
 8000816:	611a      	str	r2, [r3, #16]
 8000818:	615a      	str	r2, [r3, #20]
 800081a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 800081c:	4b2f      	ldr	r3, [pc, #188]	; (80008dc <MX_FSMC_Init+0xec>)
 800081e:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8000822:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8000824:	4b2d      	ldr	r3, [pc, #180]	; (80008dc <MX_FSMC_Init+0xec>)
 8000826:	4a2e      	ldr	r2, [pc, #184]	; (80008e0 <MX_FSMC_Init+0xf0>)
 8000828:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 800082a:	4b2c      	ldr	r3, [pc, #176]	; (80008dc <MX_FSMC_Init+0xec>)
 800082c:	2200      	movs	r2, #0
 800082e:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8000830:	4b2a      	ldr	r3, [pc, #168]	; (80008dc <MX_FSMC_Init+0xec>)
 8000832:	2200      	movs	r2, #0
 8000834:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8000836:	4b29      	ldr	r3, [pc, #164]	; (80008dc <MX_FSMC_Init+0xec>)
 8000838:	2200      	movs	r2, #0
 800083a:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 800083c:	4b27      	ldr	r3, [pc, #156]	; (80008dc <MX_FSMC_Init+0xec>)
 800083e:	2210      	movs	r2, #16
 8000840:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8000842:	4b26      	ldr	r3, [pc, #152]	; (80008dc <MX_FSMC_Init+0xec>)
 8000844:	2200      	movs	r2, #0
 8000846:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8000848:	4b24      	ldr	r3, [pc, #144]	; (80008dc <MX_FSMC_Init+0xec>)
 800084a:	2200      	movs	r2, #0
 800084c:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 800084e:	4b23      	ldr	r3, [pc, #140]	; (80008dc <MX_FSMC_Init+0xec>)
 8000850:	2200      	movs	r2, #0
 8000852:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8000854:	4b21      	ldr	r3, [pc, #132]	; (80008dc <MX_FSMC_Init+0xec>)
 8000856:	2200      	movs	r2, #0
 8000858:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 800085a:	4b20      	ldr	r3, [pc, #128]	; (80008dc <MX_FSMC_Init+0xec>)
 800085c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000860:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8000862:	4b1e      	ldr	r3, [pc, #120]	; (80008dc <MX_FSMC_Init+0xec>)
 8000864:	2200      	movs	r2, #0
 8000866:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 8000868:	4b1c      	ldr	r3, [pc, #112]	; (80008dc <MX_FSMC_Init+0xec>)
 800086a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800086e:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000870:	4b1a      	ldr	r3, [pc, #104]	; (80008dc <MX_FSMC_Init+0xec>)
 8000872:	2200      	movs	r2, #0
 8000874:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8000876:	4b19      	ldr	r3, [pc, #100]	; (80008dc <MX_FSMC_Init+0xec>)
 8000878:	2200      	movs	r2, #0
 800087a:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 800087c:	4b17      	ldr	r3, [pc, #92]	; (80008dc <MX_FSMC_Init+0xec>)
 800087e:	2200      	movs	r2, #0
 8000880:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 0xf;
 8000882:	230f      	movs	r3, #15
 8000884:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 8000886:	230f      	movs	r3, #15
 8000888:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 800088a:	233c      	movs	r3, #60	; 0x3c
 800088c:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 0;
 800088e:	2300      	movs	r3, #0
 8000890:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 8000892:	2310      	movs	r3, #16
 8000894:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 8000896:	2311      	movs	r3, #17
 8000898:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 800089a:	2300      	movs	r3, #0
 800089c:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 8;
 800089e:	2308      	movs	r3, #8
 80008a0:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 80008a2:	230f      	movs	r3, #15
 80008a4:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 9;
 80008a6:	2309      	movs	r3, #9
 80008a8:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 80008aa:	2300      	movs	r3, #0
 80008ac:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 80008ae:	2310      	movs	r3, #16
 80008b0:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 80008b2:	2311      	movs	r3, #17
 80008b4:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 80008b6:	2300      	movs	r3, #0
 80008b8:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 80008ba:	463a      	mov	r2, r7
 80008bc:	f107 031c 	add.w	r3, r7, #28
 80008c0:	4619      	mov	r1, r3
 80008c2:	4806      	ldr	r0, [pc, #24]	; (80008dc <MX_FSMC_Init+0xec>)
 80008c4:	f004 fe9e 	bl	8005604 <HAL_SRAM_Init>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 80008ce:	f001 fbb3 	bl	8002038 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 80008d2:	bf00      	nop
 80008d4:	3738      	adds	r7, #56	; 0x38
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	200000b4 	.word	0x200000b4
 80008e0:	a0000104 	.word	0xa0000104

080008e4 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b086      	sub	sp, #24
 80008e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ea:	1d3b      	adds	r3, r7, #4
 80008ec:	2200      	movs	r2, #0
 80008ee:	601a      	str	r2, [r3, #0]
 80008f0:	605a      	str	r2, [r3, #4]
 80008f2:	609a      	str	r2, [r3, #8]
 80008f4:	60da      	str	r2, [r3, #12]
 80008f6:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 80008f8:	4b1c      	ldr	r3, [pc, #112]	; (800096c <HAL_FSMC_MspInit+0x88>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d131      	bne.n	8000964 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 8000900:	4b1a      	ldr	r3, [pc, #104]	; (800096c <HAL_FSMC_MspInit+0x88>)
 8000902:	2201      	movs	r2, #1
 8000904:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8000906:	2300      	movs	r3, #0
 8000908:	603b      	str	r3, [r7, #0]
 800090a:	4b19      	ldr	r3, [pc, #100]	; (8000970 <HAL_FSMC_MspInit+0x8c>)
 800090c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800090e:	4a18      	ldr	r2, [pc, #96]	; (8000970 <HAL_FSMC_MspInit+0x8c>)
 8000910:	f043 0301 	orr.w	r3, r3, #1
 8000914:	6393      	str	r3, [r2, #56]	; 0x38
 8000916:	4b16      	ldr	r3, [pc, #88]	; (8000970 <HAL_FSMC_MspInit+0x8c>)
 8000918:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800091a:	f003 0301 	and.w	r3, r3, #1
 800091e:	603b      	str	r3, [r7, #0]
 8000920:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8000922:	f64f 7388 	movw	r3, #65416	; 0xff88
 8000926:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000928:	2302      	movs	r3, #2
 800092a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092c:	2300      	movs	r3, #0
 800092e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000930:	2303      	movs	r3, #3
 8000932:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000934:	230c      	movs	r3, #12
 8000936:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000938:	1d3b      	adds	r3, r7, #4
 800093a:	4619      	mov	r1, r3
 800093c:	480d      	ldr	r0, [pc, #52]	; (8000974 <HAL_FSMC_MspInit+0x90>)
 800093e:	f002 f97d 	bl	8002c3c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8000942:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 8000946:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000948:	2302      	movs	r3, #2
 800094a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094c:	2300      	movs	r3, #0
 800094e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000950:	2303      	movs	r3, #3
 8000952:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000954:	230c      	movs	r3, #12
 8000956:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000958:	1d3b      	adds	r3, r7, #4
 800095a:	4619      	mov	r1, r3
 800095c:	4806      	ldr	r0, [pc, #24]	; (8000978 <HAL_FSMC_MspInit+0x94>)
 800095e:	f002 f96d 	bl	8002c3c <HAL_GPIO_Init>
 8000962:	e000      	b.n	8000966 <HAL_FSMC_MspInit+0x82>
    return;
 8000964:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8000966:	3718      	adds	r7, #24
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	20000104 	.word	0x20000104
 8000970:	40023800 	.word	0x40023800
 8000974:	40021000 	.word	0x40021000
 8000978:	40020c00 	.word	0x40020c00

0800097c <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 800097c:	b580      	push	{r7, lr}
 800097e:	b082      	sub	sp, #8
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8000984:	f7ff ffae 	bl	80008e4 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8000988:	bf00      	nop
 800098a:	3708      	adds	r7, #8
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}

08000990 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b08c      	sub	sp, #48	; 0x30
 8000994:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000996:	f107 031c 	add.w	r3, r7, #28
 800099a:	2200      	movs	r2, #0
 800099c:	601a      	str	r2, [r3, #0]
 800099e:	605a      	str	r2, [r3, #4]
 80009a0:	609a      	str	r2, [r3, #8]
 80009a2:	60da      	str	r2, [r3, #12]
 80009a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009a6:	2300      	movs	r3, #0
 80009a8:	61bb      	str	r3, [r7, #24]
 80009aa:	4b6f      	ldr	r3, [pc, #444]	; (8000b68 <MX_GPIO_Init+0x1d8>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ae:	4a6e      	ldr	r2, [pc, #440]	; (8000b68 <MX_GPIO_Init+0x1d8>)
 80009b0:	f043 0310 	orr.w	r3, r3, #16
 80009b4:	6313      	str	r3, [r2, #48]	; 0x30
 80009b6:	4b6c      	ldr	r3, [pc, #432]	; (8000b68 <MX_GPIO_Init+0x1d8>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ba:	f003 0310 	and.w	r3, r3, #16
 80009be:	61bb      	str	r3, [r7, #24]
 80009c0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009c2:	2300      	movs	r3, #0
 80009c4:	617b      	str	r3, [r7, #20]
 80009c6:	4b68      	ldr	r3, [pc, #416]	; (8000b68 <MX_GPIO_Init+0x1d8>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ca:	4a67      	ldr	r2, [pc, #412]	; (8000b68 <MX_GPIO_Init+0x1d8>)
 80009cc:	f043 0304 	orr.w	r3, r3, #4
 80009d0:	6313      	str	r3, [r2, #48]	; 0x30
 80009d2:	4b65      	ldr	r3, [pc, #404]	; (8000b68 <MX_GPIO_Init+0x1d8>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d6:	f003 0304 	and.w	r3, r3, #4
 80009da:	617b      	str	r3, [r7, #20]
 80009dc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009de:	2300      	movs	r3, #0
 80009e0:	613b      	str	r3, [r7, #16]
 80009e2:	4b61      	ldr	r3, [pc, #388]	; (8000b68 <MX_GPIO_Init+0x1d8>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e6:	4a60      	ldr	r2, [pc, #384]	; (8000b68 <MX_GPIO_Init+0x1d8>)
 80009e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009ec:	6313      	str	r3, [r2, #48]	; 0x30
 80009ee:	4b5e      	ldr	r3, [pc, #376]	; (8000b68 <MX_GPIO_Init+0x1d8>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009f6:	613b      	str	r3, [r7, #16]
 80009f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009fa:	2300      	movs	r3, #0
 80009fc:	60fb      	str	r3, [r7, #12]
 80009fe:	4b5a      	ldr	r3, [pc, #360]	; (8000b68 <MX_GPIO_Init+0x1d8>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a02:	4a59      	ldr	r2, [pc, #356]	; (8000b68 <MX_GPIO_Init+0x1d8>)
 8000a04:	f043 0301 	orr.w	r3, r3, #1
 8000a08:	6313      	str	r3, [r2, #48]	; 0x30
 8000a0a:	4b57      	ldr	r3, [pc, #348]	; (8000b68 <MX_GPIO_Init+0x1d8>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0e:	f003 0301 	and.w	r3, r3, #1
 8000a12:	60fb      	str	r3, [r7, #12]
 8000a14:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a16:	2300      	movs	r3, #0
 8000a18:	60bb      	str	r3, [r7, #8]
 8000a1a:	4b53      	ldr	r3, [pc, #332]	; (8000b68 <MX_GPIO_Init+0x1d8>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1e:	4a52      	ldr	r2, [pc, #328]	; (8000b68 <MX_GPIO_Init+0x1d8>)
 8000a20:	f043 0308 	orr.w	r3, r3, #8
 8000a24:	6313      	str	r3, [r2, #48]	; 0x30
 8000a26:	4b50      	ldr	r3, [pc, #320]	; (8000b68 <MX_GPIO_Init+0x1d8>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2a:	f003 0308 	and.w	r3, r3, #8
 8000a2e:	60bb      	str	r3, [r7, #8]
 8000a30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a32:	2300      	movs	r3, #0
 8000a34:	607b      	str	r3, [r7, #4]
 8000a36:	4b4c      	ldr	r3, [pc, #304]	; (8000b68 <MX_GPIO_Init+0x1d8>)
 8000a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3a:	4a4b      	ldr	r2, [pc, #300]	; (8000b68 <MX_GPIO_Init+0x1d8>)
 8000a3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a40:	6313      	str	r3, [r2, #48]	; 0x30
 8000a42:	4b49      	ldr	r3, [pc, #292]	; (8000b68 <MX_GPIO_Init+0x1d8>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a4a:	607b      	str	r3, [r7, #4]
 8000a4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a4e:	2300      	movs	r3, #0
 8000a50:	603b      	str	r3, [r7, #0]
 8000a52:	4b45      	ldr	r3, [pc, #276]	; (8000b68 <MX_GPIO_Init+0x1d8>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a56:	4a44      	ldr	r2, [pc, #272]	; (8000b68 <MX_GPIO_Init+0x1d8>)
 8000a58:	f043 0302 	orr.w	r3, r3, #2
 8000a5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a5e:	4b42      	ldr	r3, [pc, #264]	; (8000b68 <MX_GPIO_Init+0x1d8>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a62:	f003 0302 	and.w	r3, r3, #2
 8000a66:	603b      	str	r3, [r7, #0]
 8000a68:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin, GPIO_PIN_RESET);
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	2170      	movs	r1, #112	; 0x70
 8000a6e:	483f      	ldr	r0, [pc, #252]	; (8000b6c <MX_GPIO_Init+0x1dc>)
 8000a70:	f002 fa80 	bl	8002f74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8000a74:	2200      	movs	r2, #0
 8000a76:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a7a:	483d      	ldr	r0, [pc, #244]	; (8000b70 <MX_GPIO_Init+0x1e0>)
 8000a7c:	f002 fa7a 	bl	8002f74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, GPIO_PIN_RESET);
 8000a80:	2200      	movs	r2, #0
 8000a82:	2140      	movs	r1, #64	; 0x40
 8000a84:	483b      	ldr	r0, [pc, #236]	; (8000b74 <MX_GPIO_Init+0x1e4>)
 8000a86:	f002 fa75 	bl	8002f74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, GPIO_PIN_RESET);
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a90:	4839      	ldr	r0, [pc, #228]	; (8000b78 <MX_GPIO_Init+0x1e8>)
 8000a92:	f002 fa6f 	bl	8002f74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 8000a96:	2200      	movs	r2, #0
 8000a98:	2108      	movs	r1, #8
 8000a9a:	4838      	ldr	r0, [pc, #224]	; (8000b7c <MX_GPIO_Init+0x1ec>)
 8000a9c:	f002 fa6a 	bl	8002f74 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin;
 8000aa0:	2370      	movs	r3, #112	; 0x70
 8000aa2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aa4:	2301      	movs	r3, #1
 8000aa6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aac:	2300      	movs	r3, #0
 8000aae:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ab0:	f107 031c 	add.w	r3, r7, #28
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	482d      	ldr	r0, [pc, #180]	; (8000b6c <MX_GPIO_Init+0x1dc>)
 8000ab8:	f002 f8c0 	bl	8002c3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_RES_Pin;
 8000abc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ac0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ac2:	2301      	movs	r3, #1
 8000ac4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aca:	2300      	movs	r3, #0
 8000acc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(FSMC_RES_GPIO_Port, &GPIO_InitStruct);
 8000ace:	f107 031c 	add.w	r3, r7, #28
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	4826      	ldr	r0, [pc, #152]	; (8000b70 <MX_GPIO_Init+0x1e0>)
 8000ad6:	f002 f8b1 	bl	8002c3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = INPUT_X0_Pin|INPUT_X1_Pin;
 8000ada:	23c0      	movs	r3, #192	; 0xc0
 8000adc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ae6:	f107 031c 	add.w	r3, r7, #28
 8000aea:	4619      	mov	r1, r3
 8000aec:	4822      	ldr	r0, [pc, #136]	; (8000b78 <MX_GPIO_Init+0x1e8>)
 8000aee:	f002 f8a5 	bl	8002c3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = INPUT_X2_Pin|INPUT_X3_Pin;
 8000af2:	2330      	movs	r3, #48	; 0x30
 8000af4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000af6:	2300      	movs	r3, #0
 8000af8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afa:	2300      	movs	r3, #0
 8000afc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000afe:	f107 031c 	add.w	r3, r7, #28
 8000b02:	4619      	mov	r1, r3
 8000b04:	481a      	ldr	r0, [pc, #104]	; (8000b70 <MX_GPIO_Init+0x1e0>)
 8000b06:	f002 f899 	bl	8002c3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin;
 8000b0a:	2340      	movs	r3, #64	; 0x40
 8000b0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b0e:	2301      	movs	r3, #1
 8000b10:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b12:	2300      	movs	r3, #0
 8000b14:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b16:	2300      	movs	r3, #0
 8000b18:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD_LATCH_GPIO_Port, &GPIO_InitStruct);
 8000b1a:	f107 031c 	add.w	r3, r7, #28
 8000b1e:	4619      	mov	r1, r3
 8000b20:	4814      	ldr	r0, [pc, #80]	; (8000b74 <MX_GPIO_Init+0x1e4>)
 8000b22:	f002 f88b 	bl	8002c3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_BLK_Pin;
 8000b26:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b30:	2300      	movs	r3, #0
 8000b32:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b34:	2300      	movs	r3, #0
 8000b36:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(FSMC_BLK_GPIO_Port, &GPIO_InitStruct);
 8000b38:	f107 031c 	add.w	r3, r7, #28
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	480e      	ldr	r0, [pc, #56]	; (8000b78 <MX_GPIO_Init+0x1e8>)
 8000b40:	f002 f87c 	bl	8002c3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 8000b44:	2308      	movs	r3, #8
 8000b46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b48:	2301      	movs	r3, #1
 8000b4a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b50:	2300      	movs	r3, #0
 8000b52:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 8000b54:	f107 031c 	add.w	r3, r7, #28
 8000b58:	4619      	mov	r1, r3
 8000b5a:	4808      	ldr	r0, [pc, #32]	; (8000b7c <MX_GPIO_Init+0x1ec>)
 8000b5c:	f002 f86e 	bl	8002c3c <HAL_GPIO_Init>

}
 8000b60:	bf00      	nop
 8000b62:	3730      	adds	r7, #48	; 0x30
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	40023800 	.word	0x40023800
 8000b6c:	40021000 	.word	0x40021000
 8000b70:	40020800 	.word	0x40020800
 8000b74:	40021800 	.word	0x40021800
 8000b78:	40020000 	.word	0x40020000
 8000b7c:	40020c00 	.word	0x40020c00

08000b80 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b84:	4b12      	ldr	r3, [pc, #72]	; (8000bd0 <MX_I2C1_Init+0x50>)
 8000b86:	4a13      	ldr	r2, [pc, #76]	; (8000bd4 <MX_I2C1_Init+0x54>)
 8000b88:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000b8a:	4b11      	ldr	r3, [pc, #68]	; (8000bd0 <MX_I2C1_Init+0x50>)
 8000b8c:	4a12      	ldr	r2, [pc, #72]	; (8000bd8 <MX_I2C1_Init+0x58>)
 8000b8e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b90:	4b0f      	ldr	r3, [pc, #60]	; (8000bd0 <MX_I2C1_Init+0x50>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000b96:	4b0e      	ldr	r3, [pc, #56]	; (8000bd0 <MX_I2C1_Init+0x50>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b9c:	4b0c      	ldr	r3, [pc, #48]	; (8000bd0 <MX_I2C1_Init+0x50>)
 8000b9e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ba2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ba4:	4b0a      	ldr	r3, [pc, #40]	; (8000bd0 <MX_I2C1_Init+0x50>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000baa:	4b09      	ldr	r3, [pc, #36]	; (8000bd0 <MX_I2C1_Init+0x50>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000bb0:	4b07      	ldr	r3, [pc, #28]	; (8000bd0 <MX_I2C1_Init+0x50>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000bb6:	4b06      	ldr	r3, [pc, #24]	; (8000bd0 <MX_I2C1_Init+0x50>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000bbc:	4804      	ldr	r0, [pc, #16]	; (8000bd0 <MX_I2C1_Init+0x50>)
 8000bbe:	f002 f9f3 	bl	8002fa8 <HAL_I2C_Init>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d001      	beq.n	8000bcc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000bc8:	f001 fa36 	bl	8002038 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000bcc:	bf00      	nop
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	20000108 	.word	0x20000108
 8000bd4:	40005400 	.word	0x40005400
 8000bd8:	000186a0 	.word	0x000186a0

08000bdc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b08a      	sub	sp, #40	; 0x28
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be4:	f107 0314 	add.w	r3, r7, #20
 8000be8:	2200      	movs	r2, #0
 8000bea:	601a      	str	r2, [r3, #0]
 8000bec:	605a      	str	r2, [r3, #4]
 8000bee:	609a      	str	r2, [r3, #8]
 8000bf0:	60da      	str	r2, [r3, #12]
 8000bf2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	4a19      	ldr	r2, [pc, #100]	; (8000c60 <HAL_I2C_MspInit+0x84>)
 8000bfa:	4293      	cmp	r3, r2
 8000bfc:	d12b      	bne.n	8000c56 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bfe:	2300      	movs	r3, #0
 8000c00:	613b      	str	r3, [r7, #16]
 8000c02:	4b18      	ldr	r3, [pc, #96]	; (8000c64 <HAL_I2C_MspInit+0x88>)
 8000c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c06:	4a17      	ldr	r2, [pc, #92]	; (8000c64 <HAL_I2C_MspInit+0x88>)
 8000c08:	f043 0302 	orr.w	r3, r3, #2
 8000c0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c0e:	4b15      	ldr	r3, [pc, #84]	; (8000c64 <HAL_I2C_MspInit+0x88>)
 8000c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c12:	f003 0302 	and.w	r3, r3, #2
 8000c16:	613b      	str	r3, [r7, #16]
 8000c18:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c1a:	23c0      	movs	r3, #192	; 0xc0
 8000c1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c1e:	2312      	movs	r3, #18
 8000c20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c22:	2300      	movs	r3, #0
 8000c24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c26:	2303      	movs	r3, #3
 8000c28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c2a:	2304      	movs	r3, #4
 8000c2c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c2e:	f107 0314 	add.w	r3, r7, #20
 8000c32:	4619      	mov	r1, r3
 8000c34:	480c      	ldr	r0, [pc, #48]	; (8000c68 <HAL_I2C_MspInit+0x8c>)
 8000c36:	f002 f801 	bl	8002c3c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	60fb      	str	r3, [r7, #12]
 8000c3e:	4b09      	ldr	r3, [pc, #36]	; (8000c64 <HAL_I2C_MspInit+0x88>)
 8000c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c42:	4a08      	ldr	r2, [pc, #32]	; (8000c64 <HAL_I2C_MspInit+0x88>)
 8000c44:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c48:	6413      	str	r3, [r2, #64]	; 0x40
 8000c4a:	4b06      	ldr	r3, [pc, #24]	; (8000c64 <HAL_I2C_MspInit+0x88>)
 8000c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c4e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c52:	60fb      	str	r3, [r7, #12]
 8000c54:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000c56:	bf00      	nop
 8000c58:	3728      	adds	r7, #40	; 0x28
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	40005400 	.word	0x40005400
 8000c64:	40023800 	.word	0x40023800
 8000c68:	40020400 	.word	0x40020400

08000c6c <LCD_WR_REG>:
unsigned char s[50];

_lcd_dev lcddev;

void LCD_WR_REG(uint16_t reg) //
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b083      	sub	sp, #12
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	4603      	mov	r3, r0
 8000c74:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG=reg;
 8000c76:	4a04      	ldr	r2, [pc, #16]	; (8000c88 <LCD_WR_REG+0x1c>)
 8000c78:	88fb      	ldrh	r3, [r7, #6]
 8000c7a:	8013      	strh	r3, [r2, #0]
}
 8000c7c:	bf00      	nop
 8000c7e:	370c      	adds	r7, #12
 8000c80:	46bd      	mov	sp, r7
 8000c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c86:	4770      	bx	lr
 8000c88:	600ffffe 	.word	0x600ffffe

08000c8c <LCD_WR_DATA>:

void LCD_WR_DATA(uint16_t data)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b083      	sub	sp, #12
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	4603      	mov	r3, r0
 8000c94:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM=data;
 8000c96:	4a04      	ldr	r2, [pc, #16]	; (8000ca8 <LCD_WR_DATA+0x1c>)
 8000c98:	88fb      	ldrh	r3, [r7, #6]
 8000c9a:	8053      	strh	r3, [r2, #2]
}
 8000c9c:	bf00      	nop
 8000c9e:	370c      	adds	r7, #12
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca6:	4770      	bx	lr
 8000ca8:	600ffffe 	.word	0x600ffffe

08000cac <LCD_RD_DATA>:

uint16_t LCD_RD_DATA(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	b083      	sub	sp, #12
 8000cb0:	af00      	add	r7, sp, #0
	__IO uint16_t ram;
	ram=LCD->LCD_RAM;
 8000cb2:	4b06      	ldr	r3, [pc, #24]	; (8000ccc <LCD_RD_DATA+0x20>)
 8000cb4:	885b      	ldrh	r3, [r3, #2]
 8000cb6:	b29b      	uxth	r3, r3
 8000cb8:	80fb      	strh	r3, [r7, #6]
	return ram;
 8000cba:	88fb      	ldrh	r3, [r7, #6]
 8000cbc:	b29b      	uxth	r3, r3
}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	370c      	adds	r7, #12
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr
 8000cca:	bf00      	nop
 8000ccc:	600ffffe 	.word	0x600ffffe

08000cd0 <lcd_AddressSet>:


void lcd_AddressSet(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2)
{
 8000cd0:	b590      	push	{r4, r7, lr}
 8000cd2:	b083      	sub	sp, #12
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	4604      	mov	r4, r0
 8000cd8:	4608      	mov	r0, r1
 8000cda:	4611      	mov	r1, r2
 8000cdc:	461a      	mov	r2, r3
 8000cde:	4623      	mov	r3, r4
 8000ce0:	80fb      	strh	r3, [r7, #6]
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	80bb      	strh	r3, [r7, #4]
 8000ce6:	460b      	mov	r3, r1
 8000ce8:	807b      	strh	r3, [r7, #2]
 8000cea:	4613      	mov	r3, r2
 8000cec:	803b      	strh	r3, [r7, #0]
		LCD_WR_REG(0x2a);
 8000cee:	202a      	movs	r0, #42	; 0x2a
 8000cf0:	f7ff ffbc 	bl	8000c6c <LCD_WR_REG>
		LCD_WR_DATA(x1>>8);
 8000cf4:	88fb      	ldrh	r3, [r7, #6]
 8000cf6:	0a1b      	lsrs	r3, r3, #8
 8000cf8:	b29b      	uxth	r3, r3
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f7ff ffc6 	bl	8000c8c <LCD_WR_DATA>
		LCD_WR_DATA(x1&0xff);
 8000d00:	88fb      	ldrh	r3, [r7, #6]
 8000d02:	b2db      	uxtb	r3, r3
 8000d04:	b29b      	uxth	r3, r3
 8000d06:	4618      	mov	r0, r3
 8000d08:	f7ff ffc0 	bl	8000c8c <LCD_WR_DATA>
		LCD_WR_DATA(x2>>8);
 8000d0c:	887b      	ldrh	r3, [r7, #2]
 8000d0e:	0a1b      	lsrs	r3, r3, #8
 8000d10:	b29b      	uxth	r3, r3
 8000d12:	4618      	mov	r0, r3
 8000d14:	f7ff ffba 	bl	8000c8c <LCD_WR_DATA>
		LCD_WR_DATA(x2&0xff);
 8000d18:	887b      	ldrh	r3, [r7, #2]
 8000d1a:	b2db      	uxtb	r3, r3
 8000d1c:	b29b      	uxth	r3, r3
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f7ff ffb4 	bl	8000c8c <LCD_WR_DATA>
		LCD_WR_REG(0x2b);
 8000d24:	202b      	movs	r0, #43	; 0x2b
 8000d26:	f7ff ffa1 	bl	8000c6c <LCD_WR_REG>
		LCD_WR_DATA(y1>>8);
 8000d2a:	88bb      	ldrh	r3, [r7, #4]
 8000d2c:	0a1b      	lsrs	r3, r3, #8
 8000d2e:	b29b      	uxth	r3, r3
 8000d30:	4618      	mov	r0, r3
 8000d32:	f7ff ffab 	bl	8000c8c <LCD_WR_DATA>
		LCD_WR_DATA(y1&0xff);
 8000d36:	88bb      	ldrh	r3, [r7, #4]
 8000d38:	b2db      	uxtb	r3, r3
 8000d3a:	b29b      	uxth	r3, r3
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f7ff ffa5 	bl	8000c8c <LCD_WR_DATA>
		LCD_WR_DATA(y2>>8);
 8000d42:	883b      	ldrh	r3, [r7, #0]
 8000d44:	0a1b      	lsrs	r3, r3, #8
 8000d46:	b29b      	uxth	r3, r3
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f7ff ff9f 	bl	8000c8c <LCD_WR_DATA>
		LCD_WR_DATA(y2&0xff);
 8000d4e:	883b      	ldrh	r3, [r7, #0]
 8000d50:	b2db      	uxtb	r3, r3
 8000d52:	b29b      	uxth	r3, r3
 8000d54:	4618      	mov	r0, r3
 8000d56:	f7ff ff99 	bl	8000c8c <LCD_WR_DATA>
		LCD_WR_REG(0x2c);
 8000d5a:	202c      	movs	r0, #44	; 0x2c
 8000d5c:	f7ff ff86 	bl	8000c6c <LCD_WR_REG>
}
 8000d60:	bf00      	nop
 8000d62:	370c      	adds	r7, #12
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd90      	pop	{r4, r7, pc}

08000d68 <lcd_Clear>:
	return (((r>>11)<<11)|((g>>10)<<5)|(b>>11));
}


void lcd_Clear(uint16_t color) //
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b084      	sub	sp, #16
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	4603      	mov	r3, r0
 8000d70:	80fb      	strh	r3, [r7, #6]
	uint16_t i,j;
	uint8_t buffer[2];
	buffer[0] = color >> 8;
 8000d72:	88fb      	ldrh	r3, [r7, #6]
 8000d74:	0a1b      	lsrs	r3, r3, #8
 8000d76:	b29b      	uxth	r3, r3
 8000d78:	b2db      	uxtb	r3, r3
 8000d7a:	723b      	strb	r3, [r7, #8]
	buffer[1] = color;
 8000d7c:	88fb      	ldrh	r3, [r7, #6]
 8000d7e:	b2db      	uxtb	r3, r3
 8000d80:	727b      	strb	r3, [r7, #9]
	lcd_AddressSet(0,0,lcddev.width-1,lcddev.height-1);
 8000d82:	4b15      	ldr	r3, [pc, #84]	; (8000dd8 <lcd_Clear+0x70>)
 8000d84:	881b      	ldrh	r3, [r3, #0]
 8000d86:	3b01      	subs	r3, #1
 8000d88:	b29a      	uxth	r2, r3
 8000d8a:	4b13      	ldr	r3, [pc, #76]	; (8000dd8 <lcd_Clear+0x70>)
 8000d8c:	885b      	ldrh	r3, [r3, #2]
 8000d8e:	3b01      	subs	r3, #1
 8000d90:	b29b      	uxth	r3, r3
 8000d92:	2100      	movs	r1, #0
 8000d94:	2000      	movs	r0, #0
 8000d96:	f7ff ff9b 	bl	8000cd0 <lcd_AddressSet>
	for(i=0;i<lcddev.width;i++)
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	81fb      	strh	r3, [r7, #14]
 8000d9e:	e011      	b.n	8000dc4 <lcd_Clear+0x5c>
	{
		for(j=0;j<lcddev.height;j++)
 8000da0:	2300      	movs	r3, #0
 8000da2:	81bb      	strh	r3, [r7, #12]
 8000da4:	e006      	b.n	8000db4 <lcd_Clear+0x4c>
		{
			LCD_WR_DATA(color);
 8000da6:	88fb      	ldrh	r3, [r7, #6]
 8000da8:	4618      	mov	r0, r3
 8000daa:	f7ff ff6f 	bl	8000c8c <LCD_WR_DATA>
		for(j=0;j<lcddev.height;j++)
 8000dae:	89bb      	ldrh	r3, [r7, #12]
 8000db0:	3301      	adds	r3, #1
 8000db2:	81bb      	strh	r3, [r7, #12]
 8000db4:	4b08      	ldr	r3, [pc, #32]	; (8000dd8 <lcd_Clear+0x70>)
 8000db6:	885b      	ldrh	r3, [r3, #2]
 8000db8:	89ba      	ldrh	r2, [r7, #12]
 8000dba:	429a      	cmp	r2, r3
 8000dbc:	d3f3      	bcc.n	8000da6 <lcd_Clear+0x3e>
	for(i=0;i<lcddev.width;i++)
 8000dbe:	89fb      	ldrh	r3, [r7, #14]
 8000dc0:	3301      	adds	r3, #1
 8000dc2:	81fb      	strh	r3, [r7, #14]
 8000dc4:	4b04      	ldr	r3, [pc, #16]	; (8000dd8 <lcd_Clear+0x70>)
 8000dc6:	881b      	ldrh	r3, [r3, #0]
 8000dc8:	89fa      	ldrh	r2, [r7, #14]
 8000dca:	429a      	cmp	r2, r3
 8000dcc:	d3e8      	bcc.n	8000da0 <lcd_Clear+0x38>
//			sram_WriteBuffer(&buffer, (i*lcddev.width+j)*4, 2);
		}
	}
}
 8000dce:	bf00      	nop
 8000dd0:	bf00      	nop
 8000dd2:	3710      	adds	r7, #16
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	2000015c 	.word	0x2000015c

08000ddc <lcd_Fill>:

void lcd_Fill(uint16_t xsta,uint16_t ysta,uint16_t xend,uint16_t yend,uint16_t color) //add a hcn = 1 mau car been trogn
{
 8000ddc:	b590      	push	{r4, r7, lr}
 8000dde:	b085      	sub	sp, #20
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	4604      	mov	r4, r0
 8000de4:	4608      	mov	r0, r1
 8000de6:	4611      	mov	r1, r2
 8000de8:	461a      	mov	r2, r3
 8000dea:	4623      	mov	r3, r4
 8000dec:	80fb      	strh	r3, [r7, #6]
 8000dee:	4603      	mov	r3, r0
 8000df0:	80bb      	strh	r3, [r7, #4]
 8000df2:	460b      	mov	r3, r1
 8000df4:	807b      	strh	r3, [r7, #2]
 8000df6:	4613      	mov	r3, r2
 8000df8:	803b      	strh	r3, [r7, #0]
	uint16_t i,j;
	lcd_AddressSet(xsta,ysta,xend-1,yend-1);
 8000dfa:	887b      	ldrh	r3, [r7, #2]
 8000dfc:	3b01      	subs	r3, #1
 8000dfe:	b29a      	uxth	r2, r3
 8000e00:	883b      	ldrh	r3, [r7, #0]
 8000e02:	3b01      	subs	r3, #1
 8000e04:	b29b      	uxth	r3, r3
 8000e06:	88b9      	ldrh	r1, [r7, #4]
 8000e08:	88f8      	ldrh	r0, [r7, #6]
 8000e0a:	f7ff ff61 	bl	8000cd0 <lcd_AddressSet>
	for(i=ysta;i<yend;i++)
 8000e0e:	88bb      	ldrh	r3, [r7, #4]
 8000e10:	81fb      	strh	r3, [r7, #14]
 8000e12:	e010      	b.n	8000e36 <lcd_Fill+0x5a>
	{
		for(j=xsta;j<xend;j++)
 8000e14:	88fb      	ldrh	r3, [r7, #6]
 8000e16:	81bb      	strh	r3, [r7, #12]
 8000e18:	e006      	b.n	8000e28 <lcd_Fill+0x4c>
		{
			LCD_WR_DATA(color);
 8000e1a:	8c3b      	ldrh	r3, [r7, #32]
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f7ff ff35 	bl	8000c8c <LCD_WR_DATA>
		for(j=xsta;j<xend;j++)
 8000e22:	89bb      	ldrh	r3, [r7, #12]
 8000e24:	3301      	adds	r3, #1
 8000e26:	81bb      	strh	r3, [r7, #12]
 8000e28:	89ba      	ldrh	r2, [r7, #12]
 8000e2a:	887b      	ldrh	r3, [r7, #2]
 8000e2c:	429a      	cmp	r2, r3
 8000e2e:	d3f4      	bcc.n	8000e1a <lcd_Fill+0x3e>
	for(i=ysta;i<yend;i++)
 8000e30:	89fb      	ldrh	r3, [r7, #14]
 8000e32:	3301      	adds	r3, #1
 8000e34:	81fb      	strh	r3, [r7, #14]
 8000e36:	89fa      	ldrh	r2, [r7, #14]
 8000e38:	883b      	ldrh	r3, [r7, #0]
 8000e3a:	429a      	cmp	r2, r3
 8000e3c:	d3ea      	bcc.n	8000e14 <lcd_Fill+0x38>
		}
	}
}
 8000e3e:	bf00      	nop
 8000e40:	bf00      	nop
 8000e42:	3714      	adds	r7, #20
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd90      	pop	{r4, r7, pc}

08000e48 <lcd_DrawPoint>:

void lcd_DrawPoint(uint16_t x,uint16_t y,uint16_t color) // 1 ddieemr anhr
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	4603      	mov	r3, r0
 8000e50:	80fb      	strh	r3, [r7, #6]
 8000e52:	460b      	mov	r3, r1
 8000e54:	80bb      	strh	r3, [r7, #4]
 8000e56:	4613      	mov	r3, r2
 8000e58:	807b      	strh	r3, [r7, #2]
	lcd_AddressSet(x,y,x,y);//ÉèÖÃ¹â±êÎ»ÖÃ
 8000e5a:	88bb      	ldrh	r3, [r7, #4]
 8000e5c:	88fa      	ldrh	r2, [r7, #6]
 8000e5e:	88b9      	ldrh	r1, [r7, #4]
 8000e60:	88f8      	ldrh	r0, [r7, #6]
 8000e62:	f7ff ff35 	bl	8000cd0 <lcd_AddressSet>
	LCD_WR_DATA(color);
 8000e66:	887b      	ldrh	r3, [r7, #2]
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f7ff ff0f 	bl	8000c8c <LCD_WR_DATA>
}
 8000e6e:	bf00      	nop
 8000e70:	3708      	adds	r7, #8
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
	...

08000e78 <lcd_ShowChar>:
	lcd_DrawLine(x1,y2,x2,y2,color);
	lcd_DrawLine(x2,y1,x2,y2,color);
}

void lcd_ShowChar(uint16_t x,uint16_t y,uint8_t num,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode) // 1ky tu size = 12 16 24 32, fc: mau chuw, bc, mauf neefn, mode: hien neen
{
 8000e78:	b590      	push	{r4, r7, lr}
 8000e7a:	b087      	sub	sp, #28
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	4604      	mov	r4, r0
 8000e80:	4608      	mov	r0, r1
 8000e82:	4611      	mov	r1, r2
 8000e84:	461a      	mov	r2, r3
 8000e86:	4623      	mov	r3, r4
 8000e88:	80fb      	strh	r3, [r7, #6]
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	80bb      	strh	r3, [r7, #4]
 8000e8e:	460b      	mov	r3, r1
 8000e90:	70fb      	strb	r3, [r7, #3]
 8000e92:	4613      	mov	r3, r2
 8000e94:	803b      	strh	r3, [r7, #0]
	uint8_t temp,sizex,t,m=0;
 8000e96:	2300      	movs	r3, #0
 8000e98:	757b      	strb	r3, [r7, #21]
	uint16_t i,TypefaceNum;
	uint16_t x0=x;
 8000e9a:	88fb      	ldrh	r3, [r7, #6]
 8000e9c:	823b      	strh	r3, [r7, #16]
	sizex=sizey/2;
 8000e9e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000ea2:	085b      	lsrs	r3, r3, #1
 8000ea4:	73fb      	strb	r3, [r7, #15]
	TypefaceNum=(sizex/8+((sizex%8)?1:0))*sizey;
 8000ea6:	7bfb      	ldrb	r3, [r7, #15]
 8000ea8:	08db      	lsrs	r3, r3, #3
 8000eaa:	b2db      	uxtb	r3, r3
 8000eac:	461a      	mov	r2, r3
 8000eae:	7bfb      	ldrb	r3, [r7, #15]
 8000eb0:	f003 0307 	and.w	r3, r3, #7
 8000eb4:	b2db      	uxtb	r3, r3
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	bf14      	ite	ne
 8000eba:	2301      	movne	r3, #1
 8000ebc:	2300      	moveq	r3, #0
 8000ebe:	b2db      	uxtb	r3, r3
 8000ec0:	4413      	add	r3, r2
 8000ec2:	b29a      	uxth	r2, r3
 8000ec4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000ec8:	b29b      	uxth	r3, r3
 8000eca:	fb12 f303 	smulbb	r3, r2, r3
 8000ece:	81bb      	strh	r3, [r7, #12]
	num=num-' ';
 8000ed0:	78fb      	ldrb	r3, [r7, #3]
 8000ed2:	3b20      	subs	r3, #32
 8000ed4:	70fb      	strb	r3, [r7, #3]
	lcd_AddressSet(x,y,x+sizex-1,y+sizey-1);
 8000ed6:	7bfb      	ldrb	r3, [r7, #15]
 8000ed8:	b29a      	uxth	r2, r3
 8000eda:	88fb      	ldrh	r3, [r7, #6]
 8000edc:	4413      	add	r3, r2
 8000ede:	b29b      	uxth	r3, r3
 8000ee0:	3b01      	subs	r3, #1
 8000ee2:	b29c      	uxth	r4, r3
 8000ee4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000ee8:	b29a      	uxth	r2, r3
 8000eea:	88bb      	ldrh	r3, [r7, #4]
 8000eec:	4413      	add	r3, r2
 8000eee:	b29b      	uxth	r3, r3
 8000ef0:	3b01      	subs	r3, #1
 8000ef2:	b29b      	uxth	r3, r3
 8000ef4:	88b9      	ldrh	r1, [r7, #4]
 8000ef6:	88f8      	ldrh	r0, [r7, #6]
 8000ef8:	4622      	mov	r2, r4
 8000efa:	f7ff fee9 	bl	8000cd0 <lcd_AddressSet>
	for(i=0;i<TypefaceNum;i++)
 8000efe:	2300      	movs	r3, #0
 8000f00:	827b      	strh	r3, [r7, #18]
 8000f02:	e07a      	b.n	8000ffa <lcd_ShowChar+0x182>
	{
		if(sizey==12);
 8000f04:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000f08:	2b0c      	cmp	r3, #12
 8000f0a:	d028      	beq.n	8000f5e <lcd_ShowChar+0xe6>
		else if(sizey==16)temp=ascii_1608[num][i];
 8000f0c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000f10:	2b10      	cmp	r3, #16
 8000f12:	d108      	bne.n	8000f26 <lcd_ShowChar+0xae>
 8000f14:	78fa      	ldrb	r2, [r7, #3]
 8000f16:	8a7b      	ldrh	r3, [r7, #18]
 8000f18:	493c      	ldr	r1, [pc, #240]	; (800100c <lcd_ShowChar+0x194>)
 8000f1a:	0112      	lsls	r2, r2, #4
 8000f1c:	440a      	add	r2, r1
 8000f1e:	4413      	add	r3, r2
 8000f20:	781b      	ldrb	r3, [r3, #0]
 8000f22:	75fb      	strb	r3, [r7, #23]
 8000f24:	e01b      	b.n	8000f5e <lcd_ShowChar+0xe6>
		else if(sizey==24)temp=ascii_2412[num][i];
 8000f26:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000f2a:	2b18      	cmp	r3, #24
 8000f2c:	d10b      	bne.n	8000f46 <lcd_ShowChar+0xce>
 8000f2e:	78fa      	ldrb	r2, [r7, #3]
 8000f30:	8a79      	ldrh	r1, [r7, #18]
 8000f32:	4837      	ldr	r0, [pc, #220]	; (8001010 <lcd_ShowChar+0x198>)
 8000f34:	4613      	mov	r3, r2
 8000f36:	005b      	lsls	r3, r3, #1
 8000f38:	4413      	add	r3, r2
 8000f3a:	011b      	lsls	r3, r3, #4
 8000f3c:	4403      	add	r3, r0
 8000f3e:	440b      	add	r3, r1
 8000f40:	781b      	ldrb	r3, [r3, #0]
 8000f42:	75fb      	strb	r3, [r7, #23]
 8000f44:	e00b      	b.n	8000f5e <lcd_ShowChar+0xe6>
		else if(sizey==32)temp=ascii_3216[num][i];
 8000f46:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000f4a:	2b20      	cmp	r3, #32
 8000f4c:	d15a      	bne.n	8001004 <lcd_ShowChar+0x18c>
 8000f4e:	78fa      	ldrb	r2, [r7, #3]
 8000f50:	8a7b      	ldrh	r3, [r7, #18]
 8000f52:	4930      	ldr	r1, [pc, #192]	; (8001014 <lcd_ShowChar+0x19c>)
 8000f54:	0192      	lsls	r2, r2, #6
 8000f56:	440a      	add	r2, r1
 8000f58:	4413      	add	r3, r2
 8000f5a:	781b      	ldrb	r3, [r3, #0]
 8000f5c:	75fb      	strb	r3, [r7, #23]
		else return;
		for(t=0;t<8;t++)
 8000f5e:	2300      	movs	r3, #0
 8000f60:	75bb      	strb	r3, [r7, #22]
 8000f62:	e044      	b.n	8000fee <lcd_ShowChar+0x176>
		{
			if(!mode)
 8000f64:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d120      	bne.n	8000fae <lcd_ShowChar+0x136>
			{
				if(temp&(0x01<<t))LCD_WR_DATA(fc);
 8000f6c:	7dfa      	ldrb	r2, [r7, #23]
 8000f6e:	7dbb      	ldrb	r3, [r7, #22]
 8000f70:	fa42 f303 	asr.w	r3, r2, r3
 8000f74:	f003 0301 	and.w	r3, r3, #1
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d004      	beq.n	8000f86 <lcd_ShowChar+0x10e>
 8000f7c:	883b      	ldrh	r3, [r7, #0]
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f7ff fe84 	bl	8000c8c <LCD_WR_DATA>
 8000f84:	e003      	b.n	8000f8e <lcd_ShowChar+0x116>
				else LCD_WR_DATA(bc);
 8000f86:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f7ff fe7f 	bl	8000c8c <LCD_WR_DATA>
				m++;
 8000f8e:	7d7b      	ldrb	r3, [r7, #21]
 8000f90:	3301      	adds	r3, #1
 8000f92:	757b      	strb	r3, [r7, #21]
				if(m%sizex==0)
 8000f94:	7d7b      	ldrb	r3, [r7, #21]
 8000f96:	7bfa      	ldrb	r2, [r7, #15]
 8000f98:	fbb3 f1f2 	udiv	r1, r3, r2
 8000f9c:	fb01 f202 	mul.w	r2, r1, r2
 8000fa0:	1a9b      	subs	r3, r3, r2
 8000fa2:	b2db      	uxtb	r3, r3
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d11f      	bne.n	8000fe8 <lcd_ShowChar+0x170>
				{
					m=0;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	757b      	strb	r3, [r7, #21]
					break;
 8000fac:	e022      	b.n	8000ff4 <lcd_ShowChar+0x17c>
				}
			}
			else
			{
				if(temp&(0x01<<t))lcd_DrawPoint(x,y,fc);
 8000fae:	7dfa      	ldrb	r2, [r7, #23]
 8000fb0:	7dbb      	ldrb	r3, [r7, #22]
 8000fb2:	fa42 f303 	asr.w	r3, r2, r3
 8000fb6:	f003 0301 	and.w	r3, r3, #1
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d005      	beq.n	8000fca <lcd_ShowChar+0x152>
 8000fbe:	883a      	ldrh	r2, [r7, #0]
 8000fc0:	88b9      	ldrh	r1, [r7, #4]
 8000fc2:	88fb      	ldrh	r3, [r7, #6]
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f7ff ff3f 	bl	8000e48 <lcd_DrawPoint>
				x++;
 8000fca:	88fb      	ldrh	r3, [r7, #6]
 8000fcc:	3301      	adds	r3, #1
 8000fce:	80fb      	strh	r3, [r7, #6]
				if((x-x0)==sizex)
 8000fd0:	88fa      	ldrh	r2, [r7, #6]
 8000fd2:	8a3b      	ldrh	r3, [r7, #16]
 8000fd4:	1ad2      	subs	r2, r2, r3
 8000fd6:	7bfb      	ldrb	r3, [r7, #15]
 8000fd8:	429a      	cmp	r2, r3
 8000fda:	d105      	bne.n	8000fe8 <lcd_ShowChar+0x170>
				{
					x=x0;
 8000fdc:	8a3b      	ldrh	r3, [r7, #16]
 8000fde:	80fb      	strh	r3, [r7, #6]
					y++;
 8000fe0:	88bb      	ldrh	r3, [r7, #4]
 8000fe2:	3301      	adds	r3, #1
 8000fe4:	80bb      	strh	r3, [r7, #4]
					break;
 8000fe6:	e005      	b.n	8000ff4 <lcd_ShowChar+0x17c>
		for(t=0;t<8;t++)
 8000fe8:	7dbb      	ldrb	r3, [r7, #22]
 8000fea:	3301      	adds	r3, #1
 8000fec:	75bb      	strb	r3, [r7, #22]
 8000fee:	7dbb      	ldrb	r3, [r7, #22]
 8000ff0:	2b07      	cmp	r3, #7
 8000ff2:	d9b7      	bls.n	8000f64 <lcd_ShowChar+0xec>
	for(i=0;i<TypefaceNum;i++)
 8000ff4:	8a7b      	ldrh	r3, [r7, #18]
 8000ff6:	3301      	adds	r3, #1
 8000ff8:	827b      	strh	r3, [r7, #18]
 8000ffa:	8a7a      	ldrh	r2, [r7, #18]
 8000ffc:	89bb      	ldrh	r3, [r7, #12]
 8000ffe:	429a      	cmp	r2, r3
 8001000:	d380      	bcc.n	8000f04 <lcd_ShowChar+0x8c>
 8001002:	e000      	b.n	8001006 <lcd_ShowChar+0x18e>
		else return;
 8001004:	bf00      	nop
				}
			}
		}
	}
}
 8001006:	371c      	adds	r7, #28
 8001008:	46bd      	mov	sp, r7
 800100a:	bd90      	pop	{r4, r7, pc}
 800100c:	08007c24 	.word	0x08007c24
 8001010:	08008214 	.word	0x08008214
 8001014:	080093e4 	.word	0x080093e4

08001018 <mypow>:

uint32_t mypow(uint8_t m,uint8_t n)
{
 8001018:	b480      	push	{r7}
 800101a:	b085      	sub	sp, #20
 800101c:	af00      	add	r7, sp, #0
 800101e:	4603      	mov	r3, r0
 8001020:	460a      	mov	r2, r1
 8001022:	71fb      	strb	r3, [r7, #7]
 8001024:	4613      	mov	r3, r2
 8001026:	71bb      	strb	r3, [r7, #6]
	uint32_t result=1;
 8001028:	2301      	movs	r3, #1
 800102a:	60fb      	str	r3, [r7, #12]
	while(n--)result*=m;
 800102c:	e004      	b.n	8001038 <mypow+0x20>
 800102e:	79fa      	ldrb	r2, [r7, #7]
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	fb02 f303 	mul.w	r3, r2, r3
 8001036:	60fb      	str	r3, [r7, #12]
 8001038:	79bb      	ldrb	r3, [r7, #6]
 800103a:	1e5a      	subs	r2, r3, #1
 800103c:	71ba      	strb	r2, [r7, #6]
 800103e:	2b00      	cmp	r3, #0
 8001040:	d1f5      	bne.n	800102e <mypow+0x16>
	return result;
 8001042:	68fb      	ldr	r3, [r7, #12]
}
 8001044:	4618      	mov	r0, r3
 8001046:	3714      	adds	r7, #20
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr

08001050 <lcd_ShowIntNum>:

void lcd_ShowIntNum(uint16_t x,uint16_t y,uint16_t num,uint8_t len,uint16_t fc,uint16_t bc,uint8_t sizey) //len: ddooj daif cuar so
{
 8001050:	b590      	push	{r4, r7, lr}
 8001052:	b089      	sub	sp, #36	; 0x24
 8001054:	af04      	add	r7, sp, #16
 8001056:	4604      	mov	r4, r0
 8001058:	4608      	mov	r0, r1
 800105a:	4611      	mov	r1, r2
 800105c:	461a      	mov	r2, r3
 800105e:	4623      	mov	r3, r4
 8001060:	80fb      	strh	r3, [r7, #6]
 8001062:	4603      	mov	r3, r0
 8001064:	80bb      	strh	r3, [r7, #4]
 8001066:	460b      	mov	r3, r1
 8001068:	807b      	strh	r3, [r7, #2]
 800106a:	4613      	mov	r3, r2
 800106c:	707b      	strb	r3, [r7, #1]
	uint8_t t,temp;
	uint8_t enshow=0;
 800106e:	2300      	movs	r3, #0
 8001070:	73bb      	strb	r3, [r7, #14]
	uint8_t sizex=sizey/2;
 8001072:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001076:	085b      	lsrs	r3, r3, #1
 8001078:	737b      	strb	r3, [r7, #13]
	for(t=0;t<len;t++)
 800107a:	2300      	movs	r3, #0
 800107c:	73fb      	strb	r3, [r7, #15]
 800107e:	e059      	b.n	8001134 <lcd_ShowIntNum+0xe4>
	{
		temp=(num/mypow(10,len-t-1))%10;
 8001080:	887c      	ldrh	r4, [r7, #2]
 8001082:	787a      	ldrb	r2, [r7, #1]
 8001084:	7bfb      	ldrb	r3, [r7, #15]
 8001086:	1ad3      	subs	r3, r2, r3
 8001088:	b2db      	uxtb	r3, r3
 800108a:	3b01      	subs	r3, #1
 800108c:	b2db      	uxtb	r3, r3
 800108e:	4619      	mov	r1, r3
 8001090:	200a      	movs	r0, #10
 8001092:	f7ff ffc1 	bl	8001018 <mypow>
 8001096:	4603      	mov	r3, r0
 8001098:	fbb4 f1f3 	udiv	r1, r4, r3
 800109c:	4b2a      	ldr	r3, [pc, #168]	; (8001148 <lcd_ShowIntNum+0xf8>)
 800109e:	fba3 2301 	umull	r2, r3, r3, r1
 80010a2:	08da      	lsrs	r2, r3, #3
 80010a4:	4613      	mov	r3, r2
 80010a6:	009b      	lsls	r3, r3, #2
 80010a8:	4413      	add	r3, r2
 80010aa:	005b      	lsls	r3, r3, #1
 80010ac:	1aca      	subs	r2, r1, r3
 80010ae:	4613      	mov	r3, r2
 80010b0:	733b      	strb	r3, [r7, #12]
		if(enshow==0&&t<(len-1))
 80010b2:	7bbb      	ldrb	r3, [r7, #14]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d121      	bne.n	80010fc <lcd_ShowIntNum+0xac>
 80010b8:	7bfa      	ldrb	r2, [r7, #15]
 80010ba:	787b      	ldrb	r3, [r7, #1]
 80010bc:	3b01      	subs	r3, #1
 80010be:	429a      	cmp	r2, r3
 80010c0:	da1c      	bge.n	80010fc <lcd_ShowIntNum+0xac>
		{
			if(temp==0)
 80010c2:	7b3b      	ldrb	r3, [r7, #12]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d117      	bne.n	80010f8 <lcd_ShowIntNum+0xa8>
			{
				lcd_ShowChar(x+t*sizex,y,' ',fc,bc,sizey,0);
 80010c8:	7bfb      	ldrb	r3, [r7, #15]
 80010ca:	b29a      	uxth	r2, r3
 80010cc:	7b7b      	ldrb	r3, [r7, #13]
 80010ce:	b29b      	uxth	r3, r3
 80010d0:	fb12 f303 	smulbb	r3, r2, r3
 80010d4:	b29a      	uxth	r2, r3
 80010d6:	88fb      	ldrh	r3, [r7, #6]
 80010d8:	4413      	add	r3, r2
 80010da:	b298      	uxth	r0, r3
 80010dc:	8c3a      	ldrh	r2, [r7, #32]
 80010de:	88b9      	ldrh	r1, [r7, #4]
 80010e0:	2300      	movs	r3, #0
 80010e2:	9302      	str	r3, [sp, #8]
 80010e4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80010e8:	9301      	str	r3, [sp, #4]
 80010ea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80010ec:	9300      	str	r3, [sp, #0]
 80010ee:	4613      	mov	r3, r2
 80010f0:	2220      	movs	r2, #32
 80010f2:	f7ff fec1 	bl	8000e78 <lcd_ShowChar>
				continue;
 80010f6:	e01a      	b.n	800112e <lcd_ShowIntNum+0xde>
			}else enshow=1;
 80010f8:	2301      	movs	r3, #1
 80010fa:	73bb      	strb	r3, [r7, #14]

		}
	 	lcd_ShowChar(x+t*sizex,y,temp+48,fc,bc,sizey,0);
 80010fc:	7bfb      	ldrb	r3, [r7, #15]
 80010fe:	b29a      	uxth	r2, r3
 8001100:	7b7b      	ldrb	r3, [r7, #13]
 8001102:	b29b      	uxth	r3, r3
 8001104:	fb12 f303 	smulbb	r3, r2, r3
 8001108:	b29a      	uxth	r2, r3
 800110a:	88fb      	ldrh	r3, [r7, #6]
 800110c:	4413      	add	r3, r2
 800110e:	b298      	uxth	r0, r3
 8001110:	7b3b      	ldrb	r3, [r7, #12]
 8001112:	3330      	adds	r3, #48	; 0x30
 8001114:	b2da      	uxtb	r2, r3
 8001116:	8c3c      	ldrh	r4, [r7, #32]
 8001118:	88b9      	ldrh	r1, [r7, #4]
 800111a:	2300      	movs	r3, #0
 800111c:	9302      	str	r3, [sp, #8]
 800111e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001122:	9301      	str	r3, [sp, #4]
 8001124:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001126:	9300      	str	r3, [sp, #0]
 8001128:	4623      	mov	r3, r4
 800112a:	f7ff fea5 	bl	8000e78 <lcd_ShowChar>
	for(t=0;t<len;t++)
 800112e:	7bfb      	ldrb	r3, [r7, #15]
 8001130:	3301      	adds	r3, #1
 8001132:	73fb      	strb	r3, [r7, #15]
 8001134:	7bfa      	ldrb	r2, [r7, #15]
 8001136:	787b      	ldrb	r3, [r7, #1]
 8001138:	429a      	cmp	r2, r3
 800113a:	d3a1      	bcc.n	8001080 <lcd_ShowIntNum+0x30>
	}
}
 800113c:	bf00      	nop
 800113e:	bf00      	nop
 8001140:	3714      	adds	r7, #20
 8001142:	46bd      	mov	sp, r7
 8001144:	bd90      	pop	{r4, r7, pc}
 8001146:	bf00      	nop
 8001148:	cccccccd 	.word	0xcccccccd

0800114c <lcd_SetDir>:
	}
}


void lcd_SetDir(uint8_t dir) //chinh huong man hinh
{
 800114c:	b480      	push	{r7}
 800114e:	b083      	sub	sp, #12
 8001150:	af00      	add	r7, sp, #0
 8001152:	4603      	mov	r3, r0
 8001154:	71fb      	strb	r3, [r7, #7]
	if((dir>>4)%4)
 8001156:	79fb      	ldrb	r3, [r7, #7]
 8001158:	091b      	lsrs	r3, r3, #4
 800115a:	b2db      	uxtb	r3, r3
 800115c:	f003 0303 	and.w	r3, r3, #3
 8001160:	b2db      	uxtb	r3, r3
 8001162:	2b00      	cmp	r3, #0
 8001164:	d007      	beq.n	8001176 <lcd_SetDir+0x2a>
	{
		lcddev.width=320;
 8001166:	4b0a      	ldr	r3, [pc, #40]	; (8001190 <lcd_SetDir+0x44>)
 8001168:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800116c:	801a      	strh	r2, [r3, #0]
		lcddev.height=240;
 800116e:	4b08      	ldr	r3, [pc, #32]	; (8001190 <lcd_SetDir+0x44>)
 8001170:	22f0      	movs	r2, #240	; 0xf0
 8001172:	805a      	strh	r2, [r3, #2]
	}else
	{
		lcddev.width=240;
		lcddev.height=320;
	}
}
 8001174:	e006      	b.n	8001184 <lcd_SetDir+0x38>
		lcddev.width=240;
 8001176:	4b06      	ldr	r3, [pc, #24]	; (8001190 <lcd_SetDir+0x44>)
 8001178:	22f0      	movs	r2, #240	; 0xf0
 800117a:	801a      	strh	r2, [r3, #0]
		lcddev.height=320;
 800117c:	4b04      	ldr	r3, [pc, #16]	; (8001190 <lcd_SetDir+0x44>)
 800117e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001182:	805a      	strh	r2, [r3, #2]
}
 8001184:	bf00      	nop
 8001186:	370c      	adds	r7, #12
 8001188:	46bd      	mov	sp, r7
 800118a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118e:	4770      	bx	lr
 8001190:	2000015c 	.word	0x2000015c

08001194 <lcd_init>:


void lcd_init(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8001198:	2200      	movs	r2, #0
 800119a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800119e:	48aa      	ldr	r0, [pc, #680]	; (8001448 <lcd_init+0x2b4>)
 80011a0:	f001 fee8 	bl	8002f74 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 80011a4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80011a8:	f001 fb80 	bl	80028ac <HAL_Delay>
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_SET);
 80011ac:	2201      	movs	r2, #1
 80011ae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011b2:	48a5      	ldr	r0, [pc, #660]	; (8001448 <lcd_init+0x2b4>)
 80011b4:	f001 fede 	bl	8002f74 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 80011b8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80011bc:	f001 fb76 	bl	80028ac <HAL_Delay>
	lcd_SetDir(L2R_U2D);
 80011c0:	2000      	movs	r0, #0
 80011c2:	f7ff ffc3 	bl	800114c <lcd_SetDir>
	LCD_WR_REG(0XD3);
 80011c6:	20d3      	movs	r0, #211	; 0xd3
 80011c8:	f7ff fd50 	bl	8000c6c <LCD_WR_REG>
	lcddev.id=LCD_RD_DATA();	//dummy read
 80011cc:	f7ff fd6e 	bl	8000cac <LCD_RD_DATA>
 80011d0:	4603      	mov	r3, r0
 80011d2:	461a      	mov	r2, r3
 80011d4:	4b9d      	ldr	r3, [pc, #628]	; (800144c <lcd_init+0x2b8>)
 80011d6:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 80011d8:	f7ff fd68 	bl	8000cac <LCD_RD_DATA>
 80011dc:	4603      	mov	r3, r0
 80011de:	461a      	mov	r2, r3
 80011e0:	4b9a      	ldr	r3, [pc, #616]	; (800144c <lcd_init+0x2b8>)
 80011e2:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 80011e4:	f7ff fd62 	bl	8000cac <LCD_RD_DATA>
 80011e8:	4603      	mov	r3, r0
 80011ea:	461a      	mov	r2, r3
 80011ec:	4b97      	ldr	r3, [pc, #604]	; (800144c <lcd_init+0x2b8>)
 80011ee:	809a      	strh	r2, [r3, #4]
	lcddev.id<<=8;
 80011f0:	4b96      	ldr	r3, [pc, #600]	; (800144c <lcd_init+0x2b8>)
 80011f2:	889b      	ldrh	r3, [r3, #4]
 80011f4:	021b      	lsls	r3, r3, #8
 80011f6:	b29a      	uxth	r2, r3
 80011f8:	4b94      	ldr	r3, [pc, #592]	; (800144c <lcd_init+0x2b8>)
 80011fa:	809a      	strh	r2, [r3, #4]
	lcddev.id|=LCD_RD_DATA();
 80011fc:	f7ff fd56 	bl	8000cac <LCD_RD_DATA>
 8001200:	4603      	mov	r3, r0
 8001202:	461a      	mov	r2, r3
 8001204:	4b91      	ldr	r3, [pc, #580]	; (800144c <lcd_init+0x2b8>)
 8001206:	889b      	ldrh	r3, [r3, #4]
 8001208:	4313      	orrs	r3, r2
 800120a:	b29a      	uxth	r2, r3
 800120c:	4b8f      	ldr	r3, [pc, #572]	; (800144c <lcd_init+0x2b8>)
 800120e:	809a      	strh	r2, [r3, #4]

	LCD_WR_REG(0xCF);
 8001210:	20cf      	movs	r0, #207	; 0xcf
 8001212:	f7ff fd2b 	bl	8000c6c <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001216:	2000      	movs	r0, #0
 8001218:	f7ff fd38 	bl	8000c8c <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 800121c:	20c1      	movs	r0, #193	; 0xc1
 800121e:	f7ff fd35 	bl	8000c8c <LCD_WR_DATA>
	LCD_WR_DATA(0X30);
 8001222:	2030      	movs	r0, #48	; 0x30
 8001224:	f7ff fd32 	bl	8000c8c <LCD_WR_DATA>
	LCD_WR_REG(0xED);
 8001228:	20ed      	movs	r0, #237	; 0xed
 800122a:	f7ff fd1f 	bl	8000c6c <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 800122e:	2064      	movs	r0, #100	; 0x64
 8001230:	f7ff fd2c 	bl	8000c8c <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 8001234:	2003      	movs	r0, #3
 8001236:	f7ff fd29 	bl	8000c8c <LCD_WR_DATA>
	LCD_WR_DATA(0X12);
 800123a:	2012      	movs	r0, #18
 800123c:	f7ff fd26 	bl	8000c8c <LCD_WR_DATA>
	LCD_WR_DATA(0X81);
 8001240:	2081      	movs	r0, #129	; 0x81
 8001242:	f7ff fd23 	bl	8000c8c <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 8001246:	20e8      	movs	r0, #232	; 0xe8
 8001248:	f7ff fd10 	bl	8000c6c <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 800124c:	2085      	movs	r0, #133	; 0x85
 800124e:	f7ff fd1d 	bl	8000c8c <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8001252:	2010      	movs	r0, #16
 8001254:	f7ff fd1a 	bl	8000c8c <LCD_WR_DATA>
	LCD_WR_DATA(0x7A);
 8001258:	207a      	movs	r0, #122	; 0x7a
 800125a:	f7ff fd17 	bl	8000c8c <LCD_WR_DATA>
	LCD_WR_REG(0xCB);
 800125e:	20cb      	movs	r0, #203	; 0xcb
 8001260:	f7ff fd04 	bl	8000c6c <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 8001264:	2039      	movs	r0, #57	; 0x39
 8001266:	f7ff fd11 	bl	8000c8c <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 800126a:	202c      	movs	r0, #44	; 0x2c
 800126c:	f7ff fd0e 	bl	8000c8c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001270:	2000      	movs	r0, #0
 8001272:	f7ff fd0b 	bl	8000c8c <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 8001276:	2034      	movs	r0, #52	; 0x34
 8001278:	f7ff fd08 	bl	8000c8c <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 800127c:	2002      	movs	r0, #2
 800127e:	f7ff fd05 	bl	8000c8c <LCD_WR_DATA>
	LCD_WR_REG(0xF7);
 8001282:	20f7      	movs	r0, #247	; 0xf7
 8001284:	f7ff fcf2 	bl	8000c6c <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 8001288:	2020      	movs	r0, #32
 800128a:	f7ff fcff 	bl	8000c8c <LCD_WR_DATA>
	LCD_WR_REG(0xEA);
 800128e:	20ea      	movs	r0, #234	; 0xea
 8001290:	f7ff fcec 	bl	8000c6c <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001294:	2000      	movs	r0, #0
 8001296:	f7ff fcf9 	bl	8000c8c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800129a:	2000      	movs	r0, #0
 800129c:	f7ff fcf6 	bl	8000c8c <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control
 80012a0:	20c0      	movs	r0, #192	; 0xc0
 80012a2:	f7ff fce3 	bl	8000c6c <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0]
 80012a6:	201b      	movs	r0, #27
 80012a8:	f7ff fcf0 	bl	8000c8c <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control
 80012ac:	20c1      	movs	r0, #193	; 0xc1
 80012ae:	f7ff fcdd 	bl	8000c6c <LCD_WR_REG>
	LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 80012b2:	2001      	movs	r0, #1
 80012b4:	f7ff fcea 	bl	8000c8c <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control
 80012b8:	20c5      	movs	r0, #197	; 0xc5
 80012ba:	f7ff fcd7 	bl	8000c6c <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 80012be:	2030      	movs	r0, #48	; 0x30
 80012c0:	f7ff fce4 	bl	8000c8c <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 80012c4:	2030      	movs	r0, #48	; 0x30
 80012c6:	f7ff fce1 	bl	8000c8c <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2
 80012ca:	20c7      	movs	r0, #199	; 0xc7
 80012cc:	f7ff fcce 	bl	8000c6c <LCD_WR_REG>
	LCD_WR_DATA(0XB7);
 80012d0:	20b7      	movs	r0, #183	; 0xb7
 80012d2:	f7ff fcdb 	bl	8000c8c <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control
 80012d6:	2036      	movs	r0, #54	; 0x36
 80012d8:	f7ff fcc8 	bl	8000c6c <LCD_WR_REG>
	LCD_WR_DATA(0x08|L2R_U2D);
 80012dc:	2008      	movs	r0, #8
 80012de:	f7ff fcd5 	bl	8000c8c <LCD_WR_DATA>

//	LCD_WR_DATA(0x08|DFT_SCAN_DIR);
	LCD_WR_REG(0x3A);
 80012e2:	203a      	movs	r0, #58	; 0x3a
 80012e4:	f7ff fcc2 	bl	8000c6c <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 80012e8:	2055      	movs	r0, #85	; 0x55
 80012ea:	f7ff fccf 	bl	8000c8c <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 80012ee:	20b1      	movs	r0, #177	; 0xb1
 80012f0:	f7ff fcbc 	bl	8000c6c <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80012f4:	2000      	movs	r0, #0
 80012f6:	f7ff fcc9 	bl	8000c8c <LCD_WR_DATA>
	LCD_WR_DATA(0x1A);
 80012fa:	201a      	movs	r0, #26
 80012fc:	f7ff fcc6 	bl	8000c8c <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control
 8001300:	20b6      	movs	r0, #182	; 0xb6
 8001302:	f7ff fcb3 	bl	8000c6c <LCD_WR_REG>
	LCD_WR_DATA(0x0A);
 8001306:	200a      	movs	r0, #10
 8001308:	f7ff fcc0 	bl	8000c8c <LCD_WR_DATA>
	LCD_WR_DATA(0xA2);
 800130c:	20a2      	movs	r0, #162	; 0xa2
 800130e:	f7ff fcbd 	bl	8000c8c <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 8001312:	20f2      	movs	r0, #242	; 0xf2
 8001314:	f7ff fcaa 	bl	8000c6c <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001318:	2000      	movs	r0, #0
 800131a:	f7ff fcb7 	bl	8000c8c <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected
 800131e:	2026      	movs	r0, #38	; 0x26
 8001320:	f7ff fca4 	bl	8000c6c <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 8001324:	2001      	movs	r0, #1
 8001326:	f7ff fcb1 	bl	8000c8c <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma
 800132a:	20e0      	movs	r0, #224	; 0xe0
 800132c:	f7ff fc9e 	bl	8000c6c <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 8001330:	200f      	movs	r0, #15
 8001332:	f7ff fcab 	bl	8000c8c <LCD_WR_DATA>
	LCD_WR_DATA(0x2A);
 8001336:	202a      	movs	r0, #42	; 0x2a
 8001338:	f7ff fca8 	bl	8000c8c <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 800133c:	2028      	movs	r0, #40	; 0x28
 800133e:	f7ff fca5 	bl	8000c8c <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8001342:	2008      	movs	r0, #8
 8001344:	f7ff fca2 	bl	8000c8c <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 8001348:	200e      	movs	r0, #14
 800134a:	f7ff fc9f 	bl	8000c8c <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 800134e:	2008      	movs	r0, #8
 8001350:	f7ff fc9c 	bl	8000c8c <LCD_WR_DATA>
	LCD_WR_DATA(0x54);
 8001354:	2054      	movs	r0, #84	; 0x54
 8001356:	f7ff fc99 	bl	8000c8c <LCD_WR_DATA>
	LCD_WR_DATA(0XA9);
 800135a:	20a9      	movs	r0, #169	; 0xa9
 800135c:	f7ff fc96 	bl	8000c8c <LCD_WR_DATA>
	LCD_WR_DATA(0x43);
 8001360:	2043      	movs	r0, #67	; 0x43
 8001362:	f7ff fc93 	bl	8000c8c <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 8001366:	200a      	movs	r0, #10
 8001368:	f7ff fc90 	bl	8000c8c <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 800136c:	200f      	movs	r0, #15
 800136e:	f7ff fc8d 	bl	8000c8c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001372:	2000      	movs	r0, #0
 8001374:	f7ff fc8a 	bl	8000c8c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001378:	2000      	movs	r0, #0
 800137a:	f7ff fc87 	bl	8000c8c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800137e:	2000      	movs	r0, #0
 8001380:	f7ff fc84 	bl	8000c8c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001384:	2000      	movs	r0, #0
 8001386:	f7ff fc81 	bl	8000c8c <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma
 800138a:	20e1      	movs	r0, #225	; 0xe1
 800138c:	f7ff fc6e 	bl	8000c6c <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001390:	2000      	movs	r0, #0
 8001392:	f7ff fc7b 	bl	8000c8c <LCD_WR_DATA>
	LCD_WR_DATA(0x15);
 8001396:	2015      	movs	r0, #21
 8001398:	f7ff fc78 	bl	8000c8c <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 800139c:	2017      	movs	r0, #23
 800139e:	f7ff fc75 	bl	8000c8c <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 80013a2:	2007      	movs	r0, #7
 80013a4:	f7ff fc72 	bl	8000c8c <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 80013a8:	2011      	movs	r0, #17
 80013aa:	f7ff fc6f 	bl	8000c8c <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 80013ae:	2006      	movs	r0, #6
 80013b0:	f7ff fc6c 	bl	8000c8c <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 80013b4:	202b      	movs	r0, #43	; 0x2b
 80013b6:	f7ff fc69 	bl	8000c8c <LCD_WR_DATA>
	LCD_WR_DATA(0x56);
 80013ba:	2056      	movs	r0, #86	; 0x56
 80013bc:	f7ff fc66 	bl	8000c8c <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 80013c0:	203c      	movs	r0, #60	; 0x3c
 80013c2:	f7ff fc63 	bl	8000c8c <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 80013c6:	2005      	movs	r0, #5
 80013c8:	f7ff fc60 	bl	8000c8c <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 80013cc:	2010      	movs	r0, #16
 80013ce:	f7ff fc5d 	bl	8000c8c <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 80013d2:	200f      	movs	r0, #15
 80013d4:	f7ff fc5a 	bl	8000c8c <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 80013d8:	203f      	movs	r0, #63	; 0x3f
 80013da:	f7ff fc57 	bl	8000c8c <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 80013de:	203f      	movs	r0, #63	; 0x3f
 80013e0:	f7ff fc54 	bl	8000c8c <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 80013e4:	200f      	movs	r0, #15
 80013e6:	f7ff fc51 	bl	8000c8c <LCD_WR_DATA>
	LCD_WR_REG(0x2B);
 80013ea:	202b      	movs	r0, #43	; 0x2b
 80013ec:	f7ff fc3e 	bl	8000c6c <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80013f0:	2000      	movs	r0, #0
 80013f2:	f7ff fc4b 	bl	8000c8c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80013f6:	2000      	movs	r0, #0
 80013f8:	f7ff fc48 	bl	8000c8c <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 80013fc:	2001      	movs	r0, #1
 80013fe:	f7ff fc45 	bl	8000c8c <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 8001402:	203f      	movs	r0, #63	; 0x3f
 8001404:	f7ff fc42 	bl	8000c8c <LCD_WR_DATA>
	LCD_WR_REG(0x2A);
 8001408:	202a      	movs	r0, #42	; 0x2a
 800140a:	f7ff fc2f 	bl	8000c6c <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 800140e:	2000      	movs	r0, #0
 8001410:	f7ff fc3c 	bl	8000c8c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001414:	2000      	movs	r0, #0
 8001416:	f7ff fc39 	bl	8000c8c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800141a:	2000      	movs	r0, #0
 800141c:	f7ff fc36 	bl	8000c8c <LCD_WR_DATA>
	LCD_WR_DATA(0xef);
 8001420:	20ef      	movs	r0, #239	; 0xef
 8001422:	f7ff fc33 	bl	8000c8c <LCD_WR_DATA>
	LCD_WR_REG(0x11); //Exit Sleep
 8001426:	2011      	movs	r0, #17
 8001428:	f7ff fc20 	bl	8000c6c <LCD_WR_REG>
	HAL_Delay(120);
 800142c:	2078      	movs	r0, #120	; 0x78
 800142e:	f001 fa3d 	bl	80028ac <HAL_Delay>
	LCD_WR_REG(0x29); //display on
 8001432:	2029      	movs	r0, #41	; 0x29
 8001434:	f7ff fc1a 	bl	8000c6c <LCD_WR_REG>
	HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, 1);
 8001438:	2201      	movs	r2, #1
 800143a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800143e:	4804      	ldr	r0, [pc, #16]	; (8001450 <lcd_init+0x2bc>)
 8001440:	f001 fd98 	bl	8002f74 <HAL_GPIO_WritePin>
}
 8001444:	bf00      	nop
 8001446:	bd80      	pop	{r7, pc}
 8001448:	40020800 	.word	0x40020800
 800144c:	2000015c 	.word	0x2000015c
 8001450:	40020000 	.word	0x40020000

08001454 <lcd_ShowStr>:
		}
	}
}

void lcd_ShowStr(uint16_t x, uint16_t y,uint8_t *str,uint16_t fc, uint16_t bc,uint8_t sizey,uint8_t mode)
{
 8001454:	b590      	push	{r4, r7, lr}
 8001456:	b08b      	sub	sp, #44	; 0x2c
 8001458:	af04      	add	r7, sp, #16
 800145a:	60ba      	str	r2, [r7, #8]
 800145c:	461a      	mov	r2, r3
 800145e:	4603      	mov	r3, r0
 8001460:	81fb      	strh	r3, [r7, #14]
 8001462:	460b      	mov	r3, r1
 8001464:	81bb      	strh	r3, [r7, #12]
 8001466:	4613      	mov	r3, r2
 8001468:	80fb      	strh	r3, [r7, #6]
	uint16_t x0=x;
 800146a:	89fb      	ldrh	r3, [r7, #14]
 800146c:	82bb      	strh	r3, [r7, #20]
  uint8_t bHz=0;
 800146e:	2300      	movs	r3, #0
 8001470:	75fb      	strb	r3, [r7, #23]
	while(*str!=0)
 8001472:	e048      	b.n	8001506 <lcd_ShowStr+0xb2>
	{
		if(!bHz)
 8001474:	7dfb      	ldrb	r3, [r7, #23]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d145      	bne.n	8001506 <lcd_ShowStr+0xb2>
		{
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 800147a:	89fa      	ldrh	r2, [r7, #14]
 800147c:	4b26      	ldr	r3, [pc, #152]	; (8001518 <lcd_ShowStr+0xc4>)
 800147e:	881b      	ldrh	r3, [r3, #0]
 8001480:	4619      	mov	r1, r3
 8001482:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001486:	085b      	lsrs	r3, r3, #1
 8001488:	b2db      	uxtb	r3, r3
 800148a:	1acb      	subs	r3, r1, r3
 800148c:	429a      	cmp	r2, r3
 800148e:	dc3f      	bgt.n	8001510 <lcd_ShowStr+0xbc>
 8001490:	89ba      	ldrh	r2, [r7, #12]
 8001492:	4b21      	ldr	r3, [pc, #132]	; (8001518 <lcd_ShowStr+0xc4>)
 8001494:	885b      	ldrh	r3, [r3, #2]
 8001496:	4619      	mov	r1, r3
 8001498:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800149c:	1acb      	subs	r3, r1, r3
 800149e:	429a      	cmp	r2, r3
 80014a0:	dc36      	bgt.n	8001510 <lcd_ShowStr+0xbc>
			if(*str>0x80)bHz=1;
 80014a2:	68bb      	ldr	r3, [r7, #8]
 80014a4:	781b      	ldrb	r3, [r3, #0]
 80014a6:	2b80      	cmp	r3, #128	; 0x80
 80014a8:	d902      	bls.n	80014b0 <lcd_ShowStr+0x5c>
 80014aa:	2301      	movs	r3, #1
 80014ac:	75fb      	strb	r3, [r7, #23]
 80014ae:	e02a      	b.n	8001506 <lcd_ShowStr+0xb2>
			else
			{
				if(*str==0x0D)
 80014b0:	68bb      	ldr	r3, [r7, #8]
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	2b0d      	cmp	r3, #13
 80014b6:	d10b      	bne.n	80014d0 <lcd_ShowStr+0x7c>
				{
					y+=sizey;
 80014b8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80014bc:	b29a      	uxth	r2, r3
 80014be:	89bb      	ldrh	r3, [r7, #12]
 80014c0:	4413      	add	r3, r2
 80014c2:	81bb      	strh	r3, [r7, #12]
					x=x0;
 80014c4:	8abb      	ldrh	r3, [r7, #20]
 80014c6:	81fb      	strh	r3, [r7, #14]
					str++;
 80014c8:	68bb      	ldr	r3, [r7, #8]
 80014ca:	3301      	adds	r3, #1
 80014cc:	60bb      	str	r3, [r7, #8]
 80014ce:	e017      	b.n	8001500 <lcd_ShowStr+0xac>
				}else
				{
					lcd_ShowChar(x,y,*str,fc,bc,sizey,mode);
 80014d0:	68bb      	ldr	r3, [r7, #8]
 80014d2:	781a      	ldrb	r2, [r3, #0]
 80014d4:	88fc      	ldrh	r4, [r7, #6]
 80014d6:	89b9      	ldrh	r1, [r7, #12]
 80014d8:	89f8      	ldrh	r0, [r7, #14]
 80014da:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80014de:	9302      	str	r3, [sp, #8]
 80014e0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80014e4:	9301      	str	r3, [sp, #4]
 80014e6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80014e8:	9300      	str	r3, [sp, #0]
 80014ea:	4623      	mov	r3, r4
 80014ec:	f7ff fcc4 	bl	8000e78 <lcd_ShowChar>
					x+=sizey/2;
 80014f0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80014f4:	085b      	lsrs	r3, r3, #1
 80014f6:	b2db      	uxtb	r3, r3
 80014f8:	b29a      	uxth	r2, r3
 80014fa:	89fb      	ldrh	r3, [r7, #14]
 80014fc:	4413      	add	r3, r2
 80014fe:	81fb      	strh	r3, [r7, #14]
				}
			  str++;
 8001500:	68bb      	ldr	r3, [r7, #8]
 8001502:	3301      	adds	r3, #1
 8001504:	60bb      	str	r3, [r7, #8]
	while(*str!=0)
 8001506:	68bb      	ldr	r3, [r7, #8]
 8001508:	781b      	ldrb	r3, [r3, #0]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d1b2      	bne.n	8001474 <lcd_ShowStr+0x20>
 800150e:	e000      	b.n	8001512 <lcd_ShowStr+0xbe>
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 8001510:	bf00      	nop
			}
		}
	}
}
 8001512:	371c      	adds	r7, #28
 8001514:	46bd      	mov	sp, r7
 8001516:	bd90      	pop	{r4, r7, pc}
 8001518:	2000015c 	.word	0x2000015c

0800151c <led7_init>:
uint8_t arrayOfNum[10] = {0x03, 0x9f, 0x25, 0x0d, 0x99, 0x49, 0x41, 0x1f, 0x01, 0x09};// 9 numbers
uint16_t spi_buffer = 0xffff;

int led7_index = 0;

void led7_init(){
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 8001520:	2201      	movs	r2, #1
 8001522:	2140      	movs	r1, #64	; 0x40
 8001524:	4802      	ldr	r0, [pc, #8]	; (8001530 <led7_init+0x14>)
 8001526:	f001 fd25 	bl	8002f74 <HAL_GPIO_WritePin>
}
 800152a:	bf00      	nop
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	40021800 	.word	0x40021800

08001534 <led7_Scan>:

void led7_Scan(){
 8001534:	b580      	push	{r7, lr}
 8001536:	af00      	add	r7, sp, #0
	spi_buffer &= 0x00ff;
 8001538:	4b3f      	ldr	r3, [pc, #252]	; (8001638 <led7_Scan+0x104>)
 800153a:	881b      	ldrh	r3, [r3, #0]
 800153c:	b2db      	uxtb	r3, r3
 800153e:	b29a      	uxth	r2, r3
 8001540:	4b3d      	ldr	r3, [pc, #244]	; (8001638 <led7_Scan+0x104>)
 8001542:	801a      	strh	r2, [r3, #0]
	spi_buffer |= led7seg[led7_index] << 8;
 8001544:	4b3d      	ldr	r3, [pc, #244]	; (800163c <led7_Scan+0x108>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a3d      	ldr	r2, [pc, #244]	; (8001640 <led7_Scan+0x10c>)
 800154a:	5cd3      	ldrb	r3, [r2, r3]
 800154c:	021b      	lsls	r3, r3, #8
 800154e:	b21a      	sxth	r2, r3
 8001550:	4b39      	ldr	r3, [pc, #228]	; (8001638 <led7_Scan+0x104>)
 8001552:	881b      	ldrh	r3, [r3, #0]
 8001554:	b21b      	sxth	r3, r3
 8001556:	4313      	orrs	r3, r2
 8001558:	b21b      	sxth	r3, r3
 800155a:	b29a      	uxth	r2, r3
 800155c:	4b36      	ldr	r3, [pc, #216]	; (8001638 <led7_Scan+0x104>)
 800155e:	801a      	strh	r2, [r3, #0]
	switch(led7_index){
 8001560:	4b36      	ldr	r3, [pc, #216]	; (800163c <led7_Scan+0x108>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	2b03      	cmp	r3, #3
 8001566:	d847      	bhi.n	80015f8 <led7_Scan+0xc4>
 8001568:	a201      	add	r2, pc, #4	; (adr r2, 8001570 <led7_Scan+0x3c>)
 800156a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800156e:	bf00      	nop
 8001570:	08001581 	.word	0x08001581
 8001574:	0800159f 	.word	0x0800159f
 8001578:	080015bd 	.word	0x080015bd
 800157c:	080015db 	.word	0x080015db
	case 0:
		spi_buffer |= 0x00b0;
 8001580:	4b2d      	ldr	r3, [pc, #180]	; (8001638 <led7_Scan+0x104>)
 8001582:	881b      	ldrh	r3, [r3, #0]
 8001584:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8001588:	b29a      	uxth	r2, r3
 800158a:	4b2b      	ldr	r3, [pc, #172]	; (8001638 <led7_Scan+0x104>)
 800158c:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffbf;//1011
 800158e:	4b2a      	ldr	r3, [pc, #168]	; (8001638 <led7_Scan+0x104>)
 8001590:	881b      	ldrh	r3, [r3, #0]
 8001592:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001596:	b29a      	uxth	r2, r3
 8001598:	4b27      	ldr	r3, [pc, #156]	; (8001638 <led7_Scan+0x104>)
 800159a:	801a      	strh	r2, [r3, #0]
		break;
 800159c:	e02d      	b.n	80015fa <led7_Scan+0xc6>
	case 1:
		spi_buffer |= 0x00d0;
 800159e:	4b26      	ldr	r3, [pc, #152]	; (8001638 <led7_Scan+0x104>)
 80015a0:	881b      	ldrh	r3, [r3, #0]
 80015a2:	f043 03d0 	orr.w	r3, r3, #208	; 0xd0
 80015a6:	b29a      	uxth	r2, r3
 80015a8:	4b23      	ldr	r3, [pc, #140]	; (8001638 <led7_Scan+0x104>)
 80015aa:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffdf;//1101
 80015ac:	4b22      	ldr	r3, [pc, #136]	; (8001638 <led7_Scan+0x104>)
 80015ae:	881b      	ldrh	r3, [r3, #0]
 80015b0:	f023 0320 	bic.w	r3, r3, #32
 80015b4:	b29a      	uxth	r2, r3
 80015b6:	4b20      	ldr	r3, [pc, #128]	; (8001638 <led7_Scan+0x104>)
 80015b8:	801a      	strh	r2, [r3, #0]
		break;
 80015ba:	e01e      	b.n	80015fa <led7_Scan+0xc6>
	case 2:
		spi_buffer |= 0x00e0;
 80015bc:	4b1e      	ldr	r3, [pc, #120]	; (8001638 <led7_Scan+0x104>)
 80015be:	881b      	ldrh	r3, [r3, #0]
 80015c0:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 80015c4:	b29a      	uxth	r2, r3
 80015c6:	4b1c      	ldr	r3, [pc, #112]	; (8001638 <led7_Scan+0x104>)
 80015c8:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffef;//1110
 80015ca:	4b1b      	ldr	r3, [pc, #108]	; (8001638 <led7_Scan+0x104>)
 80015cc:	881b      	ldrh	r3, [r3, #0]
 80015ce:	f023 0310 	bic.w	r3, r3, #16
 80015d2:	b29a      	uxth	r2, r3
 80015d4:	4b18      	ldr	r3, [pc, #96]	; (8001638 <led7_Scan+0x104>)
 80015d6:	801a      	strh	r2, [r3, #0]
		break;
 80015d8:	e00f      	b.n	80015fa <led7_Scan+0xc6>
	case 3:
		spi_buffer |= 0x0070;
 80015da:	4b17      	ldr	r3, [pc, #92]	; (8001638 <led7_Scan+0x104>)
 80015dc:	881b      	ldrh	r3, [r3, #0]
 80015de:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 80015e2:	b29a      	uxth	r2, r3
 80015e4:	4b14      	ldr	r3, [pc, #80]	; (8001638 <led7_Scan+0x104>)
 80015e6:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xff7f;//0111
 80015e8:	4b13      	ldr	r3, [pc, #76]	; (8001638 <led7_Scan+0x104>)
 80015ea:	881b      	ldrh	r3, [r3, #0]
 80015ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80015f0:	b29a      	uxth	r2, r3
 80015f2:	4b11      	ldr	r3, [pc, #68]	; (8001638 <led7_Scan+0x104>)
 80015f4:	801a      	strh	r2, [r3, #0]
		break;
 80015f6:	e000      	b.n	80015fa <led7_Scan+0xc6>
	default:
		break;
 80015f8:	bf00      	nop
	}
	led7_index = (led7_index + 1)%4;
 80015fa:	4b10      	ldr	r3, [pc, #64]	; (800163c <led7_Scan+0x108>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	3301      	adds	r3, #1
 8001600:	425a      	negs	r2, r3
 8001602:	f003 0303 	and.w	r3, r3, #3
 8001606:	f002 0203 	and.w	r2, r2, #3
 800160a:	bf58      	it	pl
 800160c:	4253      	negpl	r3, r2
 800160e:	4a0b      	ldr	r2, [pc, #44]	; (800163c <led7_Scan+0x108>)
 8001610:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 0);
 8001612:	2200      	movs	r2, #0
 8001614:	2140      	movs	r1, #64	; 0x40
 8001616:	480b      	ldr	r0, [pc, #44]	; (8001644 <led7_Scan+0x110>)
 8001618:	f001 fcac 	bl	8002f74 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (void*)&spi_buffer, 2, 1);
 800161c:	2301      	movs	r3, #1
 800161e:	2202      	movs	r2, #2
 8001620:	4905      	ldr	r1, [pc, #20]	; (8001638 <led7_Scan+0x104>)
 8001622:	4809      	ldr	r0, [pc, #36]	; (8001648 <led7_Scan+0x114>)
 8001624:	f003 facf 	bl	8004bc6 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 8001628:	2201      	movs	r2, #1
 800162a:	2140      	movs	r1, #64	; 0x40
 800162c:	4805      	ldr	r0, [pc, #20]	; (8001644 <led7_Scan+0x110>)
 800162e:	f001 fca1 	bl	8002f74 <HAL_GPIO_WritePin>
}
 8001632:	bf00      	nop
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	20000004 	.word	0x20000004
 800163c:	20000164 	.word	0x20000164
 8001640:	20000000 	.word	0x20000000
 8001644:	40021800 	.word	0x40021800
 8001648:	20000184 	.word	0x20000184

0800164c <switchMode>:
uint8_t uart_hour_flag = 0;
uint8_t uart_minute_flag = 0;
uint8_t uart_hour = 0;
uint8_t count_request_uart = 0;
// Mode switching function
void switchMode() {
 800164c:	b580      	push	{r7, lr}
 800164e:	b084      	sub	sp, #16
 8001650:	af04      	add	r7, sp, #16
    currentMode = (currentMode + 1) % 4; // Cycle between DISPLAY_MODE, SETTING_MODE, ALARM_MODE
 8001652:	4b1f      	ldr	r3, [pc, #124]	; (80016d0 <switchMode+0x84>)
 8001654:	781b      	ldrb	r3, [r3, #0]
 8001656:	3301      	adds	r3, #1
 8001658:	425a      	negs	r2, r3
 800165a:	f003 0303 	and.w	r3, r3, #3
 800165e:	f002 0203 	and.w	r2, r2, #3
 8001662:	bf58      	it	pl
 8001664:	4253      	negpl	r3, r2
 8001666:	b2da      	uxtb	r2, r3
 8001668:	4b19      	ldr	r3, [pc, #100]	; (80016d0 <switchMode+0x84>)
 800166a:	701a      	strb	r2, [r3, #0]
    lcd_Clear(BLACK);
 800166c:	2000      	movs	r0, #0
 800166e:	f7ff fb7b 	bl	8000d68 <lcd_Clear>
    displayModeHeader();
 8001672:	f000 f841 	bl	80016f8 <displayModeHeader>
    if (currentMode == SETTING_MODE) {
 8001676:	4b16      	ldr	r3, [pc, #88]	; (80016d0 <switchMode+0x84>)
 8001678:	781b      	ldrb	r3, [r3, #0]
 800167a:	2b01      	cmp	r3, #1
 800167c:	d10d      	bne.n	800169a <switchMode+0x4e>
        // Load current time to pending values for modification
        ds3231_ReadTime();
 800167e:	f7ff f853 	bl	8000728 <ds3231_ReadTime>
        pending_hours = ds3231_hours;
 8001682:	4b14      	ldr	r3, [pc, #80]	; (80016d4 <switchMode+0x88>)
 8001684:	781a      	ldrb	r2, [r3, #0]
 8001686:	4b14      	ldr	r3, [pc, #80]	; (80016d8 <switchMode+0x8c>)
 8001688:	701a      	strb	r2, [r3, #0]
        pending_min = ds3231_min;
 800168a:	4b14      	ldr	r3, [pc, #80]	; (80016dc <switchMode+0x90>)
 800168c:	781a      	ldrb	r2, [r3, #0]
 800168e:	4b14      	ldr	r3, [pc, #80]	; (80016e0 <switchMode+0x94>)
 8001690:	701a      	strb	r2, [r3, #0]
        pending_sec = ds3231_sec;
 8001692:	4b14      	ldr	r3, [pc, #80]	; (80016e4 <switchMode+0x98>)
 8001694:	781a      	ldrb	r2, [r3, #0]
 8001696:	4b14      	ldr	r3, [pc, #80]	; (80016e8 <switchMode+0x9c>)
 8001698:	701a      	strb	r2, [r3, #0]
    }
    if(currentMode == UART_MODE) {
 800169a:	4b0d      	ldr	r3, [pc, #52]	; (80016d0 <switchMode+0x84>)
 800169c:	781b      	ldrb	r3, [r3, #0]
 800169e:	2b03      	cmp	r3, #3
 80016a0:	d112      	bne.n	80016c8 <switchMode+0x7c>
    	// Print "Updating hour"
    	lcd_ShowStr(10, 30, "Updating hour...", GREEN, BLACK, 24, 1);
 80016a2:	2301      	movs	r3, #1
 80016a4:	9302      	str	r3, [sp, #8]
 80016a6:	2318      	movs	r3, #24
 80016a8:	9301      	str	r3, [sp, #4]
 80016aa:	2300      	movs	r3, #0
 80016ac:	9300      	str	r3, [sp, #0]
 80016ae:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80016b2:	4a0e      	ldr	r2, [pc, #56]	; (80016ec <switchMode+0xa0>)
 80016b4:	211e      	movs	r1, #30
 80016b6:	200a      	movs	r0, #10
 80016b8:	f7ff fecc 	bl	8001454 <lcd_ShowStr>
    	uart_hour_flag = 1;
 80016bc:	4b0c      	ldr	r3, [pc, #48]	; (80016f0 <switchMode+0xa4>)
 80016be:	2201      	movs	r2, #1
 80016c0:	701a      	strb	r2, [r3, #0]
    	count_request_uart = 0;
 80016c2:	4b0c      	ldr	r3, [pc, #48]	; (80016f4 <switchMode+0xa8>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	701a      	strb	r2, [r3, #0]
    }
}
 80016c8:	bf00      	nop
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	20000168 	.word	0x20000168
 80016d4:	200000ab 	.word	0x200000ab
 80016d8:	2000016b 	.word	0x2000016b
 80016dc:	200000ac 	.word	0x200000ac
 80016e0:	2000016c 	.word	0x2000016c
 80016e4:	200000ad 	.word	0x200000ad
 80016e8:	2000016d 	.word	0x2000016d
 80016ec:	08007b78 	.word	0x08007b78
 80016f0:	20000171 	.word	0x20000171
 80016f4:	20000173 	.word	0x20000173

080016f8 <displayModeHeader>:

// Display mode and header
void displayModeHeader() {
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b084      	sub	sp, #16
 80016fc:	af04      	add	r7, sp, #16
    lcd_ShowStr(10, 10, "Mode ", GREEN, BLACK, 24, 1);
 80016fe:	2301      	movs	r3, #1
 8001700:	9302      	str	r3, [sp, #8]
 8001702:	2318      	movs	r3, #24
 8001704:	9301      	str	r3, [sp, #4]
 8001706:	2300      	movs	r3, #0
 8001708:	9300      	str	r3, [sp, #0]
 800170a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800170e:	4a0b      	ldr	r2, [pc, #44]	; (800173c <displayModeHeader+0x44>)
 8001710:	210a      	movs	r1, #10
 8001712:	200a      	movs	r0, #10
 8001714:	f7ff fe9e 	bl	8001454 <lcd_ShowStr>
    lcd_ShowIntNum(70, 10, currentMode, 1, GREEN, BLACK, 24);
 8001718:	4b09      	ldr	r3, [pc, #36]	; (8001740 <displayModeHeader+0x48>)
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	b29a      	uxth	r2, r3
 800171e:	2318      	movs	r3, #24
 8001720:	9302      	str	r3, [sp, #8]
 8001722:	2300      	movs	r3, #0
 8001724:	9301      	str	r3, [sp, #4]
 8001726:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800172a:	9300      	str	r3, [sp, #0]
 800172c:	2301      	movs	r3, #1
 800172e:	210a      	movs	r1, #10
 8001730:	2046      	movs	r0, #70	; 0x46
 8001732:	f7ff fc8d 	bl	8001050 <lcd_ShowIntNum>
}
 8001736:	bf00      	nop
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}
 800173c:	08007b8c 	.word	0x08007b8c
 8001740:	20000168 	.word	0x20000168

08001744 <isNextParameterButtonPressed>:

// Increment parameter selector button
uint8_t isNextParameterButtonPressed() {
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
    return (button_count[15] == 1) ? 1 : 0;
 8001748:	4b05      	ldr	r3, [pc, #20]	; (8001760 <isNextParameterButtonPressed+0x1c>)
 800174a:	8bdb      	ldrh	r3, [r3, #30]
 800174c:	2b01      	cmp	r3, #1
 800174e:	bf0c      	ite	eq
 8001750:	2301      	moveq	r3, #1
 8001752:	2300      	movne	r3, #0
 8001754:	b2db      	uxtb	r3, r3
}
 8001756:	4618      	mov	r0, r3
 8001758:	46bd      	mov	sp, r7
 800175a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175e:	4770      	bx	lr
 8001760:	20000080 	.word	0x20000080

08001764 <isResetToSecondsButtonPressed>:

// Reset to seconds parameter button
uint8_t isResetToSecondsButtonPressed() {
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0
    return (button_count[11] == 1) ? 1 : 0;
 8001768:	4b05      	ldr	r3, [pc, #20]	; (8001780 <isResetToSecondsButtonPressed+0x1c>)
 800176a:	8adb      	ldrh	r3, [r3, #22]
 800176c:	2b01      	cmp	r3, #1
 800176e:	bf0c      	ite	eq
 8001770:	2301      	moveq	r3, #1
 8001772:	2300      	movne	r3, #0
 8001774:	b2db      	uxtb	r3, r3
}
 8001776:	4618      	mov	r0, r3
 8001778:	46bd      	mov	sp, r7
 800177a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177e:	4770      	bx	lr
 8001780:	20000080 	.word	0x20000080

08001784 <isButtonUpPressed>:

// Increment value of the current parameter button
uint8_t isButtonUpPressed() {
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
    return (button_count[3] == 1 || button_count[3] >= 40) ? 1 : 0;
 8001788:	4b08      	ldr	r3, [pc, #32]	; (80017ac <isButtonUpPressed+0x28>)
 800178a:	88db      	ldrh	r3, [r3, #6]
 800178c:	2b01      	cmp	r3, #1
 800178e:	d003      	beq.n	8001798 <isButtonUpPressed+0x14>
 8001790:	4b06      	ldr	r3, [pc, #24]	; (80017ac <isButtonUpPressed+0x28>)
 8001792:	88db      	ldrh	r3, [r3, #6]
 8001794:	2b27      	cmp	r3, #39	; 0x27
 8001796:	d901      	bls.n	800179c <isButtonUpPressed+0x18>
 8001798:	2301      	movs	r3, #1
 800179a:	e000      	b.n	800179e <isButtonUpPressed+0x1a>
 800179c:	2300      	movs	r3, #0
 800179e:	b2db      	uxtb	r3, r3
}
 80017a0:	4618      	mov	r0, r3
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr
 80017aa:	bf00      	nop
 80017ac:	20000080 	.word	0x20000080

080017b0 <isButtonEnterPressed>:

// Save parameter change button
uint8_t isButtonEnterPressed() {
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
    return (button_count[12] == 1) ? 1 : 0;
 80017b4:	4b05      	ldr	r3, [pc, #20]	; (80017cc <isButtonEnterPressed+0x1c>)
 80017b6:	8b1b      	ldrh	r3, [r3, #24]
 80017b8:	2b01      	cmp	r3, #1
 80017ba:	bf0c      	ite	eq
 80017bc:	2301      	moveq	r3, #1
 80017be:	2300      	movne	r3, #0
 80017c0:	b2db      	uxtb	r3, r3
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	46bd      	mov	sp, r7
 80017c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ca:	4770      	bx	lr
 80017cc:	20000080 	.word	0x20000080

080017d0 <handleSettingMode>:

void handleSettingMode() {
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
    static uint32_t lastBlinkTime = 0;
    static uint32_t holdTime = 0;
    uint8_t holdInProgress = 0;
 80017d6:	2300      	movs	r3, #0
 80017d8:	71fb      	strb	r3, [r7, #7]

    // Blink the currently selected parameter at 2Hz
    if (HAL_GetTick() - lastBlinkTime >= 500) {
 80017da:	f001 f85b 	bl	8002894 <HAL_GetTick>
 80017de:	4602      	mov	r2, r0
 80017e0:	4b33      	ldr	r3, [pc, #204]	; (80018b0 <handleSettingMode+0xe0>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	1ad3      	subs	r3, r2, r3
 80017e6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80017ea:	d30e      	bcc.n	800180a <handleSettingMode+0x3a>
        isSetting = !isSetting;
 80017ec:	4b31      	ldr	r3, [pc, #196]	; (80018b4 <handleSettingMode+0xe4>)
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	bf0c      	ite	eq
 80017f4:	2301      	moveq	r3, #1
 80017f6:	2300      	movne	r3, #0
 80017f8:	b2db      	uxtb	r3, r3
 80017fa:	461a      	mov	r2, r3
 80017fc:	4b2d      	ldr	r3, [pc, #180]	; (80018b4 <handleSettingMode+0xe4>)
 80017fe:	701a      	strb	r2, [r3, #0]
        lastBlinkTime = HAL_GetTick();
 8001800:	f001 f848 	bl	8002894 <HAL_GetTick>
 8001804:	4603      	mov	r3, r0
 8001806:	4a2a      	ldr	r2, [pc, #168]	; (80018b0 <handleSettingMode+0xe0>)
 8001808:	6013      	str	r3, [r2, #0]
    }

    // Display only the selected parameter to be adjusted
    displayOnlySelectedParameter(isSetting);
 800180a:	4b2a      	ldr	r3, [pc, #168]	; (80018b4 <handleSettingMode+0xe4>)
 800180c:	781b      	ldrb	r3, [r3, #0]
 800180e:	4618      	mov	r0, r3
 8001810:	f000 f8e6 	bl	80019e0 <displayOnlySelectedParameter>

    // Cycle to the next parameter when next parameter button is pressed
    if (isNextParameterButtonPressed()) {
 8001814:	f7ff ff96 	bl	8001744 <isNextParameterButtonPressed>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d00e      	beq.n	800183c <handleSettingMode+0x6c>
        currentSetting = (currentSetting + 1) % 3; // Cycles through 0 (seconds), 1 (minutes), 2 (hours)
 800181e:	4b26      	ldr	r3, [pc, #152]	; (80018b8 <handleSettingMode+0xe8>)
 8001820:	781b      	ldrb	r3, [r3, #0]
 8001822:	1c5a      	adds	r2, r3, #1
 8001824:	4b25      	ldr	r3, [pc, #148]	; (80018bc <handleSettingMode+0xec>)
 8001826:	fb83 3102 	smull	r3, r1, r3, r2
 800182a:	17d3      	asrs	r3, r2, #31
 800182c:	1ac9      	subs	r1, r1, r3
 800182e:	460b      	mov	r3, r1
 8001830:	005b      	lsls	r3, r3, #1
 8001832:	440b      	add	r3, r1
 8001834:	1ad1      	subs	r1, r2, r3
 8001836:	b2ca      	uxtb	r2, r1
 8001838:	4b1f      	ldr	r3, [pc, #124]	; (80018b8 <handleSettingMode+0xe8>)
 800183a:	701a      	strb	r2, [r3, #0]
    }

    // Reset current setting to seconds when reset button is pressed
    if (isResetToSecondsButtonPressed()) {
 800183c:	f7ff ff92 	bl	8001764 <isResetToSecondsButtonPressed>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d002      	beq.n	800184c <handleSettingMode+0x7c>
        currentSetting = 0; // Reset to seconds
 8001846:	4b1c      	ldr	r3, [pc, #112]	; (80018b8 <handleSettingMode+0xe8>)
 8001848:	2200      	movs	r2, #0
 800184a:	701a      	strb	r2, [r3, #0]
    }

    // Increment behavior based on button press duration
    if(isButtonUpPressed()&&button_count[3] >= 40){
 800184c:	f7ff ff9a 	bl	8001784 <isButtonUpPressed>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d006      	beq.n	8001864 <handleSettingMode+0x94>
 8001856:	4b1a      	ldr	r3, [pc, #104]	; (80018c0 <handleSettingMode+0xf0>)
 8001858:	88db      	ldrh	r3, [r3, #6]
 800185a:	2b27      	cmp	r3, #39	; 0x27
 800185c:	d902      	bls.n	8001864 <handleSettingMode+0x94>
		incrementCurrentSetting();
 800185e:	f000 f831 	bl	80018c4 <incrementCurrentSetting>
 8001862:	e00a      	b.n	800187a <handleSettingMode+0xaa>
	} else if(isButtonUpPressed()&&button_count[3] < 40){
 8001864:	f7ff ff8e 	bl	8001784 <isButtonUpPressed>
 8001868:	4603      	mov	r3, r0
 800186a:	2b00      	cmp	r3, #0
 800186c:	d005      	beq.n	800187a <handleSettingMode+0xaa>
 800186e:	4b14      	ldr	r3, [pc, #80]	; (80018c0 <handleSettingMode+0xf0>)
 8001870:	88db      	ldrh	r3, [r3, #6]
 8001872:	2b27      	cmp	r3, #39	; 0x27
 8001874:	d801      	bhi.n	800187a <handleSettingMode+0xaa>
		incrementCurrentSetting();
 8001876:	f000 f825 	bl	80018c4 <incrementCurrentSetting>
	}

    // Save the modified value only when pressing the Enter button
    if (isButtonEnterPressed()) {
 800187a:	f7ff ff99 	bl	80017b0 <isButtonEnterPressed>
 800187e:	4603      	mov	r3, r0
 8001880:	2b00      	cmp	r3, #0
 8001882:	d010      	beq.n	80018a6 <handleSettingMode+0xd6>
        savePendingValues();
 8001884:	f000 f874 	bl	8001970 <savePendingValues>
        currentSetting = (currentSetting + 1) % 3;
 8001888:	4b0b      	ldr	r3, [pc, #44]	; (80018b8 <handleSettingMode+0xe8>)
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	1c5a      	adds	r2, r3, #1
 800188e:	4b0b      	ldr	r3, [pc, #44]	; (80018bc <handleSettingMode+0xec>)
 8001890:	fb83 3102 	smull	r3, r1, r3, r2
 8001894:	17d3      	asrs	r3, r2, #31
 8001896:	1ac9      	subs	r1, r1, r3
 8001898:	460b      	mov	r3, r1
 800189a:	005b      	lsls	r3, r3, #1
 800189c:	440b      	add	r3, r1
 800189e:	1ad1      	subs	r1, r2, r3
 80018a0:	b2ca      	uxtb	r2, r1
 80018a2:	4b05      	ldr	r3, [pc, #20]	; (80018b8 <handleSettingMode+0xe8>)
 80018a4:	701a      	strb	r2, [r3, #0]
    }
}
 80018a6:	bf00      	nop
 80018a8:	3708      	adds	r7, #8
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	20000174 	.word	0x20000174
 80018b4:	2000016a 	.word	0x2000016a
 80018b8:	20000169 	.word	0x20000169
 80018bc:	55555556 	.word	0x55555556
 80018c0:	20000080 	.word	0x20000080

080018c4 <incrementCurrentSetting>:

// Increment the currently selected setting
void incrementCurrentSetting() {
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0
    switch (currentSetting) {
 80018c8:	4b23      	ldr	r3, [pc, #140]	; (8001958 <incrementCurrentSetting+0x94>)
 80018ca:	781b      	ldrb	r3, [r3, #0]
 80018cc:	2b02      	cmp	r3, #2
 80018ce:	d02c      	beq.n	800192a <incrementCurrentSetting+0x66>
 80018d0:	2b02      	cmp	r3, #2
 80018d2:	dc3c      	bgt.n	800194e <incrementCurrentSetting+0x8a>
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d002      	beq.n	80018de <incrementCurrentSetting+0x1a>
 80018d8:	2b01      	cmp	r3, #1
 80018da:	d013      	beq.n	8001904 <incrementCurrentSetting+0x40>
        case 0: pending_sec = (pending_sec + 1) % 60; break;
        case 1: pending_min = (pending_min + 1) % 60; break;
        case 2: pending_hours = (pending_hours + 1) % 24; break;
    }
}
 80018dc:	e037      	b.n	800194e <incrementCurrentSetting+0x8a>
        case 0: pending_sec = (pending_sec + 1) % 60; break;
 80018de:	4b1f      	ldr	r3, [pc, #124]	; (800195c <incrementCurrentSetting+0x98>)
 80018e0:	781b      	ldrb	r3, [r3, #0]
 80018e2:	1c5a      	adds	r2, r3, #1
 80018e4:	4b1e      	ldr	r3, [pc, #120]	; (8001960 <incrementCurrentSetting+0x9c>)
 80018e6:	fb83 1302 	smull	r1, r3, r3, r2
 80018ea:	4413      	add	r3, r2
 80018ec:	1159      	asrs	r1, r3, #5
 80018ee:	17d3      	asrs	r3, r2, #31
 80018f0:	1ac9      	subs	r1, r1, r3
 80018f2:	460b      	mov	r3, r1
 80018f4:	011b      	lsls	r3, r3, #4
 80018f6:	1a5b      	subs	r3, r3, r1
 80018f8:	009b      	lsls	r3, r3, #2
 80018fa:	1ad1      	subs	r1, r2, r3
 80018fc:	b2ca      	uxtb	r2, r1
 80018fe:	4b17      	ldr	r3, [pc, #92]	; (800195c <incrementCurrentSetting+0x98>)
 8001900:	701a      	strb	r2, [r3, #0]
 8001902:	e024      	b.n	800194e <incrementCurrentSetting+0x8a>
        case 1: pending_min = (pending_min + 1) % 60; break;
 8001904:	4b17      	ldr	r3, [pc, #92]	; (8001964 <incrementCurrentSetting+0xa0>)
 8001906:	781b      	ldrb	r3, [r3, #0]
 8001908:	1c5a      	adds	r2, r3, #1
 800190a:	4b15      	ldr	r3, [pc, #84]	; (8001960 <incrementCurrentSetting+0x9c>)
 800190c:	fb83 1302 	smull	r1, r3, r3, r2
 8001910:	4413      	add	r3, r2
 8001912:	1159      	asrs	r1, r3, #5
 8001914:	17d3      	asrs	r3, r2, #31
 8001916:	1ac9      	subs	r1, r1, r3
 8001918:	460b      	mov	r3, r1
 800191a:	011b      	lsls	r3, r3, #4
 800191c:	1a5b      	subs	r3, r3, r1
 800191e:	009b      	lsls	r3, r3, #2
 8001920:	1ad1      	subs	r1, r2, r3
 8001922:	b2ca      	uxtb	r2, r1
 8001924:	4b0f      	ldr	r3, [pc, #60]	; (8001964 <incrementCurrentSetting+0xa0>)
 8001926:	701a      	strb	r2, [r3, #0]
 8001928:	e011      	b.n	800194e <incrementCurrentSetting+0x8a>
        case 2: pending_hours = (pending_hours + 1) % 24; break;
 800192a:	4b0f      	ldr	r3, [pc, #60]	; (8001968 <incrementCurrentSetting+0xa4>)
 800192c:	781b      	ldrb	r3, [r3, #0]
 800192e:	1c5a      	adds	r2, r3, #1
 8001930:	4b0e      	ldr	r3, [pc, #56]	; (800196c <incrementCurrentSetting+0xa8>)
 8001932:	fb83 1302 	smull	r1, r3, r3, r2
 8001936:	1099      	asrs	r1, r3, #2
 8001938:	17d3      	asrs	r3, r2, #31
 800193a:	1ac9      	subs	r1, r1, r3
 800193c:	460b      	mov	r3, r1
 800193e:	005b      	lsls	r3, r3, #1
 8001940:	440b      	add	r3, r1
 8001942:	00db      	lsls	r3, r3, #3
 8001944:	1ad1      	subs	r1, r2, r3
 8001946:	b2ca      	uxtb	r2, r1
 8001948:	4b07      	ldr	r3, [pc, #28]	; (8001968 <incrementCurrentSetting+0xa4>)
 800194a:	701a      	strb	r2, [r3, #0]
 800194c:	bf00      	nop
}
 800194e:	bf00      	nop
 8001950:	46bd      	mov	sp, r7
 8001952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001956:	4770      	bx	lr
 8001958:	20000169 	.word	0x20000169
 800195c:	2000016d 	.word	0x2000016d
 8001960:	88888889 	.word	0x88888889
 8001964:	2000016c 	.word	0x2000016c
 8001968:	2000016b 	.word	0x2000016b
 800196c:	2aaaaaab 	.word	0x2aaaaaab

08001970 <savePendingValues>:

// Save modified values to RTC
void savePendingValues() {
 8001970:	b580      	push	{r7, lr}
 8001972:	af00      	add	r7, sp, #0
    if (currentMode == SETTING_MODE) {
 8001974:	4b13      	ldr	r3, [pc, #76]	; (80019c4 <savePendingValues+0x54>)
 8001976:	781b      	ldrb	r3, [r3, #0]
 8001978:	2b01      	cmp	r3, #1
 800197a:	d112      	bne.n	80019a2 <savePendingValues+0x32>
        // Save current time settings
        ds3231_Write(ADDRESS_HOUR, pending_hours);
 800197c:	4b12      	ldr	r3, [pc, #72]	; (80019c8 <savePendingValues+0x58>)
 800197e:	781b      	ldrb	r3, [r3, #0]
 8001980:	4619      	mov	r1, r3
 8001982:	2002      	movs	r0, #2
 8001984:	f7fe feae 	bl	80006e4 <ds3231_Write>
        ds3231_Write(ADDRESS_MIN, pending_min);
 8001988:	4b10      	ldr	r3, [pc, #64]	; (80019cc <savePendingValues+0x5c>)
 800198a:	781b      	ldrb	r3, [r3, #0]
 800198c:	4619      	mov	r1, r3
 800198e:	2001      	movs	r0, #1
 8001990:	f7fe fea8 	bl	80006e4 <ds3231_Write>
        ds3231_Write(ADDRESS_SEC, pending_sec);
 8001994:	4b0e      	ldr	r3, [pc, #56]	; (80019d0 <savePendingValues+0x60>)
 8001996:	781b      	ldrb	r3, [r3, #0]
 8001998:	4619      	mov	r1, r3
 800199a:	2000      	movs	r0, #0
 800199c:	f7fe fea2 	bl	80006e4 <ds3231_Write>
        // Save alarm settings
        alarm_set_hours = pending_hours;
        alarm_set_minutes = pending_min;
        alarm_active = 1; // Re-enable the alarm after setting
    }
}
 80019a0:	e00e      	b.n	80019c0 <savePendingValues+0x50>
    } else if (currentMode == ALARM_MODE) {
 80019a2:	4b08      	ldr	r3, [pc, #32]	; (80019c4 <savePendingValues+0x54>)
 80019a4:	781b      	ldrb	r3, [r3, #0]
 80019a6:	2b02      	cmp	r3, #2
 80019a8:	d10a      	bne.n	80019c0 <savePendingValues+0x50>
        alarm_set_hours = pending_hours;
 80019aa:	4b07      	ldr	r3, [pc, #28]	; (80019c8 <savePendingValues+0x58>)
 80019ac:	781a      	ldrb	r2, [r3, #0]
 80019ae:	4b09      	ldr	r3, [pc, #36]	; (80019d4 <savePendingValues+0x64>)
 80019b0:	701a      	strb	r2, [r3, #0]
        alarm_set_minutes = pending_min;
 80019b2:	4b06      	ldr	r3, [pc, #24]	; (80019cc <savePendingValues+0x5c>)
 80019b4:	781a      	ldrb	r2, [r3, #0]
 80019b6:	4b08      	ldr	r3, [pc, #32]	; (80019d8 <savePendingValues+0x68>)
 80019b8:	701a      	strb	r2, [r3, #0]
        alarm_active = 1; // Re-enable the alarm after setting
 80019ba:	4b08      	ldr	r3, [pc, #32]	; (80019dc <savePendingValues+0x6c>)
 80019bc:	2201      	movs	r2, #1
 80019be:	701a      	strb	r2, [r3, #0]
}
 80019c0:	bf00      	nop
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	20000168 	.word	0x20000168
 80019c8:	2000016b 	.word	0x2000016b
 80019cc:	2000016c 	.word	0x2000016c
 80019d0:	2000016d 	.word	0x2000016d
 80019d4:	2000016e 	.word	0x2000016e
 80019d8:	2000016f 	.word	0x2000016f
 80019dc:	20000006 	.word	0x20000006

080019e0 <displayOnlySelectedParameter>:
// Display only the selected parameter, hide others
void displayOnlySelectedParameter(uint8_t show) {
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b088      	sub	sp, #32
 80019e4:	af04      	add	r7, sp, #16
 80019e6:	4603      	mov	r3, r0
 80019e8:	71fb      	strb	r3, [r7, #7]
    uint16_t secColor = (currentSetting == 0 && show) ? GREEN : BLACK;
 80019ea:	4b29      	ldr	r3, [pc, #164]	; (8001a90 <displayOnlySelectedParameter+0xb0>)
 80019ec:	781b      	ldrb	r3, [r3, #0]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d105      	bne.n	80019fe <displayOnlySelectedParameter+0x1e>
 80019f2:	79fb      	ldrb	r3, [r7, #7]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d002      	beq.n	80019fe <displayOnlySelectedParameter+0x1e>
 80019f8:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80019fc:	e000      	b.n	8001a00 <displayOnlySelectedParameter+0x20>
 80019fe:	2300      	movs	r3, #0
 8001a00:	81fb      	strh	r3, [r7, #14]
    uint16_t minColor = (currentSetting == 1 && show) ? GREEN : BLACK;
 8001a02:	4b23      	ldr	r3, [pc, #140]	; (8001a90 <displayOnlySelectedParameter+0xb0>)
 8001a04:	781b      	ldrb	r3, [r3, #0]
 8001a06:	2b01      	cmp	r3, #1
 8001a08:	d105      	bne.n	8001a16 <displayOnlySelectedParameter+0x36>
 8001a0a:	79fb      	ldrb	r3, [r7, #7]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d002      	beq.n	8001a16 <displayOnlySelectedParameter+0x36>
 8001a10:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001a14:	e000      	b.n	8001a18 <displayOnlySelectedParameter+0x38>
 8001a16:	2300      	movs	r3, #0
 8001a18:	81bb      	strh	r3, [r7, #12]
    uint16_t hourColor = (currentSetting == 2 && show) ? GREEN : BLACK;
 8001a1a:	4b1d      	ldr	r3, [pc, #116]	; (8001a90 <displayOnlySelectedParameter+0xb0>)
 8001a1c:	781b      	ldrb	r3, [r3, #0]
 8001a1e:	2b02      	cmp	r3, #2
 8001a20:	d105      	bne.n	8001a2e <displayOnlySelectedParameter+0x4e>
 8001a22:	79fb      	ldrb	r3, [r7, #7]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d002      	beq.n	8001a2e <displayOnlySelectedParameter+0x4e>
 8001a28:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001a2c:	e000      	b.n	8001a30 <displayOnlySelectedParameter+0x50>
 8001a2e:	2300      	movs	r3, #0
 8001a30:	817b      	strh	r3, [r7, #10]

    lcd_ShowIntNum(70, 100, pending_hours, 2, hourColor, BLACK, 24);
 8001a32:	4b18      	ldr	r3, [pc, #96]	; (8001a94 <displayOnlySelectedParameter+0xb4>)
 8001a34:	781b      	ldrb	r3, [r3, #0]
 8001a36:	b29a      	uxth	r2, r3
 8001a38:	2318      	movs	r3, #24
 8001a3a:	9302      	str	r3, [sp, #8]
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	9301      	str	r3, [sp, #4]
 8001a40:	897b      	ldrh	r3, [r7, #10]
 8001a42:	9300      	str	r3, [sp, #0]
 8001a44:	2302      	movs	r3, #2
 8001a46:	2164      	movs	r1, #100	; 0x64
 8001a48:	2046      	movs	r0, #70	; 0x46
 8001a4a:	f7ff fb01 	bl	8001050 <lcd_ShowIntNum>
    lcd_ShowIntNum(110, 100, pending_min, 2, minColor, BLACK, 24);
 8001a4e:	4b12      	ldr	r3, [pc, #72]	; (8001a98 <displayOnlySelectedParameter+0xb8>)
 8001a50:	781b      	ldrb	r3, [r3, #0]
 8001a52:	b29a      	uxth	r2, r3
 8001a54:	2318      	movs	r3, #24
 8001a56:	9302      	str	r3, [sp, #8]
 8001a58:	2300      	movs	r3, #0
 8001a5a:	9301      	str	r3, [sp, #4]
 8001a5c:	89bb      	ldrh	r3, [r7, #12]
 8001a5e:	9300      	str	r3, [sp, #0]
 8001a60:	2302      	movs	r3, #2
 8001a62:	2164      	movs	r1, #100	; 0x64
 8001a64:	206e      	movs	r0, #110	; 0x6e
 8001a66:	f7ff faf3 	bl	8001050 <lcd_ShowIntNum>
    lcd_ShowIntNum(150, 100, pending_sec, 2, secColor, BLACK, 24);
 8001a6a:	4b0c      	ldr	r3, [pc, #48]	; (8001a9c <displayOnlySelectedParameter+0xbc>)
 8001a6c:	781b      	ldrb	r3, [r3, #0]
 8001a6e:	b29a      	uxth	r2, r3
 8001a70:	2318      	movs	r3, #24
 8001a72:	9302      	str	r3, [sp, #8]
 8001a74:	2300      	movs	r3, #0
 8001a76:	9301      	str	r3, [sp, #4]
 8001a78:	89fb      	ldrh	r3, [r7, #14]
 8001a7a:	9300      	str	r3, [sp, #0]
 8001a7c:	2302      	movs	r3, #2
 8001a7e:	2164      	movs	r1, #100	; 0x64
 8001a80:	2096      	movs	r0, #150	; 0x96
 8001a82:	f7ff fae5 	bl	8001050 <lcd_ShowIntNum>
}
 8001a86:	bf00      	nop
 8001a88:	3710      	adds	r7, #16
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	20000169 	.word	0x20000169
 8001a94:	2000016b 	.word	0x2000016b
 8001a98:	2000016c 	.word	0x2000016c
 8001a9c:	2000016d 	.word	0x2000016d

08001aa0 <isModeButtonPressed>:

// Detect if mode button is pressed
uint8_t isModeButtonPressed() {
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0
    return (button_count[0] == 1) ? 1 : 0;
 8001aa4:	4b05      	ldr	r3, [pc, #20]	; (8001abc <isModeButtonPressed+0x1c>)
 8001aa6:	881b      	ldrh	r3, [r3, #0]
 8001aa8:	2b01      	cmp	r3, #1
 8001aaa:	bf0c      	ite	eq
 8001aac:	2301      	moveq	r3, #1
 8001aae:	2300      	movne	r3, #0
 8001ab0:	b2db      	uxtb	r3, r3
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aba:	4770      	bx	lr
 8001abc:	20000080 	.word	0x20000080

08001ac0 <checkAlarmTrigger>:

/* USER CODE END 4 */
void checkAlarmTrigger() {
 8001ac0:	b480      	push	{r7}
 8001ac2:	af00      	add	r7, sp, #0
    if (alarm_active && !alarm_triggered && (ds3231_hours == alarm_set_hours) && (ds3231_min == alarm_set_minutes)) {
 8001ac4:	4b0d      	ldr	r3, [pc, #52]	; (8001afc <checkAlarmTrigger+0x3c>)
 8001ac6:	781b      	ldrb	r3, [r3, #0]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d012      	beq.n	8001af2 <checkAlarmTrigger+0x32>
 8001acc:	4b0c      	ldr	r3, [pc, #48]	; (8001b00 <checkAlarmTrigger+0x40>)
 8001ace:	781b      	ldrb	r3, [r3, #0]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d10e      	bne.n	8001af2 <checkAlarmTrigger+0x32>
 8001ad4:	4b0b      	ldr	r3, [pc, #44]	; (8001b04 <checkAlarmTrigger+0x44>)
 8001ad6:	781a      	ldrb	r2, [r3, #0]
 8001ad8:	4b0b      	ldr	r3, [pc, #44]	; (8001b08 <checkAlarmTrigger+0x48>)
 8001ada:	781b      	ldrb	r3, [r3, #0]
 8001adc:	429a      	cmp	r2, r3
 8001ade:	d108      	bne.n	8001af2 <checkAlarmTrigger+0x32>
 8001ae0:	4b0a      	ldr	r3, [pc, #40]	; (8001b0c <checkAlarmTrigger+0x4c>)
 8001ae2:	781a      	ldrb	r2, [r3, #0]
 8001ae4:	4b0a      	ldr	r3, [pc, #40]	; (8001b10 <checkAlarmTrigger+0x50>)
 8001ae6:	781b      	ldrb	r3, [r3, #0]
 8001ae8:	429a      	cmp	r2, r3
 8001aea:	d102      	bne.n	8001af2 <checkAlarmTrigger+0x32>
        alarm_triggered = 1; // Set the alarm trigger flag
 8001aec:	4b04      	ldr	r3, [pc, #16]	; (8001b00 <checkAlarmTrigger+0x40>)
 8001aee:	2201      	movs	r2, #1
 8001af0:	701a      	strb	r2, [r3, #0]
    }
}
 8001af2:	bf00      	nop
 8001af4:	46bd      	mov	sp, r7
 8001af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afa:	4770      	bx	lr
 8001afc:	20000006 	.word	0x20000006
 8001b00:	20000170 	.word	0x20000170
 8001b04:	200000ab 	.word	0x200000ab
 8001b08:	2000016e 	.word	0x2000016e
 8001b0c:	200000ac 	.word	0x200000ac
 8001b10:	2000016f 	.word	0x2000016f

08001b14 <turnOffAlarm>:
void turnOffAlarm() {
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b082      	sub	sp, #8
 8001b18:	af02      	add	r7, sp, #8
    if (button_count[4] == 1) { // Button to turn off alarm
 8001b1a:	4b0a      	ldr	r3, [pc, #40]	; (8001b44 <turnOffAlarm+0x30>)
 8001b1c:	891b      	ldrh	r3, [r3, #8]
 8001b1e:	2b01      	cmp	r3, #1
 8001b20:	d10d      	bne.n	8001b3e <turnOffAlarm+0x2a>
        alarm_triggered = 0;
 8001b22:	4b09      	ldr	r3, [pc, #36]	; (8001b48 <turnOffAlarm+0x34>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	701a      	strb	r2, [r3, #0]
        alarm_active = 0;
 8001b28:	4b08      	ldr	r3, [pc, #32]	; (8001b4c <turnOffAlarm+0x38>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	701a      	strb	r2, [r3, #0]

        lcd_Fill(20, 160, 240, 184, BLACK);// Disable alarm until reset
 8001b2e:	2300      	movs	r3, #0
 8001b30:	9300      	str	r3, [sp, #0]
 8001b32:	23b8      	movs	r3, #184	; 0xb8
 8001b34:	22f0      	movs	r2, #240	; 0xf0
 8001b36:	21a0      	movs	r1, #160	; 0xa0
 8001b38:	2014      	movs	r0, #20
 8001b3a:	f7ff f94f 	bl	8000ddc <lcd_Fill>
    }
}
 8001b3e:	bf00      	nop
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	20000080 	.word	0x20000080
 8001b48:	20000170 	.word	0x20000170
 8001b4c:	20000006 	.word	0x20000006

08001b50 <main>:
int main(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	af00      	add	r7, sp, #0
    HAL_Init();
 8001b54:	f000 fe38 	bl	80027c8 <HAL_Init>
    SystemClock_Config();
 8001b58:	f000 f84c 	bl	8001bf4 <SystemClock_Config>
    MX_GPIO_Init();
 8001b5c:	f7fe ff18 	bl	8000990 <MX_GPIO_Init>
    MX_TIM2_Init();
 8001b60:	f000 fc24 	bl	80023ac <MX_TIM2_Init>
    MX_SPI1_Init();
 8001b64:	f000 faf6 	bl	8002154 <MX_SPI1_Init>
    MX_FSMC_Init();
 8001b68:	f7fe fe42 	bl	80007f0 <MX_FSMC_Init>
    MX_I2C1_Init();
 8001b6c:	f7ff f808 	bl	8000b80 <MX_I2C1_Init>
    MX_USART1_UART_Init();
 8001b70:	f000 fd48 	bl	8002604 <MX_USART1_UART_Init>

    /* Initialize peripherals and set initial time */
    system_init();
 8001b74:	f000 f8a8 	bl	8001cc8 <system_init>

    /* Main loop */
    lcd_Clear(BLACK);
 8001b78:	2000      	movs	r0, #0
 8001b7a:	f7ff f8f5 	bl	8000d68 <lcd_Clear>
    updateTime();
 8001b7e:	f000 f8c7 	bl	8001d10 <updateTime>
    while (1)
    {
        while(!flag_timer2);
 8001b82:	bf00      	nop
 8001b84:	4b19      	ldr	r3, [pc, #100]	; (8001bec <main+0x9c>)
 8001b86:	881b      	ldrh	r3, [r3, #0]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d0fb      	beq.n	8001b84 <main+0x34>
        flag_timer2 = 0;
 8001b8c:	4b17      	ldr	r3, [pc, #92]	; (8001bec <main+0x9c>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	801a      	strh	r2, [r3, #0]
        button_Scan();
 8001b92:	f7fe fcf7 	bl	8000584 <button_Scan>

        // Check if mode button is pressed and switch modes
        if (isModeButtonPressed()) {
 8001b96:	f7ff ff83 	bl	8001aa0 <isModeButtonPressed>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d001      	beq.n	8001ba4 <main+0x54>
            switchMode();
 8001ba0:	f7ff fd54 	bl	800164c <switchMode>
        }

        // Main functionality for each mode
        switch (currentMode) {
 8001ba4:	4b12      	ldr	r3, [pc, #72]	; (8001bf0 <main+0xa0>)
 8001ba6:	781b      	ldrb	r3, [r3, #0]
 8001ba8:	2b03      	cmp	r3, #3
 8001baa:	d81d      	bhi.n	8001be8 <main+0x98>
 8001bac:	a201      	add	r2, pc, #4	; (adr r2, 8001bb4 <main+0x64>)
 8001bae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bb2:	bf00      	nop
 8001bb4:	08001bc5 	.word	0x08001bc5
 8001bb8:	08001bd7 	.word	0x08001bd7
 8001bbc:	08001bdd 	.word	0x08001bdd
 8001bc0:	08001be3 	.word	0x08001be3
            case DISPLAY_MODE:
                ds3231_ReadTime();
 8001bc4:	f7fe fdb0 	bl	8000728 <ds3231_ReadTime>
                displayTime();
 8001bc8:	f000 f8c2 	bl	8001d50 <displayTime>
                checkAlarmTrigger();  // Check if alarm should trigger
 8001bcc:	f7ff ff78 	bl	8001ac0 <checkAlarmTrigger>
                turnOffAlarm();       // Check if alarm should be turned off
 8001bd0:	f7ff ffa0 	bl	8001b14 <turnOffAlarm>
                break;
 8001bd4:	e009      	b.n	8001bea <main+0x9a>

            case SETTING_MODE:
                handleSettingMode();
 8001bd6:	f7ff fdfb 	bl	80017d0 <handleSettingMode>
                break;
 8001bda:	e006      	b.n	8001bea <main+0x9a>

            case ALARM_MODE:
            	handleSettingMode();
 8001bdc:	f7ff fdf8 	bl	80017d0 <handleSettingMode>
                break;
 8001be0:	e003      	b.n	8001bea <main+0x9a>
            case UART_MODE:
            	uart_handle();
 8001be2:	f000 f949 	bl	8001e78 <uart_handle>
            	break;
 8001be6:	e000      	b.n	8001bea <main+0x9a>
            default:
            	break;
 8001be8:	bf00      	nop
        while(!flag_timer2);
 8001bea:	e7ca      	b.n	8001b82 <main+0x32>
 8001bec:	20000178 	.word	0x20000178
 8001bf0:	20000168 	.word	0x20000168

08001bf4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b094      	sub	sp, #80	; 0x50
 8001bf8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001bfa:	f107 0320 	add.w	r3, r7, #32
 8001bfe:	2230      	movs	r2, #48	; 0x30
 8001c00:	2100      	movs	r1, #0
 8001c02:	4618      	mov	r0, r3
 8001c04:	f005 fb28 	bl	8007258 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c08:	f107 030c 	add.w	r3, r7, #12
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	601a      	str	r2, [r3, #0]
 8001c10:	605a      	str	r2, [r3, #4]
 8001c12:	609a      	str	r2, [r3, #8]
 8001c14:	60da      	str	r2, [r3, #12]
 8001c16:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c18:	2300      	movs	r3, #0
 8001c1a:	60bb      	str	r3, [r7, #8]
 8001c1c:	4b28      	ldr	r3, [pc, #160]	; (8001cc0 <SystemClock_Config+0xcc>)
 8001c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c20:	4a27      	ldr	r2, [pc, #156]	; (8001cc0 <SystemClock_Config+0xcc>)
 8001c22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c26:	6413      	str	r3, [r2, #64]	; 0x40
 8001c28:	4b25      	ldr	r3, [pc, #148]	; (8001cc0 <SystemClock_Config+0xcc>)
 8001c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c30:	60bb      	str	r3, [r7, #8]
 8001c32:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c34:	2300      	movs	r3, #0
 8001c36:	607b      	str	r3, [r7, #4]
 8001c38:	4b22      	ldr	r3, [pc, #136]	; (8001cc4 <SystemClock_Config+0xd0>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a21      	ldr	r2, [pc, #132]	; (8001cc4 <SystemClock_Config+0xd0>)
 8001c3e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c42:	6013      	str	r3, [r2, #0]
 8001c44:	4b1f      	ldr	r3, [pc, #124]	; (8001cc4 <SystemClock_Config+0xd0>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c4c:	607b      	str	r3, [r7, #4]
 8001c4e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001c50:	2302      	movs	r3, #2
 8001c52:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c54:	2301      	movs	r3, #1
 8001c56:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001c58:	2310      	movs	r3, #16
 8001c5a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c5c:	2302      	movs	r3, #2
 8001c5e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001c60:	2300      	movs	r3, #0
 8001c62:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001c64:	2308      	movs	r3, #8
 8001c66:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001c68:	23a8      	movs	r3, #168	; 0xa8
 8001c6a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001c6c:	2302      	movs	r3, #2
 8001c6e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001c70:	2304      	movs	r3, #4
 8001c72:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c74:	f107 0320 	add.w	r3, r7, #32
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f002 fa83 	bl	8004184 <HAL_RCC_OscConfig>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d001      	beq.n	8001c88 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001c84:	f000 f9d8 	bl	8002038 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c88:	230f      	movs	r3, #15
 8001c8a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c8c:	2302      	movs	r3, #2
 8001c8e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c90:	2300      	movs	r3, #0
 8001c92:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001c94:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001c98:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8001c9a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001c9e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001ca0:	f107 030c 	add.w	r3, r7, #12
 8001ca4:	2105      	movs	r1, #5
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f002 fce4 	bl	8004674 <HAL_RCC_ClockConfig>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d001      	beq.n	8001cb6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001cb2:	f000 f9c1 	bl	8002038 <Error_Handler>
  }
}
 8001cb6:	bf00      	nop
 8001cb8:	3750      	adds	r7, #80	; 0x50
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	40023800 	.word	0x40023800
 8001cc4:	40007000 	.word	0x40007000

08001cc8 <system_init>:

/* USER CODE BEGIN 4 */
void system_init(){
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(OUTPUT_Y0_GPIO_Port, OUTPUT_Y0_Pin, 0);
 8001ccc:	2200      	movs	r2, #0
 8001cce:	2120      	movs	r1, #32
 8001cd0:	480e      	ldr	r0, [pc, #56]	; (8001d0c <system_init+0x44>)
 8001cd2:	f001 f94f 	bl	8002f74 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUTPUT_Y1_GPIO_Port, OUTPUT_Y1_Pin, 0);
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	2140      	movs	r1, #64	; 0x40
 8001cda:	480c      	ldr	r0, [pc, #48]	; (8001d0c <system_init+0x44>)
 8001cdc:	f001 f94a 	bl	8002f74 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, 0);
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	2110      	movs	r1, #16
 8001ce4:	4809      	ldr	r0, [pc, #36]	; (8001d0c <system_init+0x44>)
 8001ce6:	f001 f945 	bl	8002f74 <HAL_GPIO_WritePin>
	  timer_init();
 8001cea:	f000 f9ab 	bl	8002044 <timer_init>
	  led7_init();
 8001cee:	f7ff fc15 	bl	800151c <led7_init>
	  button_init();
 8001cf2:	f7fe fc3b 	bl	800056c <button_init>
	  lcd_init();
 8001cf6:	f7ff fa4d 	bl	8001194 <lcd_init>
	  ds3231_init();
 8001cfa:	f7fe fcaf 	bl	800065c <ds3231_init>
	  uart_init_rs232();
 8001cfe:	f000 fbc7 	bl	8002490 <uart_init_rs232>
	  setTimer2(50);
 8001d02:	2032      	movs	r0, #50	; 0x32
 8001d04:	f000 f9a8 	bl	8002058 <setTimer2>

}
 8001d08:	bf00      	nop
 8001d0a:	bd80      	pop	{r7, pc}
 8001d0c:	40021000 	.word	0x40021000

08001d10 <updateTime>:
			led7_SetDigit(i%10, 3, 0);
		}
	}
}

void updateTime(){
 8001d10:	b580      	push	{r7, lr}
 8001d12:	af00      	add	r7, sp, #0
	ds3231_Write(ADDRESS_YEAR, 24);
 8001d14:	2118      	movs	r1, #24
 8001d16:	2006      	movs	r0, #6
 8001d18:	f7fe fce4 	bl	80006e4 <ds3231_Write>
	ds3231_Write(ADDRESS_MONTH, 11);
 8001d1c:	210b      	movs	r1, #11
 8001d1e:	2005      	movs	r0, #5
 8001d20:	f7fe fce0 	bl	80006e4 <ds3231_Write>
	ds3231_Write(ADDRESS_DATE, 13);
 8001d24:	210d      	movs	r1, #13
 8001d26:	2004      	movs	r0, #4
 8001d28:	f7fe fcdc 	bl	80006e4 <ds3231_Write>
	ds3231_Write(ADDRESS_DAY, 6);
 8001d2c:	2106      	movs	r1, #6
 8001d2e:	2003      	movs	r0, #3
 8001d30:	f7fe fcd8 	bl	80006e4 <ds3231_Write>
	ds3231_Write(ADDRESS_HOUR, 13);
 8001d34:	210d      	movs	r1, #13
 8001d36:	2002      	movs	r0, #2
 8001d38:	f7fe fcd4 	bl	80006e4 <ds3231_Write>
	ds3231_Write(ADDRESS_MIN, 16);
 8001d3c:	2110      	movs	r1, #16
 8001d3e:	2001      	movs	r0, #1
 8001d40:	f7fe fcd0 	bl	80006e4 <ds3231_Write>
	ds3231_Write(ADDRESS_SEC, 24);
 8001d44:	2118      	movs	r1, #24
 8001d46:	2000      	movs	r0, #0
 8001d48:	f7fe fccc 	bl	80006e4 <ds3231_Write>
}
 8001d4c:	bf00      	nop
 8001d4e:	bd80      	pop	{r7, pc}

08001d50 <displayTime>:
    if (button_count[7] == 1)
        return 1;
    else
        return 0;
}
void displayTime(){
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b084      	sub	sp, #16
 8001d54:	af04      	add	r7, sp, #16
	displayModeHeader();
 8001d56:	f7ff fccf 	bl	80016f8 <displayModeHeader>
	lcd_ShowIntNum(70, 100, ds3231_hours, 2, GREEN, BLACK, 24);
 8001d5a:	4b3e      	ldr	r3, [pc, #248]	; (8001e54 <displayTime+0x104>)
 8001d5c:	781b      	ldrb	r3, [r3, #0]
 8001d5e:	b29a      	uxth	r2, r3
 8001d60:	2318      	movs	r3, #24
 8001d62:	9302      	str	r3, [sp, #8]
 8001d64:	2300      	movs	r3, #0
 8001d66:	9301      	str	r3, [sp, #4]
 8001d68:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001d6c:	9300      	str	r3, [sp, #0]
 8001d6e:	2302      	movs	r3, #2
 8001d70:	2164      	movs	r1, #100	; 0x64
 8001d72:	2046      	movs	r0, #70	; 0x46
 8001d74:	f7ff f96c 	bl	8001050 <lcd_ShowIntNum>
	lcd_ShowIntNum(110, 100, ds3231_min, 2, GREEN, BLACK, 24);
 8001d78:	4b37      	ldr	r3, [pc, #220]	; (8001e58 <displayTime+0x108>)
 8001d7a:	781b      	ldrb	r3, [r3, #0]
 8001d7c:	b29a      	uxth	r2, r3
 8001d7e:	2318      	movs	r3, #24
 8001d80:	9302      	str	r3, [sp, #8]
 8001d82:	2300      	movs	r3, #0
 8001d84:	9301      	str	r3, [sp, #4]
 8001d86:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001d8a:	9300      	str	r3, [sp, #0]
 8001d8c:	2302      	movs	r3, #2
 8001d8e:	2164      	movs	r1, #100	; 0x64
 8001d90:	206e      	movs	r0, #110	; 0x6e
 8001d92:	f7ff f95d 	bl	8001050 <lcd_ShowIntNum>
	lcd_ShowIntNum(150, 100, ds3231_sec, 2, GREEN, BLACK, 24);
 8001d96:	4b31      	ldr	r3, [pc, #196]	; (8001e5c <displayTime+0x10c>)
 8001d98:	781b      	ldrb	r3, [r3, #0]
 8001d9a:	b29a      	uxth	r2, r3
 8001d9c:	2318      	movs	r3, #24
 8001d9e:	9302      	str	r3, [sp, #8]
 8001da0:	2300      	movs	r3, #0
 8001da2:	9301      	str	r3, [sp, #4]
 8001da4:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001da8:	9300      	str	r3, [sp, #0]
 8001daa:	2302      	movs	r3, #2
 8001dac:	2164      	movs	r1, #100	; 0x64
 8001dae:	2096      	movs	r0, #150	; 0x96
 8001db0:	f7ff f94e 	bl	8001050 <lcd_ShowIntNum>
	lcd_ShowIntNum(20, 130, ds3231_day, 2, YELLOW, BLACK, 24);
 8001db4:	4b2a      	ldr	r3, [pc, #168]	; (8001e60 <displayTime+0x110>)
 8001db6:	781b      	ldrb	r3, [r3, #0]
 8001db8:	b29a      	uxth	r2, r3
 8001dba:	2318      	movs	r3, #24
 8001dbc:	9302      	str	r3, [sp, #8]
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	9301      	str	r3, [sp, #4]
 8001dc2:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001dc6:	9300      	str	r3, [sp, #0]
 8001dc8:	2302      	movs	r3, #2
 8001dca:	2182      	movs	r1, #130	; 0x82
 8001dcc:	2014      	movs	r0, #20
 8001dce:	f7ff f93f 	bl	8001050 <lcd_ShowIntNum>
	lcd_ShowIntNum(70, 130, ds3231_date, 2, YELLOW, BLACK, 24);
 8001dd2:	4b24      	ldr	r3, [pc, #144]	; (8001e64 <displayTime+0x114>)
 8001dd4:	781b      	ldrb	r3, [r3, #0]
 8001dd6:	b29a      	uxth	r2, r3
 8001dd8:	2318      	movs	r3, #24
 8001dda:	9302      	str	r3, [sp, #8]
 8001ddc:	2300      	movs	r3, #0
 8001dde:	9301      	str	r3, [sp, #4]
 8001de0:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001de4:	9300      	str	r3, [sp, #0]
 8001de6:	2302      	movs	r3, #2
 8001de8:	2182      	movs	r1, #130	; 0x82
 8001dea:	2046      	movs	r0, #70	; 0x46
 8001dec:	f7ff f930 	bl	8001050 <lcd_ShowIntNum>
	lcd_ShowIntNum(110, 130, ds3231_month, 2, YELLOW, BLACK, 24);
 8001df0:	4b1d      	ldr	r3, [pc, #116]	; (8001e68 <displayTime+0x118>)
 8001df2:	781b      	ldrb	r3, [r3, #0]
 8001df4:	b29a      	uxth	r2, r3
 8001df6:	2318      	movs	r3, #24
 8001df8:	9302      	str	r3, [sp, #8]
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	9301      	str	r3, [sp, #4]
 8001dfe:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001e02:	9300      	str	r3, [sp, #0]
 8001e04:	2302      	movs	r3, #2
 8001e06:	2182      	movs	r1, #130	; 0x82
 8001e08:	206e      	movs	r0, #110	; 0x6e
 8001e0a:	f7ff f921 	bl	8001050 <lcd_ShowIntNum>
	lcd_ShowIntNum(150, 130, ds3231_year, 2, YELLOW, BLACK, 24);
 8001e0e:	4b17      	ldr	r3, [pc, #92]	; (8001e6c <displayTime+0x11c>)
 8001e10:	781b      	ldrb	r3, [r3, #0]
 8001e12:	b29a      	uxth	r2, r3
 8001e14:	2318      	movs	r3, #24
 8001e16:	9302      	str	r3, [sp, #8]
 8001e18:	2300      	movs	r3, #0
 8001e1a:	9301      	str	r3, [sp, #4]
 8001e1c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001e20:	9300      	str	r3, [sp, #0]
 8001e22:	2302      	movs	r3, #2
 8001e24:	2182      	movs	r1, #130	; 0x82
 8001e26:	2096      	movs	r0, #150	; 0x96
 8001e28:	f7ff f912 	bl	8001050 <lcd_ShowIntNum>


	  if (alarm_triggered) {
 8001e2c:	4b10      	ldr	r3, [pc, #64]	; (8001e70 <displayTime+0x120>)
 8001e2e:	781b      	ldrb	r3, [r3, #0]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d00c      	beq.n	8001e4e <displayTime+0xfe>
		  lcd_ShowStr(20, 160, "Alarm Ring Ring", RED, BLACK, 24, 1); // Display in red below other data
 8001e34:	2301      	movs	r3, #1
 8001e36:	9302      	str	r3, [sp, #8]
 8001e38:	2318      	movs	r3, #24
 8001e3a:	9301      	str	r3, [sp, #4]
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	9300      	str	r3, [sp, #0]
 8001e40:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001e44:	4a0b      	ldr	r2, [pc, #44]	; (8001e74 <displayTime+0x124>)
 8001e46:	21a0      	movs	r1, #160	; 0xa0
 8001e48:	2014      	movs	r0, #20
 8001e4a:	f7ff fb03 	bl	8001454 <lcd_ShowStr>
	  }
}
 8001e4e:	bf00      	nop
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}
 8001e54:	200000ab 	.word	0x200000ab
 8001e58:	200000ac 	.word	0x200000ac
 8001e5c:	200000ad 	.word	0x200000ad
 8001e60:	200000af 	.word	0x200000af
 8001e64:	200000ae 	.word	0x200000ae
 8001e68:	200000b0 	.word	0x200000b0
 8001e6c:	200000b1 	.word	0x200000b1
 8001e70:	20000170 	.word	0x20000170
 8001e74:	08007b94 	.word	0x08007b94

08001e78 <uart_handle>:

void uart_handle() {
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	af00      	add	r7, sp, #0
	if(uart_hour_flag == 1) {
 8001e7c:	4b5e      	ldr	r3, [pc, #376]	; (8001ff8 <uart_handle+0x180>)
 8001e7e:	781b      	ldrb	r3, [r3, #0]
 8001e80:	2b01      	cmp	r3, #1
 8001e82:	d109      	bne.n	8001e98 <uart_handle+0x20>
		uart_hour_flag = 0;
 8001e84:	4b5c      	ldr	r3, [pc, #368]	; (8001ff8 <uart_handle+0x180>)
 8001e86:	2200      	movs	r2, #0
 8001e88:	701a      	strb	r2, [r3, #0]
		uart_Rs232SendString("Hour(format h--e)\n");
 8001e8a:	485c      	ldr	r0, [pc, #368]	; (8001ffc <uart_handle+0x184>)
 8001e8c:	f000 fb0e 	bl	80024ac <uart_Rs232SendString>
		setTimer3(10000);
 8001e90:	f242 7010 	movw	r0, #10000	; 0x2710
 8001e94:	f000 f8fc 	bl	8002090 <setTimer3>
	}
	if(flag_timer3) {
 8001e98:	4b59      	ldr	r3, [pc, #356]	; (8002000 <uart_handle+0x188>)
 8001e9a:	881b      	ldrh	r3, [r3, #0]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d012      	beq.n	8001ec6 <uart_handle+0x4e>
		uart_hour_flag = 1;
 8001ea0:	4b55      	ldr	r3, [pc, #340]	; (8001ff8 <uart_handle+0x180>)
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	701a      	strb	r2, [r3, #0]
		count_request_uart += 1;
 8001ea6:	4b57      	ldr	r3, [pc, #348]	; (8002004 <uart_handle+0x18c>)
 8001ea8:	781b      	ldrb	r3, [r3, #0]
 8001eaa:	3301      	adds	r3, #1
 8001eac:	b2da      	uxtb	r2, r3
 8001eae:	4b55      	ldr	r3, [pc, #340]	; (8002004 <uart_handle+0x18c>)
 8001eb0:	701a      	strb	r2, [r3, #0]
		count_char = 0;
 8001eb2:	4b55      	ldr	r3, [pc, #340]	; (8002008 <uart_handle+0x190>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	701a      	strb	r2, [r3, #0]
		curr_index = index_buffer;
 8001eb8:	4b54      	ldr	r3, [pc, #336]	; (800200c <uart_handle+0x194>)
 8001eba:	781a      	ldrb	r2, [r3, #0]
 8001ebc:	4b54      	ldr	r3, [pc, #336]	; (8002010 <uart_handle+0x198>)
 8001ebe:	701a      	strb	r2, [r3, #0]
		flag_timer3 = 0;
 8001ec0:	4b4f      	ldr	r3, [pc, #316]	; (8002000 <uart_handle+0x188>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	801a      	strh	r2, [r3, #0]
	}
	if(count_request_uart > 2) {
 8001ec6:	4b4f      	ldr	r3, [pc, #316]	; (8002004 <uart_handle+0x18c>)
 8001ec8:	781b      	ldrb	r3, [r3, #0]
 8001eca:	2b02      	cmp	r3, #2
 8001ecc:	d913      	bls.n	8001ef6 <uart_handle+0x7e>
		count_request_uart = 0;
 8001ece:	4b4d      	ldr	r3, [pc, #308]	; (8002004 <uart_handle+0x18c>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	701a      	strb	r2, [r3, #0]
		uart_Rs232SendString("No response\n");
 8001ed4:	484f      	ldr	r0, [pc, #316]	; (8002014 <uart_handle+0x19c>)
 8001ed6:	f000 fae9 	bl	80024ac <uart_Rs232SendString>
		currentMode = DISPLAY_MODE;
 8001eda:	4b4f      	ldr	r3, [pc, #316]	; (8002018 <uart_handle+0x1a0>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	701a      	strb	r2, [r3, #0]
		count_char = 0;
 8001ee0:	4b49      	ldr	r3, [pc, #292]	; (8002008 <uart_handle+0x190>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	701a      	strb	r2, [r3, #0]
		curr_index = index_buffer;
 8001ee6:	4b49      	ldr	r3, [pc, #292]	; (800200c <uart_handle+0x194>)
 8001ee8:	781a      	ldrb	r2, [r3, #0]
 8001eea:	4b49      	ldr	r3, [pc, #292]	; (8002010 <uart_handle+0x198>)
 8001eec:	701a      	strb	r2, [r3, #0]
		lcd_Clear(BLACK);
 8001eee:	2000      	movs	r0, #0
 8001ef0:	f7fe ff3a 	bl	8000d68 <lcd_Clear>
		return;
 8001ef4:	e07e      	b.n	8001ff4 <uart_handle+0x17c>
	}
	if(buffer_flag == 1 && count_char == 4) {
 8001ef6:	4b49      	ldr	r3, [pc, #292]	; (800201c <uart_handle+0x1a4>)
 8001ef8:	781b      	ldrb	r3, [r3, #0]
 8001efa:	2b01      	cmp	r3, #1
 8001efc:	d17a      	bne.n	8001ff4 <uart_handle+0x17c>
 8001efe:	4b42      	ldr	r3, [pc, #264]	; (8002008 <uart_handle+0x190>)
 8001f00:	781b      	ldrb	r3, [r3, #0]
 8001f02:	2b04      	cmp	r3, #4
 8001f04:	d176      	bne.n	8001ff4 <uart_handle+0x17c>
		if(buffer[curr_index] == 'h' && buffer[curr_index+3] == 'e') {
 8001f06:	4b42      	ldr	r3, [pc, #264]	; (8002010 <uart_handle+0x198>)
 8001f08:	781b      	ldrb	r3, [r3, #0]
 8001f0a:	461a      	mov	r2, r3
 8001f0c:	4b44      	ldr	r3, [pc, #272]	; (8002020 <uart_handle+0x1a8>)
 8001f0e:	5c9b      	ldrb	r3, [r3, r2]
 8001f10:	2b68      	cmp	r3, #104	; 0x68
 8001f12:	d15f      	bne.n	8001fd4 <uart_handle+0x15c>
 8001f14:	4b3e      	ldr	r3, [pc, #248]	; (8002010 <uart_handle+0x198>)
 8001f16:	781b      	ldrb	r3, [r3, #0]
 8001f18:	3303      	adds	r3, #3
 8001f1a:	4a41      	ldr	r2, [pc, #260]	; (8002020 <uart_handle+0x1a8>)
 8001f1c:	5cd3      	ldrb	r3, [r2, r3]
 8001f1e:	2b65      	cmp	r3, #101	; 0x65
 8001f20:	d158      	bne.n	8001fd4 <uart_handle+0x15c>
			if(buffer[curr_index+1] >= '0' && buffer[curr_index+1] <= '9' && buffer[curr_index+2] >= '0' && buffer[curr_index+2] <= '9') {
 8001f22:	4b3b      	ldr	r3, [pc, #236]	; (8002010 <uart_handle+0x198>)
 8001f24:	781b      	ldrb	r3, [r3, #0]
 8001f26:	3301      	adds	r3, #1
 8001f28:	4a3d      	ldr	r2, [pc, #244]	; (8002020 <uart_handle+0x1a8>)
 8001f2a:	5cd3      	ldrb	r3, [r2, r3]
 8001f2c:	2b2f      	cmp	r3, #47	; 0x2f
 8001f2e:	d949      	bls.n	8001fc4 <uart_handle+0x14c>
 8001f30:	4b37      	ldr	r3, [pc, #220]	; (8002010 <uart_handle+0x198>)
 8001f32:	781b      	ldrb	r3, [r3, #0]
 8001f34:	3301      	adds	r3, #1
 8001f36:	4a3a      	ldr	r2, [pc, #232]	; (8002020 <uart_handle+0x1a8>)
 8001f38:	5cd3      	ldrb	r3, [r2, r3]
 8001f3a:	2b39      	cmp	r3, #57	; 0x39
 8001f3c:	d842      	bhi.n	8001fc4 <uart_handle+0x14c>
 8001f3e:	4b34      	ldr	r3, [pc, #208]	; (8002010 <uart_handle+0x198>)
 8001f40:	781b      	ldrb	r3, [r3, #0]
 8001f42:	3302      	adds	r3, #2
 8001f44:	4a36      	ldr	r2, [pc, #216]	; (8002020 <uart_handle+0x1a8>)
 8001f46:	5cd3      	ldrb	r3, [r2, r3]
 8001f48:	2b2f      	cmp	r3, #47	; 0x2f
 8001f4a:	d93b      	bls.n	8001fc4 <uart_handle+0x14c>
 8001f4c:	4b30      	ldr	r3, [pc, #192]	; (8002010 <uart_handle+0x198>)
 8001f4e:	781b      	ldrb	r3, [r3, #0]
 8001f50:	3302      	adds	r3, #2
 8001f52:	4a33      	ldr	r2, [pc, #204]	; (8002020 <uart_handle+0x1a8>)
 8001f54:	5cd3      	ldrb	r3, [r2, r3]
 8001f56:	2b39      	cmp	r3, #57	; 0x39
 8001f58:	d834      	bhi.n	8001fc4 <uart_handle+0x14c>
				uart_hour = (buffer[curr_index+1]-'0')*10 + (buffer[curr_index+2]-'0');
 8001f5a:	4b2d      	ldr	r3, [pc, #180]	; (8002010 <uart_handle+0x198>)
 8001f5c:	781b      	ldrb	r3, [r3, #0]
 8001f5e:	3301      	adds	r3, #1
 8001f60:	4a2f      	ldr	r2, [pc, #188]	; (8002020 <uart_handle+0x1a8>)
 8001f62:	5cd3      	ldrb	r3, [r2, r3]
 8001f64:	461a      	mov	r2, r3
 8001f66:	0092      	lsls	r2, r2, #2
 8001f68:	4413      	add	r3, r2
 8001f6a:	005b      	lsls	r3, r3, #1
 8001f6c:	b2da      	uxtb	r2, r3
 8001f6e:	4b28      	ldr	r3, [pc, #160]	; (8002010 <uart_handle+0x198>)
 8001f70:	781b      	ldrb	r3, [r3, #0]
 8001f72:	3302      	adds	r3, #2
 8001f74:	492a      	ldr	r1, [pc, #168]	; (8002020 <uart_handle+0x1a8>)
 8001f76:	5ccb      	ldrb	r3, [r1, r3]
 8001f78:	4413      	add	r3, r2
 8001f7a:	b2db      	uxtb	r3, r3
 8001f7c:	3b10      	subs	r3, #16
 8001f7e:	b2da      	uxtb	r2, r3
 8001f80:	4b28      	ldr	r3, [pc, #160]	; (8002024 <uart_handle+0x1ac>)
 8001f82:	701a      	strb	r2, [r3, #0]
				if(uart_hour >= 0 && uart_hour < 24) {
 8001f84:	4b27      	ldr	r3, [pc, #156]	; (8002024 <uart_handle+0x1ac>)
 8001f86:	781b      	ldrb	r3, [r3, #0]
 8001f88:	2b17      	cmp	r3, #23
 8001f8a:	d814      	bhi.n	8001fb6 <uart_handle+0x13e>
					ds3231_Write(ADDRESS_HOUR, uart_hour);
 8001f8c:	4b25      	ldr	r3, [pc, #148]	; (8002024 <uart_handle+0x1ac>)
 8001f8e:	781b      	ldrb	r3, [r3, #0]
 8001f90:	4619      	mov	r1, r3
 8001f92:	2002      	movs	r0, #2
 8001f94:	f7fe fba6 	bl	80006e4 <ds3231_Write>
					uart_Rs232SendString("Hour update successfully\n");
 8001f98:	4823      	ldr	r0, [pc, #140]	; (8002028 <uart_handle+0x1b0>)
 8001f9a:	f000 fa87 	bl	80024ac <uart_Rs232SendString>
					uart_Rs232SendNum(uart_hour);
 8001f9e:	4b21      	ldr	r3, [pc, #132]	; (8002024 <uart_handle+0x1ac>)
 8001fa0:	781b      	ldrb	r3, [r3, #0]
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f000 fa9c 	bl	80024e0 <uart_Rs232SendNum>
					currentMode = DISPLAY_MODE;
 8001fa8:	4b1b      	ldr	r3, [pc, #108]	; (8002018 <uart_handle+0x1a0>)
 8001faa:	2200      	movs	r2, #0
 8001fac:	701a      	strb	r2, [r3, #0]
					lcd_Clear(BLACK);
 8001fae:	2000      	movs	r0, #0
 8001fb0:	f7fe feda 	bl	8000d68 <lcd_Clear>
				if(uart_hour >= 0 && uart_hour < 24) {
 8001fb4:	e00d      	b.n	8001fd2 <uart_handle+0x15a>
				}
				else {
					// Print data out of range
					uart_Rs232SendString("Data out of range\n");
 8001fb6:	481d      	ldr	r0, [pc, #116]	; (800202c <uart_handle+0x1b4>)
 8001fb8:	f000 fa78 	bl	80024ac <uart_Rs232SendString>
					count_request_uart = 0;
 8001fbc:	4b11      	ldr	r3, [pc, #68]	; (8002004 <uart_handle+0x18c>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	701a      	strb	r2, [r3, #0]
				if(uart_hour >= 0 && uart_hour < 24) {
 8001fc2:	e006      	b.n	8001fd2 <uart_handle+0x15a>
				}
			}
			else {
				// Print Error
				uart_Rs232SendString("Error\n");
 8001fc4:	481a      	ldr	r0, [pc, #104]	; (8002030 <uart_handle+0x1b8>)
 8001fc6:	f000 fa71 	bl	80024ac <uart_Rs232SendString>
				count_request_uart = 0;
 8001fca:	4b0e      	ldr	r3, [pc, #56]	; (8002004 <uart_handle+0x18c>)
 8001fcc:	2200      	movs	r2, #0
 8001fce:	701a      	strb	r2, [r3, #0]
			if(buffer[curr_index+1] >= '0' && buffer[curr_index+1] <= '9' && buffer[curr_index+2] >= '0' && buffer[curr_index+2] <= '9') {
 8001fd0:	e006      	b.n	8001fe0 <uart_handle+0x168>
 8001fd2:	e005      	b.n	8001fe0 <uart_handle+0x168>
			}
		}
		else {
			// Print Wrong format
			uart_Rs232SendString("Wrong format\n");
 8001fd4:	4817      	ldr	r0, [pc, #92]	; (8002034 <uart_handle+0x1bc>)
 8001fd6:	f000 fa69 	bl	80024ac <uart_Rs232SendString>
			count_request_uart = 0;
 8001fda:	4b0a      	ldr	r3, [pc, #40]	; (8002004 <uart_handle+0x18c>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	701a      	strb	r2, [r3, #0]
		}

		buffer_flag = 0;
 8001fe0:	4b0e      	ldr	r3, [pc, #56]	; (800201c <uart_handle+0x1a4>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	701a      	strb	r2, [r3, #0]
		curr_index = index_buffer;
 8001fe6:	4b09      	ldr	r3, [pc, #36]	; (800200c <uart_handle+0x194>)
 8001fe8:	781a      	ldrb	r2, [r3, #0]
 8001fea:	4b09      	ldr	r3, [pc, #36]	; (8002010 <uart_handle+0x198>)
 8001fec:	701a      	strb	r2, [r3, #0]
		count_char = 0;
 8001fee:	4b06      	ldr	r3, [pc, #24]	; (8002008 <uart_handle+0x190>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	701a      	strb	r2, [r3, #0]
//		uart_Rs232SendNum(ds3231_min);
//		uart_Rs232SendString(":");
//		uart_Rs232SendNum(ds3231_sec);
//		uart_Rs232SendString("\n");
//	}
}
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	20000171 	.word	0x20000171
 8001ffc:	08007ba4 	.word	0x08007ba4
 8002000:	2000017e 	.word	0x2000017e
 8002004:	20000173 	.word	0x20000173
 8002008:	200002ae 	.word	0x200002ae
 800200c:	200002aa 	.word	0x200002aa
 8002010:	200002ab 	.word	0x200002ab
 8002014:	08007bb8 	.word	0x08007bb8
 8002018:	20000168 	.word	0x20000168
 800201c:	200002ac 	.word	0x200002ac
 8002020:	2000028c 	.word	0x2000028c
 8002024:	20000172 	.word	0x20000172
 8002028:	08007bc8 	.word	0x08007bc8
 800202c:	08007be4 	.word	0x08007be4
 8002030:	08007bf8 	.word	0x08007bf8
 8002034:	08007c00 	.word	0x08007c00

08002038 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002038:	b480      	push	{r7}
 800203a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800203c:	b672      	cpsid	i
}
 800203e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002040:	e7fe      	b.n	8002040 <Error_Handler+0x8>
	...

08002044 <timer_init>:

uint16_t flag_timer3 = 0;
uint16_t timer3_counter = 0;
uint16_t timer3_MUL = 0;

void timer_init(){
 8002044:	b580      	push	{r7, lr}
 8002046:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 8002048:	4802      	ldr	r0, [pc, #8]	; (8002054 <timer_init+0x10>)
 800204a:	f003 fb6f 	bl	800572c <HAL_TIM_Base_Start_IT>
}
 800204e:	bf00      	nop
 8002050:	bd80      	pop	{r7, pc}
 8002052:	bf00      	nop
 8002054:	200001e0 	.word	0x200001e0

08002058 <setTimer2>:

void setTimer2(uint16_t duration){
 8002058:	b480      	push	{r7}
 800205a:	b083      	sub	sp, #12
 800205c:	af00      	add	r7, sp, #0
 800205e:	4603      	mov	r3, r0
 8002060:	80fb      	strh	r3, [r7, #6]
	timer2_MUL = duration/TIMER_CYCLE_2;
 8002062:	4a08      	ldr	r2, [pc, #32]	; (8002084 <setTimer2+0x2c>)
 8002064:	88fb      	ldrh	r3, [r7, #6]
 8002066:	8013      	strh	r3, [r2, #0]
	timer2_counter = timer2_MUL;
 8002068:	4b06      	ldr	r3, [pc, #24]	; (8002084 <setTimer2+0x2c>)
 800206a:	881a      	ldrh	r2, [r3, #0]
 800206c:	4b06      	ldr	r3, [pc, #24]	; (8002088 <setTimer2+0x30>)
 800206e:	801a      	strh	r2, [r3, #0]
	flag_timer2 = 0;
 8002070:	4b06      	ldr	r3, [pc, #24]	; (800208c <setTimer2+0x34>)
 8002072:	2200      	movs	r2, #0
 8002074:	801a      	strh	r2, [r3, #0]
}
 8002076:	bf00      	nop
 8002078:	370c      	adds	r7, #12
 800207a:	46bd      	mov	sp, r7
 800207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002080:	4770      	bx	lr
 8002082:	bf00      	nop
 8002084:	2000017c 	.word	0x2000017c
 8002088:	2000017a 	.word	0x2000017a
 800208c:	20000178 	.word	0x20000178

08002090 <setTimer3>:

void setTimer3(uint16_t duration){
 8002090:	b480      	push	{r7}
 8002092:	b083      	sub	sp, #12
 8002094:	af00      	add	r7, sp, #0
 8002096:	4603      	mov	r3, r0
 8002098:	80fb      	strh	r3, [r7, #6]
	timer3_MUL = duration/TIMER_CYCLE_3;
 800209a:	4a08      	ldr	r2, [pc, #32]	; (80020bc <setTimer3+0x2c>)
 800209c:	88fb      	ldrh	r3, [r7, #6]
 800209e:	8013      	strh	r3, [r2, #0]
	timer3_counter = timer3_MUL;
 80020a0:	4b06      	ldr	r3, [pc, #24]	; (80020bc <setTimer3+0x2c>)
 80020a2:	881a      	ldrh	r2, [r3, #0]
 80020a4:	4b06      	ldr	r3, [pc, #24]	; (80020c0 <setTimer3+0x30>)
 80020a6:	801a      	strh	r2, [r3, #0]
	flag_timer3 = 0;
 80020a8:	4b06      	ldr	r3, [pc, #24]	; (80020c4 <setTimer3+0x34>)
 80020aa:	2200      	movs	r2, #0
 80020ac:	801a      	strh	r2, [r3, #0]
}
 80020ae:	bf00      	nop
 80020b0:	370c      	adds	r7, #12
 80020b2:	46bd      	mov	sp, r7
 80020b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b8:	4770      	bx	lr
 80020ba:	bf00      	nop
 80020bc:	20000182 	.word	0x20000182
 80020c0:	20000180 	.word	0x20000180
 80020c4:	2000017e 	.word	0x2000017e

080020c8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b082      	sub	sp, #8
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020d8:	d12b      	bne.n	8002132 <HAL_TIM_PeriodElapsedCallback+0x6a>
		if(timer2_counter > 0){
 80020da:	4b18      	ldr	r3, [pc, #96]	; (800213c <HAL_TIM_PeriodElapsedCallback+0x74>)
 80020dc:	881b      	ldrh	r3, [r3, #0]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d010      	beq.n	8002104 <HAL_TIM_PeriodElapsedCallback+0x3c>
			timer2_counter--;
 80020e2:	4b16      	ldr	r3, [pc, #88]	; (800213c <HAL_TIM_PeriodElapsedCallback+0x74>)
 80020e4:	881b      	ldrh	r3, [r3, #0]
 80020e6:	3b01      	subs	r3, #1
 80020e8:	b29a      	uxth	r2, r3
 80020ea:	4b14      	ldr	r3, [pc, #80]	; (800213c <HAL_TIM_PeriodElapsedCallback+0x74>)
 80020ec:	801a      	strh	r2, [r3, #0]
			if(timer2_counter == 0) {
 80020ee:	4b13      	ldr	r3, [pc, #76]	; (800213c <HAL_TIM_PeriodElapsedCallback+0x74>)
 80020f0:	881b      	ldrh	r3, [r3, #0]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d106      	bne.n	8002104 <HAL_TIM_PeriodElapsedCallback+0x3c>
				flag_timer2 = 1;
 80020f6:	4b12      	ldr	r3, [pc, #72]	; (8002140 <HAL_TIM_PeriodElapsedCallback+0x78>)
 80020f8:	2201      	movs	r2, #1
 80020fa:	801a      	strh	r2, [r3, #0]
				timer2_counter = timer2_MUL;
 80020fc:	4b11      	ldr	r3, [pc, #68]	; (8002144 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80020fe:	881a      	ldrh	r2, [r3, #0]
 8002100:	4b0e      	ldr	r3, [pc, #56]	; (800213c <HAL_TIM_PeriodElapsedCallback+0x74>)
 8002102:	801a      	strh	r2, [r3, #0]
			}
		}

		if(timer3_counter > 0){
 8002104:	4b10      	ldr	r3, [pc, #64]	; (8002148 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8002106:	881b      	ldrh	r3, [r3, #0]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d010      	beq.n	800212e <HAL_TIM_PeriodElapsedCallback+0x66>
			timer3_counter--;
 800210c:	4b0e      	ldr	r3, [pc, #56]	; (8002148 <HAL_TIM_PeriodElapsedCallback+0x80>)
 800210e:	881b      	ldrh	r3, [r3, #0]
 8002110:	3b01      	subs	r3, #1
 8002112:	b29a      	uxth	r2, r3
 8002114:	4b0c      	ldr	r3, [pc, #48]	; (8002148 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8002116:	801a      	strh	r2, [r3, #0]
			if(timer3_counter == 0) {
 8002118:	4b0b      	ldr	r3, [pc, #44]	; (8002148 <HAL_TIM_PeriodElapsedCallback+0x80>)
 800211a:	881b      	ldrh	r3, [r3, #0]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d106      	bne.n	800212e <HAL_TIM_PeriodElapsedCallback+0x66>
				flag_timer3 = 1;
 8002120:	4b0a      	ldr	r3, [pc, #40]	; (800214c <HAL_TIM_PeriodElapsedCallback+0x84>)
 8002122:	2201      	movs	r2, #1
 8002124:	801a      	strh	r2, [r3, #0]
				timer3_counter = timer3_MUL;
 8002126:	4b0a      	ldr	r3, [pc, #40]	; (8002150 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8002128:	881a      	ldrh	r2, [r3, #0]
 800212a:	4b07      	ldr	r3, [pc, #28]	; (8002148 <HAL_TIM_PeriodElapsedCallback+0x80>)
 800212c:	801a      	strh	r2, [r3, #0]
			}
		}
		led7_Scan();
 800212e:	f7ff fa01 	bl	8001534 <led7_Scan>
	}
}
 8002132:	bf00      	nop
 8002134:	3708      	adds	r7, #8
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}
 800213a:	bf00      	nop
 800213c:	2000017a 	.word	0x2000017a
 8002140:	20000178 	.word	0x20000178
 8002144:	2000017c 	.word	0x2000017c
 8002148:	20000180 	.word	0x20000180
 800214c:	2000017e 	.word	0x2000017e
 8002150:	20000182 	.word	0x20000182

08002154 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002158:	4b17      	ldr	r3, [pc, #92]	; (80021b8 <MX_SPI1_Init+0x64>)
 800215a:	4a18      	ldr	r2, [pc, #96]	; (80021bc <MX_SPI1_Init+0x68>)
 800215c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800215e:	4b16      	ldr	r3, [pc, #88]	; (80021b8 <MX_SPI1_Init+0x64>)
 8002160:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002164:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002166:	4b14      	ldr	r3, [pc, #80]	; (80021b8 <MX_SPI1_Init+0x64>)
 8002168:	2200      	movs	r2, #0
 800216a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800216c:	4b12      	ldr	r3, [pc, #72]	; (80021b8 <MX_SPI1_Init+0x64>)
 800216e:	2200      	movs	r2, #0
 8002170:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002172:	4b11      	ldr	r3, [pc, #68]	; (80021b8 <MX_SPI1_Init+0x64>)
 8002174:	2200      	movs	r2, #0
 8002176:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002178:	4b0f      	ldr	r3, [pc, #60]	; (80021b8 <MX_SPI1_Init+0x64>)
 800217a:	2200      	movs	r2, #0
 800217c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800217e:	4b0e      	ldr	r3, [pc, #56]	; (80021b8 <MX_SPI1_Init+0x64>)
 8002180:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002184:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002186:	4b0c      	ldr	r3, [pc, #48]	; (80021b8 <MX_SPI1_Init+0x64>)
 8002188:	2200      	movs	r2, #0
 800218a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800218c:	4b0a      	ldr	r3, [pc, #40]	; (80021b8 <MX_SPI1_Init+0x64>)
 800218e:	2200      	movs	r2, #0
 8002190:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002192:	4b09      	ldr	r3, [pc, #36]	; (80021b8 <MX_SPI1_Init+0x64>)
 8002194:	2200      	movs	r2, #0
 8002196:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002198:	4b07      	ldr	r3, [pc, #28]	; (80021b8 <MX_SPI1_Init+0x64>)
 800219a:	2200      	movs	r2, #0
 800219c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800219e:	4b06      	ldr	r3, [pc, #24]	; (80021b8 <MX_SPI1_Init+0x64>)
 80021a0:	220a      	movs	r2, #10
 80021a2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80021a4:	4804      	ldr	r0, [pc, #16]	; (80021b8 <MX_SPI1_Init+0x64>)
 80021a6:	f002 fc85 	bl	8004ab4 <HAL_SPI_Init>
 80021aa:	4603      	mov	r3, r0
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d001      	beq.n	80021b4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80021b0:	f7ff ff42 	bl	8002038 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80021b4:	bf00      	nop
 80021b6:	bd80      	pop	{r7, pc}
 80021b8:	20000184 	.word	0x20000184
 80021bc:	40013000 	.word	0x40013000

080021c0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b08a      	sub	sp, #40	; 0x28
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021c8:	f107 0314 	add.w	r3, r7, #20
 80021cc:	2200      	movs	r2, #0
 80021ce:	601a      	str	r2, [r3, #0]
 80021d0:	605a      	str	r2, [r3, #4]
 80021d2:	609a      	str	r2, [r3, #8]
 80021d4:	60da      	str	r2, [r3, #12]
 80021d6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a19      	ldr	r2, [pc, #100]	; (8002244 <HAL_SPI_MspInit+0x84>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d12b      	bne.n	800223a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80021e2:	2300      	movs	r3, #0
 80021e4:	613b      	str	r3, [r7, #16]
 80021e6:	4b18      	ldr	r3, [pc, #96]	; (8002248 <HAL_SPI_MspInit+0x88>)
 80021e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ea:	4a17      	ldr	r2, [pc, #92]	; (8002248 <HAL_SPI_MspInit+0x88>)
 80021ec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80021f0:	6453      	str	r3, [r2, #68]	; 0x44
 80021f2:	4b15      	ldr	r3, [pc, #84]	; (8002248 <HAL_SPI_MspInit+0x88>)
 80021f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021fa:	613b      	str	r3, [r7, #16]
 80021fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021fe:	2300      	movs	r3, #0
 8002200:	60fb      	str	r3, [r7, #12]
 8002202:	4b11      	ldr	r3, [pc, #68]	; (8002248 <HAL_SPI_MspInit+0x88>)
 8002204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002206:	4a10      	ldr	r2, [pc, #64]	; (8002248 <HAL_SPI_MspInit+0x88>)
 8002208:	f043 0302 	orr.w	r3, r3, #2
 800220c:	6313      	str	r3, [r2, #48]	; 0x30
 800220e:	4b0e      	ldr	r3, [pc, #56]	; (8002248 <HAL_SPI_MspInit+0x88>)
 8002210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002212:	f003 0302 	and.w	r3, r3, #2
 8002216:	60fb      	str	r3, [r7, #12]
 8002218:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800221a:	2338      	movs	r3, #56	; 0x38
 800221c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800221e:	2302      	movs	r3, #2
 8002220:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002222:	2300      	movs	r3, #0
 8002224:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002226:	2303      	movs	r3, #3
 8002228:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800222a:	2305      	movs	r3, #5
 800222c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800222e:	f107 0314 	add.w	r3, r7, #20
 8002232:	4619      	mov	r1, r3
 8002234:	4805      	ldr	r0, [pc, #20]	; (800224c <HAL_SPI_MspInit+0x8c>)
 8002236:	f000 fd01 	bl	8002c3c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800223a:	bf00      	nop
 800223c:	3728      	adds	r7, #40	; 0x28
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	40013000 	.word	0x40013000
 8002248:	40023800 	.word	0x40023800
 800224c:	40020400 	.word	0x40020400

08002250 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002250:	b480      	push	{r7}
 8002252:	b083      	sub	sp, #12
 8002254:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002256:	2300      	movs	r3, #0
 8002258:	607b      	str	r3, [r7, #4]
 800225a:	4b10      	ldr	r3, [pc, #64]	; (800229c <HAL_MspInit+0x4c>)
 800225c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800225e:	4a0f      	ldr	r2, [pc, #60]	; (800229c <HAL_MspInit+0x4c>)
 8002260:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002264:	6453      	str	r3, [r2, #68]	; 0x44
 8002266:	4b0d      	ldr	r3, [pc, #52]	; (800229c <HAL_MspInit+0x4c>)
 8002268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800226a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800226e:	607b      	str	r3, [r7, #4]
 8002270:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002272:	2300      	movs	r3, #0
 8002274:	603b      	str	r3, [r7, #0]
 8002276:	4b09      	ldr	r3, [pc, #36]	; (800229c <HAL_MspInit+0x4c>)
 8002278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800227a:	4a08      	ldr	r2, [pc, #32]	; (800229c <HAL_MspInit+0x4c>)
 800227c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002280:	6413      	str	r3, [r2, #64]	; 0x40
 8002282:	4b06      	ldr	r3, [pc, #24]	; (800229c <HAL_MspInit+0x4c>)
 8002284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002286:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800228a:	603b      	str	r3, [r7, #0]
 800228c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800228e:	bf00      	nop
 8002290:	370c      	adds	r7, #12
 8002292:	46bd      	mov	sp, r7
 8002294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002298:	4770      	bx	lr
 800229a:	bf00      	nop
 800229c:	40023800 	.word	0x40023800

080022a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022a0:	b480      	push	{r7}
 80022a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80022a4:	e7fe      	b.n	80022a4 <NMI_Handler+0x4>

080022a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022a6:	b480      	push	{r7}
 80022a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022aa:	e7fe      	b.n	80022aa <HardFault_Handler+0x4>

080022ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022ac:	b480      	push	{r7}
 80022ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022b0:	e7fe      	b.n	80022b0 <MemManage_Handler+0x4>

080022b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022b2:	b480      	push	{r7}
 80022b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022b6:	e7fe      	b.n	80022b6 <BusFault_Handler+0x4>

080022b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022b8:	b480      	push	{r7}
 80022ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022bc:	e7fe      	b.n	80022bc <UsageFault_Handler+0x4>

080022be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80022be:	b480      	push	{r7}
 80022c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80022c2:	bf00      	nop
 80022c4:	46bd      	mov	sp, r7
 80022c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ca:	4770      	bx	lr

080022cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022cc:	b480      	push	{r7}
 80022ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022d0:	bf00      	nop
 80022d2:	46bd      	mov	sp, r7
 80022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d8:	4770      	bx	lr

080022da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80022da:	b480      	push	{r7}
 80022dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80022de:	bf00      	nop
 80022e0:	46bd      	mov	sp, r7
 80022e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e6:	4770      	bx	lr

080022e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80022ec:	f000 fabe 	bl	800286c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80022f0:	bf00      	nop
 80022f2:	bd80      	pop	{r7, pc}

080022f4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80022f8:	4802      	ldr	r0, [pc, #8]	; (8002304 <TIM2_IRQHandler+0x10>)
 80022fa:	f003 fa87 	bl	800580c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80022fe:	bf00      	nop
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	200001e0 	.word	0x200001e0

08002308 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800230c:	4802      	ldr	r0, [pc, #8]	; (8002318 <USART1_IRQHandler+0x10>)
 800230e:	f003 ff4f 	bl	80061b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002312:	bf00      	nop
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	200002b0 	.word	0x200002b0

0800231c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b086      	sub	sp, #24
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002324:	4a14      	ldr	r2, [pc, #80]	; (8002378 <_sbrk+0x5c>)
 8002326:	4b15      	ldr	r3, [pc, #84]	; (800237c <_sbrk+0x60>)
 8002328:	1ad3      	subs	r3, r2, r3
 800232a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002330:	4b13      	ldr	r3, [pc, #76]	; (8002380 <_sbrk+0x64>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d102      	bne.n	800233e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002338:	4b11      	ldr	r3, [pc, #68]	; (8002380 <_sbrk+0x64>)
 800233a:	4a12      	ldr	r2, [pc, #72]	; (8002384 <_sbrk+0x68>)
 800233c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800233e:	4b10      	ldr	r3, [pc, #64]	; (8002380 <_sbrk+0x64>)
 8002340:	681a      	ldr	r2, [r3, #0]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	4413      	add	r3, r2
 8002346:	693a      	ldr	r2, [r7, #16]
 8002348:	429a      	cmp	r2, r3
 800234a:	d207      	bcs.n	800235c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800234c:	f004 ff8c 	bl	8007268 <__errno>
 8002350:	4603      	mov	r3, r0
 8002352:	220c      	movs	r2, #12
 8002354:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002356:	f04f 33ff 	mov.w	r3, #4294967295
 800235a:	e009      	b.n	8002370 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800235c:	4b08      	ldr	r3, [pc, #32]	; (8002380 <_sbrk+0x64>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002362:	4b07      	ldr	r3, [pc, #28]	; (8002380 <_sbrk+0x64>)
 8002364:	681a      	ldr	r2, [r3, #0]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	4413      	add	r3, r2
 800236a:	4a05      	ldr	r2, [pc, #20]	; (8002380 <_sbrk+0x64>)
 800236c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800236e:	68fb      	ldr	r3, [r7, #12]
}
 8002370:	4618      	mov	r0, r3
 8002372:	3718      	adds	r7, #24
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}
 8002378:	20020000 	.word	0x20020000
 800237c:	00000400 	.word	0x00000400
 8002380:	200001dc 	.word	0x200001dc
 8002384:	20000440 	.word	0x20000440

08002388 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002388:	b480      	push	{r7}
 800238a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800238c:	4b06      	ldr	r3, [pc, #24]	; (80023a8 <SystemInit+0x20>)
 800238e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002392:	4a05      	ldr	r2, [pc, #20]	; (80023a8 <SystemInit+0x20>)
 8002394:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002398:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800239c:	bf00      	nop
 800239e:	46bd      	mov	sp, r7
 80023a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a4:	4770      	bx	lr
 80023a6:	bf00      	nop
 80023a8:	e000ed00 	.word	0xe000ed00

080023ac <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b086      	sub	sp, #24
 80023b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80023b2:	f107 0308 	add.w	r3, r7, #8
 80023b6:	2200      	movs	r2, #0
 80023b8:	601a      	str	r2, [r3, #0]
 80023ba:	605a      	str	r2, [r3, #4]
 80023bc:	609a      	str	r2, [r3, #8]
 80023be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023c0:	463b      	mov	r3, r7
 80023c2:	2200      	movs	r2, #0
 80023c4:	601a      	str	r2, [r3, #0]
 80023c6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80023c8:	4b1d      	ldr	r3, [pc, #116]	; (8002440 <MX_TIM2_Init+0x94>)
 80023ca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80023ce:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 80023d0:	4b1b      	ldr	r3, [pc, #108]	; (8002440 <MX_TIM2_Init+0x94>)
 80023d2:	f240 3247 	movw	r2, #839	; 0x347
 80023d6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023d8:	4b19      	ldr	r3, [pc, #100]	; (8002440 <MX_TIM2_Init+0x94>)
 80023da:	2200      	movs	r2, #0
 80023dc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 80023de:	4b18      	ldr	r3, [pc, #96]	; (8002440 <MX_TIM2_Init+0x94>)
 80023e0:	2263      	movs	r2, #99	; 0x63
 80023e2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023e4:	4b16      	ldr	r3, [pc, #88]	; (8002440 <MX_TIM2_Init+0x94>)
 80023e6:	2200      	movs	r2, #0
 80023e8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023ea:	4b15      	ldr	r3, [pc, #84]	; (8002440 <MX_TIM2_Init+0x94>)
 80023ec:	2200      	movs	r2, #0
 80023ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80023f0:	4813      	ldr	r0, [pc, #76]	; (8002440 <MX_TIM2_Init+0x94>)
 80023f2:	f003 f94b 	bl	800568c <HAL_TIM_Base_Init>
 80023f6:	4603      	mov	r3, r0
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d001      	beq.n	8002400 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80023fc:	f7ff fe1c 	bl	8002038 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002400:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002404:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002406:	f107 0308 	add.w	r3, r7, #8
 800240a:	4619      	mov	r1, r3
 800240c:	480c      	ldr	r0, [pc, #48]	; (8002440 <MX_TIM2_Init+0x94>)
 800240e:	f003 fb05 	bl	8005a1c <HAL_TIM_ConfigClockSource>
 8002412:	4603      	mov	r3, r0
 8002414:	2b00      	cmp	r3, #0
 8002416:	d001      	beq.n	800241c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002418:	f7ff fe0e 	bl	8002038 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800241c:	2300      	movs	r3, #0
 800241e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002420:	2300      	movs	r3, #0
 8002422:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002424:	463b      	mov	r3, r7
 8002426:	4619      	mov	r1, r3
 8002428:	4805      	ldr	r0, [pc, #20]	; (8002440 <MX_TIM2_Init+0x94>)
 800242a:	f003 fd21 	bl	8005e70 <HAL_TIMEx_MasterConfigSynchronization>
 800242e:	4603      	mov	r3, r0
 8002430:	2b00      	cmp	r3, #0
 8002432:	d001      	beq.n	8002438 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002434:	f7ff fe00 	bl	8002038 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002438:	bf00      	nop
 800243a:	3718      	adds	r7, #24
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}
 8002440:	200001e0 	.word	0x200001e0

08002444 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b084      	sub	sp, #16
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002454:	d115      	bne.n	8002482 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002456:	2300      	movs	r3, #0
 8002458:	60fb      	str	r3, [r7, #12]
 800245a:	4b0c      	ldr	r3, [pc, #48]	; (800248c <HAL_TIM_Base_MspInit+0x48>)
 800245c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800245e:	4a0b      	ldr	r2, [pc, #44]	; (800248c <HAL_TIM_Base_MspInit+0x48>)
 8002460:	f043 0301 	orr.w	r3, r3, #1
 8002464:	6413      	str	r3, [r2, #64]	; 0x40
 8002466:	4b09      	ldr	r3, [pc, #36]	; (800248c <HAL_TIM_Base_MspInit+0x48>)
 8002468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800246a:	f003 0301 	and.w	r3, r3, #1
 800246e:	60fb      	str	r3, [r7, #12]
 8002470:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002472:	2200      	movs	r2, #0
 8002474:	2100      	movs	r1, #0
 8002476:	201c      	movs	r0, #28
 8002478:	f000 fb17 	bl	8002aaa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800247c:	201c      	movs	r0, #28
 800247e:	f000 fb30 	bl	8002ae2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002482:	bf00      	nop
 8002484:	3710      	adds	r7, #16
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	40023800 	.word	0x40023800

08002490 <uart_init_rs232>:
uint8_t curr_index=0;
uint8_t buffer_flag=0;
uint8_t receive_msg=0;
uint8_t count_char=0;

void uart_init_rs232(){
 8002490:	b580      	push	{r7, lr}
 8002492:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart1, &receive_msg, 1);
 8002494:	2201      	movs	r2, #1
 8002496:	4903      	ldr	r1, [pc, #12]	; (80024a4 <uart_init_rs232+0x14>)
 8002498:	4803      	ldr	r0, [pc, #12]	; (80024a8 <uart_init_rs232+0x18>)
 800249a:	f003 fe58 	bl	800614e <HAL_UART_Receive_IT>
}
 800249e:	bf00      	nop
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	bf00      	nop
 80024a4:	200002ad 	.word	0x200002ad
 80024a8:	200002b0 	.word	0x200002b0

080024ac <uart_Rs232SendString>:

void uart_Rs232SendString(uint8_t* str){
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b082      	sub	sp, #8
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (void*)msg, sprintf((void*)msg,"%s",str), 10);
 80024b4:	687a      	ldr	r2, [r7, #4]
 80024b6:	4907      	ldr	r1, [pc, #28]	; (80024d4 <uart_Rs232SendString+0x28>)
 80024b8:	4807      	ldr	r0, [pc, #28]	; (80024d8 <uart_Rs232SendString+0x2c>)
 80024ba:	f004 fead 	bl	8007218 <siprintf>
 80024be:	4603      	mov	r3, r0
 80024c0:	b29a      	uxth	r2, r3
 80024c2:	230a      	movs	r3, #10
 80024c4:	4904      	ldr	r1, [pc, #16]	; (80024d8 <uart_Rs232SendString+0x2c>)
 80024c6:	4805      	ldr	r0, [pc, #20]	; (80024dc <uart_Rs232SendString+0x30>)
 80024c8:	f003 fdaf 	bl	800602a <HAL_UART_Transmit>
}
 80024cc:	bf00      	nop
 80024ce:	3708      	adds	r7, #8
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}
 80024d4:	08007c10 	.word	0x08007c10
 80024d8:	20000228 	.word	0x20000228
 80024dc:	200002b0 	.word	0x200002b0

080024e0 <uart_Rs232SendNum>:

void uart_Rs232SendBytes(uint8_t* bytes, uint16_t size){
	HAL_UART_Transmit(&huart1, bytes, size, 10);
}

void uart_Rs232SendNum(uint32_t num){
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b084      	sub	sp, #16
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
	if(num == 0){
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d103      	bne.n	80024f6 <uart_Rs232SendNum+0x16>
		uart_Rs232SendString("0");
 80024ee:	4824      	ldr	r0, [pc, #144]	; (8002580 <uart_Rs232SendNum+0xa0>)
 80024f0:	f7ff ffdc 	bl	80024ac <uart_Rs232SendString>
		return;
 80024f4:	e040      	b.n	8002578 <uart_Rs232SendNum+0x98>
	}
    uint8_t num_flag = 0;
 80024f6:	2300      	movs	r3, #0
 80024f8:	73fb      	strb	r3, [r7, #15]
    int i;
	if(num < 0) uart_Rs232SendString("-");
    for(i = 10; i > 0; i--)
 80024fa:	230a      	movs	r3, #10
 80024fc:	60bb      	str	r3, [r7, #8]
 80024fe:	e038      	b.n	8002572 <uart_Rs232SendNum+0x92>
    {
        if((num / mypow(10, i-1)) != 0)
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	3b01      	subs	r3, #1
 8002504:	4619      	mov	r1, r3
 8002506:	200a      	movs	r0, #10
 8002508:	f7fe fd86 	bl	8001018 <mypow>
 800250c:	4603      	mov	r3, r0
 800250e:	461a      	mov	r2, r3
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	4293      	cmp	r3, r2
 8002514:	d315      	bcc.n	8002542 <uart_Rs232SendNum+0x62>
        {
            num_flag = 1;
 8002516:	2301      	movs	r3, #1
 8002518:	73fb      	strb	r3, [r7, #15]
            sprintf((void*)msg,"%d",num/mypow(10, i-1));
 800251a:	68bb      	ldr	r3, [r7, #8]
 800251c:	3b01      	subs	r3, #1
 800251e:	4619      	mov	r1, r3
 8002520:	200a      	movs	r0, #10
 8002522:	f7fe fd79 	bl	8001018 <mypow>
 8002526:	4603      	mov	r3, r0
 8002528:	461a      	mov	r2, r3
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	fbb3 f3f2 	udiv	r3, r3, r2
 8002530:	461a      	mov	r2, r3
 8002532:	4914      	ldr	r1, [pc, #80]	; (8002584 <uart_Rs232SendNum+0xa4>)
 8002534:	4814      	ldr	r0, [pc, #80]	; (8002588 <uart_Rs232SendNum+0xa8>)
 8002536:	f004 fe6f 	bl	8007218 <siprintf>
            uart_Rs232SendString(msg);
 800253a:	4813      	ldr	r0, [pc, #76]	; (8002588 <uart_Rs232SendNum+0xa8>)
 800253c:	f7ff ffb6 	bl	80024ac <uart_Rs232SendString>
 8002540:	e005      	b.n	800254e <uart_Rs232SendNum+0x6e>
        }
        else
        {
            if(num_flag != 0)
 8002542:	7bfb      	ldrb	r3, [r7, #15]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d002      	beq.n	800254e <uart_Rs232SendNum+0x6e>
            	uart_Rs232SendString("0");
 8002548:	480d      	ldr	r0, [pc, #52]	; (8002580 <uart_Rs232SendNum+0xa0>)
 800254a:	f7ff ffaf 	bl	80024ac <uart_Rs232SendString>
        }
        num %= mypow(10, i-1);
 800254e:	68bb      	ldr	r3, [r7, #8]
 8002550:	3b01      	subs	r3, #1
 8002552:	4619      	mov	r1, r3
 8002554:	200a      	movs	r0, #10
 8002556:	f7fe fd5f 	bl	8001018 <mypow>
 800255a:	4603      	mov	r3, r0
 800255c:	461a      	mov	r2, r3
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	fbb3 f1f2 	udiv	r1, r3, r2
 8002564:	fb01 f202 	mul.w	r2, r1, r2
 8002568:	1a9b      	subs	r3, r3, r2
 800256a:	607b      	str	r3, [r7, #4]
    for(i = 10; i > 0; i--)
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	3b01      	subs	r3, #1
 8002570:	60bb      	str	r3, [r7, #8]
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	2b00      	cmp	r3, #0
 8002576:	dcc3      	bgt.n	8002500 <uart_Rs232SendNum+0x20>
    }
}
 8002578:	3710      	adds	r7, #16
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}
 800257e:	bf00      	nop
 8002580:	08007c14 	.word	0x08007c14
 8002584:	08007c18 	.word	0x08007c18
 8002588:	20000228 	.word	0x20000228

0800258c <HAL_UART_RxCpltCallback>:
    uart_Rs232SendString(".");
    sprintf((void*)msg,"%ld",num%100);
    uart_Rs232SendString(msg);
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 800258c:	b580      	push	{r7, lr}
 800258e:	b082      	sub	sp, #8
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1){
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a13      	ldr	r2, [pc, #76]	; (80025e8 <HAL_UART_RxCpltCallback+0x5c>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d11f      	bne.n	80025de <HAL_UART_RxCpltCallback+0x52>
		// rs232 isr
		// can be modified
//		HAL_UART_Transmit(&huart1, &receive_msg, 1, 10);
		buffer[index_buffer++] = receive_msg;
 800259e:	4b13      	ldr	r3, [pc, #76]	; (80025ec <HAL_UART_RxCpltCallback+0x60>)
 80025a0:	781b      	ldrb	r3, [r3, #0]
 80025a2:	1c5a      	adds	r2, r3, #1
 80025a4:	b2d1      	uxtb	r1, r2
 80025a6:	4a11      	ldr	r2, [pc, #68]	; (80025ec <HAL_UART_RxCpltCallback+0x60>)
 80025a8:	7011      	strb	r1, [r2, #0]
 80025aa:	461a      	mov	r2, r3
 80025ac:	4b10      	ldr	r3, [pc, #64]	; (80025f0 <HAL_UART_RxCpltCallback+0x64>)
 80025ae:	7819      	ldrb	r1, [r3, #0]
 80025b0:	4b10      	ldr	r3, [pc, #64]	; (80025f4 <HAL_UART_RxCpltCallback+0x68>)
 80025b2:	5499      	strb	r1, [r3, r2]
		count_char += 1;
 80025b4:	4b10      	ldr	r3, [pc, #64]	; (80025f8 <HAL_UART_RxCpltCallback+0x6c>)
 80025b6:	781b      	ldrb	r3, [r3, #0]
 80025b8:	3301      	adds	r3, #1
 80025ba:	b2da      	uxtb	r2, r3
 80025bc:	4b0e      	ldr	r3, [pc, #56]	; (80025f8 <HAL_UART_RxCpltCallback+0x6c>)
 80025be:	701a      	strb	r2, [r3, #0]
		if(index_buffer == 30) index_buffer = 0;
 80025c0:	4b0a      	ldr	r3, [pc, #40]	; (80025ec <HAL_UART_RxCpltCallback+0x60>)
 80025c2:	781b      	ldrb	r3, [r3, #0]
 80025c4:	2b1e      	cmp	r3, #30
 80025c6:	d102      	bne.n	80025ce <HAL_UART_RxCpltCallback+0x42>
 80025c8:	4b08      	ldr	r3, [pc, #32]	; (80025ec <HAL_UART_RxCpltCallback+0x60>)
 80025ca:	2200      	movs	r2, #0
 80025cc:	701a      	strb	r2, [r3, #0]

		buffer_flag = 1;
 80025ce:	4b0b      	ldr	r3, [pc, #44]	; (80025fc <HAL_UART_RxCpltCallback+0x70>)
 80025d0:	2201      	movs	r2, #1
 80025d2:	701a      	strb	r2, [r3, #0]
//		HAL_UART_Transmit(&huart1, &receive_msg, 1, 1000);
		HAL_UART_Receive_IT (&huart1 , &receive_msg , 1);
 80025d4:	2201      	movs	r2, #1
 80025d6:	4906      	ldr	r1, [pc, #24]	; (80025f0 <HAL_UART_RxCpltCallback+0x64>)
 80025d8:	4809      	ldr	r0, [pc, #36]	; (8002600 <HAL_UART_RxCpltCallback+0x74>)
 80025da:	f003 fdb8 	bl	800614e <HAL_UART_Receive_IT>
	}
}
 80025de:	bf00      	nop
 80025e0:	3708      	adds	r7, #8
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	bf00      	nop
 80025e8:	40011000 	.word	0x40011000
 80025ec:	200002aa 	.word	0x200002aa
 80025f0:	200002ad 	.word	0x200002ad
 80025f4:	2000028c 	.word	0x2000028c
 80025f8:	200002ae 	.word	0x200002ae
 80025fc:	200002ac 	.word	0x200002ac
 8002600:	200002b0 	.word	0x200002b0

08002604 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002608:	4b11      	ldr	r3, [pc, #68]	; (8002650 <MX_USART1_UART_Init+0x4c>)
 800260a:	4a12      	ldr	r2, [pc, #72]	; (8002654 <MX_USART1_UART_Init+0x50>)
 800260c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800260e:	4b10      	ldr	r3, [pc, #64]	; (8002650 <MX_USART1_UART_Init+0x4c>)
 8002610:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002614:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002616:	4b0e      	ldr	r3, [pc, #56]	; (8002650 <MX_USART1_UART_Init+0x4c>)
 8002618:	2200      	movs	r2, #0
 800261a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800261c:	4b0c      	ldr	r3, [pc, #48]	; (8002650 <MX_USART1_UART_Init+0x4c>)
 800261e:	2200      	movs	r2, #0
 8002620:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002622:	4b0b      	ldr	r3, [pc, #44]	; (8002650 <MX_USART1_UART_Init+0x4c>)
 8002624:	2200      	movs	r2, #0
 8002626:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002628:	4b09      	ldr	r3, [pc, #36]	; (8002650 <MX_USART1_UART_Init+0x4c>)
 800262a:	220c      	movs	r2, #12
 800262c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800262e:	4b08      	ldr	r3, [pc, #32]	; (8002650 <MX_USART1_UART_Init+0x4c>)
 8002630:	2200      	movs	r2, #0
 8002632:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002634:	4b06      	ldr	r3, [pc, #24]	; (8002650 <MX_USART1_UART_Init+0x4c>)
 8002636:	2200      	movs	r2, #0
 8002638:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800263a:	4805      	ldr	r0, [pc, #20]	; (8002650 <MX_USART1_UART_Init+0x4c>)
 800263c:	f003 fca8 	bl	8005f90 <HAL_UART_Init>
 8002640:	4603      	mov	r3, r0
 8002642:	2b00      	cmp	r3, #0
 8002644:	d001      	beq.n	800264a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002646:	f7ff fcf7 	bl	8002038 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800264a:	bf00      	nop
 800264c:	bd80      	pop	{r7, pc}
 800264e:	bf00      	nop
 8002650:	200002b0 	.word	0x200002b0
 8002654:	40011000 	.word	0x40011000

08002658 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b08a      	sub	sp, #40	; 0x28
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002660:	f107 0314 	add.w	r3, r7, #20
 8002664:	2200      	movs	r2, #0
 8002666:	601a      	str	r2, [r3, #0]
 8002668:	605a      	str	r2, [r3, #4]
 800266a:	609a      	str	r2, [r3, #8]
 800266c:	60da      	str	r2, [r3, #12]
 800266e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a1d      	ldr	r2, [pc, #116]	; (80026ec <HAL_UART_MspInit+0x94>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d134      	bne.n	80026e4 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800267a:	2300      	movs	r3, #0
 800267c:	613b      	str	r3, [r7, #16]
 800267e:	4b1c      	ldr	r3, [pc, #112]	; (80026f0 <HAL_UART_MspInit+0x98>)
 8002680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002682:	4a1b      	ldr	r2, [pc, #108]	; (80026f0 <HAL_UART_MspInit+0x98>)
 8002684:	f043 0310 	orr.w	r3, r3, #16
 8002688:	6453      	str	r3, [r2, #68]	; 0x44
 800268a:	4b19      	ldr	r3, [pc, #100]	; (80026f0 <HAL_UART_MspInit+0x98>)
 800268c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800268e:	f003 0310 	and.w	r3, r3, #16
 8002692:	613b      	str	r3, [r7, #16]
 8002694:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002696:	2300      	movs	r3, #0
 8002698:	60fb      	str	r3, [r7, #12]
 800269a:	4b15      	ldr	r3, [pc, #84]	; (80026f0 <HAL_UART_MspInit+0x98>)
 800269c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800269e:	4a14      	ldr	r2, [pc, #80]	; (80026f0 <HAL_UART_MspInit+0x98>)
 80026a0:	f043 0301 	orr.w	r3, r3, #1
 80026a4:	6313      	str	r3, [r2, #48]	; 0x30
 80026a6:	4b12      	ldr	r3, [pc, #72]	; (80026f0 <HAL_UART_MspInit+0x98>)
 80026a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026aa:	f003 0301 	and.w	r3, r3, #1
 80026ae:	60fb      	str	r3, [r7, #12]
 80026b0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80026b2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80026b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026b8:	2302      	movs	r3, #2
 80026ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026bc:	2300      	movs	r3, #0
 80026be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026c0:	2303      	movs	r3, #3
 80026c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80026c4:	2307      	movs	r3, #7
 80026c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026c8:	f107 0314 	add.w	r3, r7, #20
 80026cc:	4619      	mov	r1, r3
 80026ce:	4809      	ldr	r0, [pc, #36]	; (80026f4 <HAL_UART_MspInit+0x9c>)
 80026d0:	f000 fab4 	bl	8002c3c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80026d4:	2200      	movs	r2, #0
 80026d6:	2100      	movs	r1, #0
 80026d8:	2025      	movs	r0, #37	; 0x25
 80026da:	f000 f9e6 	bl	8002aaa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80026de:	2025      	movs	r0, #37	; 0x25
 80026e0:	f000 f9ff 	bl	8002ae2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80026e4:	bf00      	nop
 80026e6:	3728      	adds	r7, #40	; 0x28
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}
 80026ec:	40011000 	.word	0x40011000
 80026f0:	40023800 	.word	0x40023800
 80026f4:	40020000 	.word	0x40020000

080026f8 <BCD2DEC>:
 *  Created on: Sep 26, 2023
 *      Author: HaHuyen
 */
#include "utils.h"

uint8_t BCD2DEC(uint8_t data) {
 80026f8:	b480      	push	{r7}
 80026fa:	b083      	sub	sp, #12
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	4603      	mov	r3, r0
 8002700:	71fb      	strb	r3, [r7, #7]
	return (data >> 4) * 10 + (data & 0x0f);
 8002702:	79fb      	ldrb	r3, [r7, #7]
 8002704:	091b      	lsrs	r3, r3, #4
 8002706:	b2db      	uxtb	r3, r3
 8002708:	461a      	mov	r2, r3
 800270a:	0092      	lsls	r2, r2, #2
 800270c:	4413      	add	r3, r2
 800270e:	005b      	lsls	r3, r3, #1
 8002710:	b2da      	uxtb	r2, r3
 8002712:	79fb      	ldrb	r3, [r7, #7]
 8002714:	f003 030f 	and.w	r3, r3, #15
 8002718:	b2db      	uxtb	r3, r3
 800271a:	4413      	add	r3, r2
 800271c:	b2db      	uxtb	r3, r3
}
 800271e:	4618      	mov	r0, r3
 8002720:	370c      	adds	r7, #12
 8002722:	46bd      	mov	sp, r7
 8002724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002728:	4770      	bx	lr
	...

0800272c <DEC2BCD>:

uint8_t DEC2BCD(uint8_t data) {
 800272c:	b480      	push	{r7}
 800272e:	b083      	sub	sp, #12
 8002730:	af00      	add	r7, sp, #0
 8002732:	4603      	mov	r3, r0
 8002734:	71fb      	strb	r3, [r7, #7]
	return (data / 10) << 4 | (data % 10);
 8002736:	79fb      	ldrb	r3, [r7, #7]
 8002738:	4a0d      	ldr	r2, [pc, #52]	; (8002770 <DEC2BCD+0x44>)
 800273a:	fba2 2303 	umull	r2, r3, r2, r3
 800273e:	08db      	lsrs	r3, r3, #3
 8002740:	b2db      	uxtb	r3, r3
 8002742:	011b      	lsls	r3, r3, #4
 8002744:	b258      	sxtb	r0, r3
 8002746:	79fa      	ldrb	r2, [r7, #7]
 8002748:	4b09      	ldr	r3, [pc, #36]	; (8002770 <DEC2BCD+0x44>)
 800274a:	fba3 1302 	umull	r1, r3, r3, r2
 800274e:	08d9      	lsrs	r1, r3, #3
 8002750:	460b      	mov	r3, r1
 8002752:	009b      	lsls	r3, r3, #2
 8002754:	440b      	add	r3, r1
 8002756:	005b      	lsls	r3, r3, #1
 8002758:	1ad3      	subs	r3, r2, r3
 800275a:	b2db      	uxtb	r3, r3
 800275c:	b25b      	sxtb	r3, r3
 800275e:	4303      	orrs	r3, r0
 8002760:	b25b      	sxtb	r3, r3
 8002762:	b2db      	uxtb	r3, r3
}
 8002764:	4618      	mov	r0, r3
 8002766:	370c      	adds	r7, #12
 8002768:	46bd      	mov	sp, r7
 800276a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276e:	4770      	bx	lr
 8002770:	cccccccd 	.word	0xcccccccd

08002774 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002774:	f8df d034 	ldr.w	sp, [pc, #52]	; 80027ac <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002778:	480d      	ldr	r0, [pc, #52]	; (80027b0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800277a:	490e      	ldr	r1, [pc, #56]	; (80027b4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800277c:	4a0e      	ldr	r2, [pc, #56]	; (80027b8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800277e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002780:	e002      	b.n	8002788 <LoopCopyDataInit>

08002782 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002782:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002784:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002786:	3304      	adds	r3, #4

08002788 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002788:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800278a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800278c:	d3f9      	bcc.n	8002782 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800278e:	4a0b      	ldr	r2, [pc, #44]	; (80027bc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002790:	4c0b      	ldr	r4, [pc, #44]	; (80027c0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002792:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002794:	e001      	b.n	800279a <LoopFillZerobss>

08002796 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002796:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002798:	3204      	adds	r2, #4

0800279a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800279a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800279c:	d3fb      	bcc.n	8002796 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800279e:	f7ff fdf3 	bl	8002388 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80027a2:	f004 fd67 	bl	8007274 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80027a6:	f7ff f9d3 	bl	8001b50 <main>
  bx  lr    
 80027aa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80027ac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80027b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80027b4:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 80027b8:	0800ac00 	.word	0x0800ac00
  ldr r2, =_sbss
 80027bc:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 80027c0:	20000440 	.word	0x20000440

080027c4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80027c4:	e7fe      	b.n	80027c4 <ADC_IRQHandler>
	...

080027c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80027cc:	4b0e      	ldr	r3, [pc, #56]	; (8002808 <HAL_Init+0x40>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a0d      	ldr	r2, [pc, #52]	; (8002808 <HAL_Init+0x40>)
 80027d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80027d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80027d8:	4b0b      	ldr	r3, [pc, #44]	; (8002808 <HAL_Init+0x40>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a0a      	ldr	r2, [pc, #40]	; (8002808 <HAL_Init+0x40>)
 80027de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80027e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80027e4:	4b08      	ldr	r3, [pc, #32]	; (8002808 <HAL_Init+0x40>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a07      	ldr	r2, [pc, #28]	; (8002808 <HAL_Init+0x40>)
 80027ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027f0:	2003      	movs	r0, #3
 80027f2:	f000 f94f 	bl	8002a94 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80027f6:	200f      	movs	r0, #15
 80027f8:	f000 f808 	bl	800280c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80027fc:	f7ff fd28 	bl	8002250 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002800:	2300      	movs	r3, #0
}
 8002802:	4618      	mov	r0, r3
 8002804:	bd80      	pop	{r7, pc}
 8002806:	bf00      	nop
 8002808:	40023c00 	.word	0x40023c00

0800280c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b082      	sub	sp, #8
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002814:	4b12      	ldr	r3, [pc, #72]	; (8002860 <HAL_InitTick+0x54>)
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	4b12      	ldr	r3, [pc, #72]	; (8002864 <HAL_InitTick+0x58>)
 800281a:	781b      	ldrb	r3, [r3, #0]
 800281c:	4619      	mov	r1, r3
 800281e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002822:	fbb3 f3f1 	udiv	r3, r3, r1
 8002826:	fbb2 f3f3 	udiv	r3, r2, r3
 800282a:	4618      	mov	r0, r3
 800282c:	f000 f967 	bl	8002afe <HAL_SYSTICK_Config>
 8002830:	4603      	mov	r3, r0
 8002832:	2b00      	cmp	r3, #0
 8002834:	d001      	beq.n	800283a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	e00e      	b.n	8002858 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2b0f      	cmp	r3, #15
 800283e:	d80a      	bhi.n	8002856 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002840:	2200      	movs	r2, #0
 8002842:	6879      	ldr	r1, [r7, #4]
 8002844:	f04f 30ff 	mov.w	r0, #4294967295
 8002848:	f000 f92f 	bl	8002aaa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800284c:	4a06      	ldr	r2, [pc, #24]	; (8002868 <HAL_InitTick+0x5c>)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002852:	2300      	movs	r3, #0
 8002854:	e000      	b.n	8002858 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002856:	2301      	movs	r3, #1
}
 8002858:	4618      	mov	r0, r3
 800285a:	3708      	adds	r7, #8
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}
 8002860:	20000008 	.word	0x20000008
 8002864:	20000010 	.word	0x20000010
 8002868:	2000000c 	.word	0x2000000c

0800286c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800286c:	b480      	push	{r7}
 800286e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002870:	4b06      	ldr	r3, [pc, #24]	; (800288c <HAL_IncTick+0x20>)
 8002872:	781b      	ldrb	r3, [r3, #0]
 8002874:	461a      	mov	r2, r3
 8002876:	4b06      	ldr	r3, [pc, #24]	; (8002890 <HAL_IncTick+0x24>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4413      	add	r3, r2
 800287c:	4a04      	ldr	r2, [pc, #16]	; (8002890 <HAL_IncTick+0x24>)
 800287e:	6013      	str	r3, [r2, #0]
}
 8002880:	bf00      	nop
 8002882:	46bd      	mov	sp, r7
 8002884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002888:	4770      	bx	lr
 800288a:	bf00      	nop
 800288c:	20000010 	.word	0x20000010
 8002890:	200002f4 	.word	0x200002f4

08002894 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002894:	b480      	push	{r7}
 8002896:	af00      	add	r7, sp, #0
  return uwTick;
 8002898:	4b03      	ldr	r3, [pc, #12]	; (80028a8 <HAL_GetTick+0x14>)
 800289a:	681b      	ldr	r3, [r3, #0]
}
 800289c:	4618      	mov	r0, r3
 800289e:	46bd      	mov	sp, r7
 80028a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a4:	4770      	bx	lr
 80028a6:	bf00      	nop
 80028a8:	200002f4 	.word	0x200002f4

080028ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b084      	sub	sp, #16
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80028b4:	f7ff ffee 	bl	8002894 <HAL_GetTick>
 80028b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028c4:	d005      	beq.n	80028d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80028c6:	4b0a      	ldr	r3, [pc, #40]	; (80028f0 <HAL_Delay+0x44>)
 80028c8:	781b      	ldrb	r3, [r3, #0]
 80028ca:	461a      	mov	r2, r3
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	4413      	add	r3, r2
 80028d0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80028d2:	bf00      	nop
 80028d4:	f7ff ffde 	bl	8002894 <HAL_GetTick>
 80028d8:	4602      	mov	r2, r0
 80028da:	68bb      	ldr	r3, [r7, #8]
 80028dc:	1ad3      	subs	r3, r2, r3
 80028de:	68fa      	ldr	r2, [r7, #12]
 80028e0:	429a      	cmp	r2, r3
 80028e2:	d8f7      	bhi.n	80028d4 <HAL_Delay+0x28>
  {
  }
}
 80028e4:	bf00      	nop
 80028e6:	bf00      	nop
 80028e8:	3710      	adds	r7, #16
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}
 80028ee:	bf00      	nop
 80028f0:	20000010 	.word	0x20000010

080028f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b085      	sub	sp, #20
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	f003 0307 	and.w	r3, r3, #7
 8002902:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002904:	4b0c      	ldr	r3, [pc, #48]	; (8002938 <__NVIC_SetPriorityGrouping+0x44>)
 8002906:	68db      	ldr	r3, [r3, #12]
 8002908:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800290a:	68ba      	ldr	r2, [r7, #8]
 800290c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002910:	4013      	ands	r3, r2
 8002912:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800291c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002920:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002924:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002926:	4a04      	ldr	r2, [pc, #16]	; (8002938 <__NVIC_SetPriorityGrouping+0x44>)
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	60d3      	str	r3, [r2, #12]
}
 800292c:	bf00      	nop
 800292e:	3714      	adds	r7, #20
 8002930:	46bd      	mov	sp, r7
 8002932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002936:	4770      	bx	lr
 8002938:	e000ed00 	.word	0xe000ed00

0800293c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800293c:	b480      	push	{r7}
 800293e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002940:	4b04      	ldr	r3, [pc, #16]	; (8002954 <__NVIC_GetPriorityGrouping+0x18>)
 8002942:	68db      	ldr	r3, [r3, #12]
 8002944:	0a1b      	lsrs	r3, r3, #8
 8002946:	f003 0307 	and.w	r3, r3, #7
}
 800294a:	4618      	mov	r0, r3
 800294c:	46bd      	mov	sp, r7
 800294e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002952:	4770      	bx	lr
 8002954:	e000ed00 	.word	0xe000ed00

08002958 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002958:	b480      	push	{r7}
 800295a:	b083      	sub	sp, #12
 800295c:	af00      	add	r7, sp, #0
 800295e:	4603      	mov	r3, r0
 8002960:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002962:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002966:	2b00      	cmp	r3, #0
 8002968:	db0b      	blt.n	8002982 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800296a:	79fb      	ldrb	r3, [r7, #7]
 800296c:	f003 021f 	and.w	r2, r3, #31
 8002970:	4907      	ldr	r1, [pc, #28]	; (8002990 <__NVIC_EnableIRQ+0x38>)
 8002972:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002976:	095b      	lsrs	r3, r3, #5
 8002978:	2001      	movs	r0, #1
 800297a:	fa00 f202 	lsl.w	r2, r0, r2
 800297e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002982:	bf00      	nop
 8002984:	370c      	adds	r7, #12
 8002986:	46bd      	mov	sp, r7
 8002988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298c:	4770      	bx	lr
 800298e:	bf00      	nop
 8002990:	e000e100 	.word	0xe000e100

08002994 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002994:	b480      	push	{r7}
 8002996:	b083      	sub	sp, #12
 8002998:	af00      	add	r7, sp, #0
 800299a:	4603      	mov	r3, r0
 800299c:	6039      	str	r1, [r7, #0]
 800299e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	db0a      	blt.n	80029be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	b2da      	uxtb	r2, r3
 80029ac:	490c      	ldr	r1, [pc, #48]	; (80029e0 <__NVIC_SetPriority+0x4c>)
 80029ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029b2:	0112      	lsls	r2, r2, #4
 80029b4:	b2d2      	uxtb	r2, r2
 80029b6:	440b      	add	r3, r1
 80029b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029bc:	e00a      	b.n	80029d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	b2da      	uxtb	r2, r3
 80029c2:	4908      	ldr	r1, [pc, #32]	; (80029e4 <__NVIC_SetPriority+0x50>)
 80029c4:	79fb      	ldrb	r3, [r7, #7]
 80029c6:	f003 030f 	and.w	r3, r3, #15
 80029ca:	3b04      	subs	r3, #4
 80029cc:	0112      	lsls	r2, r2, #4
 80029ce:	b2d2      	uxtb	r2, r2
 80029d0:	440b      	add	r3, r1
 80029d2:	761a      	strb	r2, [r3, #24]
}
 80029d4:	bf00      	nop
 80029d6:	370c      	adds	r7, #12
 80029d8:	46bd      	mov	sp, r7
 80029da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029de:	4770      	bx	lr
 80029e0:	e000e100 	.word	0xe000e100
 80029e4:	e000ed00 	.word	0xe000ed00

080029e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b089      	sub	sp, #36	; 0x24
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	60f8      	str	r0, [r7, #12]
 80029f0:	60b9      	str	r1, [r7, #8]
 80029f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	f003 0307 	and.w	r3, r3, #7
 80029fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029fc:	69fb      	ldr	r3, [r7, #28]
 80029fe:	f1c3 0307 	rsb	r3, r3, #7
 8002a02:	2b04      	cmp	r3, #4
 8002a04:	bf28      	it	cs
 8002a06:	2304      	movcs	r3, #4
 8002a08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a0a:	69fb      	ldr	r3, [r7, #28]
 8002a0c:	3304      	adds	r3, #4
 8002a0e:	2b06      	cmp	r3, #6
 8002a10:	d902      	bls.n	8002a18 <NVIC_EncodePriority+0x30>
 8002a12:	69fb      	ldr	r3, [r7, #28]
 8002a14:	3b03      	subs	r3, #3
 8002a16:	e000      	b.n	8002a1a <NVIC_EncodePriority+0x32>
 8002a18:	2300      	movs	r3, #0
 8002a1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a1c:	f04f 32ff 	mov.w	r2, #4294967295
 8002a20:	69bb      	ldr	r3, [r7, #24]
 8002a22:	fa02 f303 	lsl.w	r3, r2, r3
 8002a26:	43da      	mvns	r2, r3
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	401a      	ands	r2, r3
 8002a2c:	697b      	ldr	r3, [r7, #20]
 8002a2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a30:	f04f 31ff 	mov.w	r1, #4294967295
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	fa01 f303 	lsl.w	r3, r1, r3
 8002a3a:	43d9      	mvns	r1, r3
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a40:	4313      	orrs	r3, r2
         );
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	3724      	adds	r7, #36	; 0x24
 8002a46:	46bd      	mov	sp, r7
 8002a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4c:	4770      	bx	lr
	...

08002a50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b082      	sub	sp, #8
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	3b01      	subs	r3, #1
 8002a5c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a60:	d301      	bcc.n	8002a66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a62:	2301      	movs	r3, #1
 8002a64:	e00f      	b.n	8002a86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a66:	4a0a      	ldr	r2, [pc, #40]	; (8002a90 <SysTick_Config+0x40>)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	3b01      	subs	r3, #1
 8002a6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a6e:	210f      	movs	r1, #15
 8002a70:	f04f 30ff 	mov.w	r0, #4294967295
 8002a74:	f7ff ff8e 	bl	8002994 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a78:	4b05      	ldr	r3, [pc, #20]	; (8002a90 <SysTick_Config+0x40>)
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a7e:	4b04      	ldr	r3, [pc, #16]	; (8002a90 <SysTick_Config+0x40>)
 8002a80:	2207      	movs	r2, #7
 8002a82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a84:	2300      	movs	r3, #0
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	3708      	adds	r7, #8
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}
 8002a8e:	bf00      	nop
 8002a90:	e000e010 	.word	0xe000e010

08002a94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b082      	sub	sp, #8
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a9c:	6878      	ldr	r0, [r7, #4]
 8002a9e:	f7ff ff29 	bl	80028f4 <__NVIC_SetPriorityGrouping>
}
 8002aa2:	bf00      	nop
 8002aa4:	3708      	adds	r7, #8
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}

08002aaa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002aaa:	b580      	push	{r7, lr}
 8002aac:	b086      	sub	sp, #24
 8002aae:	af00      	add	r7, sp, #0
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	60b9      	str	r1, [r7, #8]
 8002ab4:	607a      	str	r2, [r7, #4]
 8002ab6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002abc:	f7ff ff3e 	bl	800293c <__NVIC_GetPriorityGrouping>
 8002ac0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ac2:	687a      	ldr	r2, [r7, #4]
 8002ac4:	68b9      	ldr	r1, [r7, #8]
 8002ac6:	6978      	ldr	r0, [r7, #20]
 8002ac8:	f7ff ff8e 	bl	80029e8 <NVIC_EncodePriority>
 8002acc:	4602      	mov	r2, r0
 8002ace:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ad2:	4611      	mov	r1, r2
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f7ff ff5d 	bl	8002994 <__NVIC_SetPriority>
}
 8002ada:	bf00      	nop
 8002adc:	3718      	adds	r7, #24
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}

08002ae2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ae2:	b580      	push	{r7, lr}
 8002ae4:	b082      	sub	sp, #8
 8002ae6:	af00      	add	r7, sp, #0
 8002ae8:	4603      	mov	r3, r0
 8002aea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002aec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002af0:	4618      	mov	r0, r3
 8002af2:	f7ff ff31 	bl	8002958 <__NVIC_EnableIRQ>
}
 8002af6:	bf00      	nop
 8002af8:	3708      	adds	r7, #8
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}

08002afe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002afe:	b580      	push	{r7, lr}
 8002b00:	b082      	sub	sp, #8
 8002b02:	af00      	add	r7, sp, #0
 8002b04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b06:	6878      	ldr	r0, [r7, #4]
 8002b08:	f7ff ffa2 	bl	8002a50 <SysTick_Config>
 8002b0c:	4603      	mov	r3, r0
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	3708      	adds	r7, #8
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}

08002b16 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002b16:	b580      	push	{r7, lr}
 8002b18:	b084      	sub	sp, #16
 8002b1a:	af00      	add	r7, sp, #0
 8002b1c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b22:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002b24:	f7ff feb6 	bl	8002894 <HAL_GetTick>
 8002b28:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b30:	b2db      	uxtb	r3, r3
 8002b32:	2b02      	cmp	r3, #2
 8002b34:	d008      	beq.n	8002b48 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2280      	movs	r2, #128	; 0x80
 8002b3a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002b44:	2301      	movs	r3, #1
 8002b46:	e052      	b.n	8002bee <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	681a      	ldr	r2, [r3, #0]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f022 0216 	bic.w	r2, r2, #22
 8002b56:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	695a      	ldr	r2, [r3, #20]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b66:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d103      	bne.n	8002b78 <HAL_DMA_Abort+0x62>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d007      	beq.n	8002b88 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	681a      	ldr	r2, [r3, #0]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f022 0208 	bic.w	r2, r2, #8
 8002b86:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	681a      	ldr	r2, [r3, #0]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f022 0201 	bic.w	r2, r2, #1
 8002b96:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b98:	e013      	b.n	8002bc2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002b9a:	f7ff fe7b 	bl	8002894 <HAL_GetTick>
 8002b9e:	4602      	mov	r2, r0
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	1ad3      	subs	r3, r2, r3
 8002ba4:	2b05      	cmp	r3, #5
 8002ba6:	d90c      	bls.n	8002bc2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2220      	movs	r2, #32
 8002bac:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2203      	movs	r2, #3
 8002bb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002bbe:	2303      	movs	r3, #3
 8002bc0:	e015      	b.n	8002bee <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f003 0301 	and.w	r3, r3, #1
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d1e4      	bne.n	8002b9a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bd4:	223f      	movs	r2, #63	; 0x3f
 8002bd6:	409a      	lsls	r2, r3
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2201      	movs	r2, #1
 8002be0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2200      	movs	r2, #0
 8002be8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002bec:	2300      	movs	r3, #0
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	3710      	adds	r7, #16
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}

08002bf6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002bf6:	b480      	push	{r7}
 8002bf8:	b083      	sub	sp, #12
 8002bfa:	af00      	add	r7, sp, #0
 8002bfc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c04:	b2db      	uxtb	r3, r3
 8002c06:	2b02      	cmp	r3, #2
 8002c08:	d004      	beq.n	8002c14 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2280      	movs	r2, #128	; 0x80
 8002c0e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002c10:	2301      	movs	r3, #1
 8002c12:	e00c      	b.n	8002c2e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2205      	movs	r2, #5
 8002c18:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	681a      	ldr	r2, [r3, #0]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f022 0201 	bic.w	r2, r2, #1
 8002c2a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002c2c:	2300      	movs	r3, #0
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	370c      	adds	r7, #12
 8002c32:	46bd      	mov	sp, r7
 8002c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c38:	4770      	bx	lr
	...

08002c3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b089      	sub	sp, #36	; 0x24
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
 8002c44:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002c46:	2300      	movs	r3, #0
 8002c48:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c52:	2300      	movs	r3, #0
 8002c54:	61fb      	str	r3, [r7, #28]
 8002c56:	e16b      	b.n	8002f30 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002c58:	2201      	movs	r2, #1
 8002c5a:	69fb      	ldr	r3, [r7, #28]
 8002c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c60:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	697a      	ldr	r2, [r7, #20]
 8002c68:	4013      	ands	r3, r2
 8002c6a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002c6c:	693a      	ldr	r2, [r7, #16]
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	429a      	cmp	r2, r3
 8002c72:	f040 815a 	bne.w	8002f2a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	f003 0303 	and.w	r3, r3, #3
 8002c7e:	2b01      	cmp	r3, #1
 8002c80:	d005      	beq.n	8002c8e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c8a:	2b02      	cmp	r3, #2
 8002c8c:	d130      	bne.n	8002cf0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	689b      	ldr	r3, [r3, #8]
 8002c92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002c94:	69fb      	ldr	r3, [r7, #28]
 8002c96:	005b      	lsls	r3, r3, #1
 8002c98:	2203      	movs	r2, #3
 8002c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c9e:	43db      	mvns	r3, r3
 8002ca0:	69ba      	ldr	r2, [r7, #24]
 8002ca2:	4013      	ands	r3, r2
 8002ca4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	68da      	ldr	r2, [r3, #12]
 8002caa:	69fb      	ldr	r3, [r7, #28]
 8002cac:	005b      	lsls	r3, r3, #1
 8002cae:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb2:	69ba      	ldr	r2, [r7, #24]
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	69ba      	ldr	r2, [r7, #24]
 8002cbc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002cc4:	2201      	movs	r2, #1
 8002cc6:	69fb      	ldr	r3, [r7, #28]
 8002cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ccc:	43db      	mvns	r3, r3
 8002cce:	69ba      	ldr	r2, [r7, #24]
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	091b      	lsrs	r3, r3, #4
 8002cda:	f003 0201 	and.w	r2, r3, #1
 8002cde:	69fb      	ldr	r3, [r7, #28]
 8002ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce4:	69ba      	ldr	r2, [r7, #24]
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	69ba      	ldr	r2, [r7, #24]
 8002cee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	f003 0303 	and.w	r3, r3, #3
 8002cf8:	2b03      	cmp	r3, #3
 8002cfa:	d017      	beq.n	8002d2c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	68db      	ldr	r3, [r3, #12]
 8002d00:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002d02:	69fb      	ldr	r3, [r7, #28]
 8002d04:	005b      	lsls	r3, r3, #1
 8002d06:	2203      	movs	r2, #3
 8002d08:	fa02 f303 	lsl.w	r3, r2, r3
 8002d0c:	43db      	mvns	r3, r3
 8002d0e:	69ba      	ldr	r2, [r7, #24]
 8002d10:	4013      	ands	r3, r2
 8002d12:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	689a      	ldr	r2, [r3, #8]
 8002d18:	69fb      	ldr	r3, [r7, #28]
 8002d1a:	005b      	lsls	r3, r3, #1
 8002d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d20:	69ba      	ldr	r2, [r7, #24]
 8002d22:	4313      	orrs	r3, r2
 8002d24:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	69ba      	ldr	r2, [r7, #24]
 8002d2a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	f003 0303 	and.w	r3, r3, #3
 8002d34:	2b02      	cmp	r3, #2
 8002d36:	d123      	bne.n	8002d80 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002d38:	69fb      	ldr	r3, [r7, #28]
 8002d3a:	08da      	lsrs	r2, r3, #3
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	3208      	adds	r2, #8
 8002d40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d44:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002d46:	69fb      	ldr	r3, [r7, #28]
 8002d48:	f003 0307 	and.w	r3, r3, #7
 8002d4c:	009b      	lsls	r3, r3, #2
 8002d4e:	220f      	movs	r2, #15
 8002d50:	fa02 f303 	lsl.w	r3, r2, r3
 8002d54:	43db      	mvns	r3, r3
 8002d56:	69ba      	ldr	r2, [r7, #24]
 8002d58:	4013      	ands	r3, r2
 8002d5a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	691a      	ldr	r2, [r3, #16]
 8002d60:	69fb      	ldr	r3, [r7, #28]
 8002d62:	f003 0307 	and.w	r3, r3, #7
 8002d66:	009b      	lsls	r3, r3, #2
 8002d68:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6c:	69ba      	ldr	r2, [r7, #24]
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002d72:	69fb      	ldr	r3, [r7, #28]
 8002d74:	08da      	lsrs	r2, r3, #3
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	3208      	adds	r2, #8
 8002d7a:	69b9      	ldr	r1, [r7, #24]
 8002d7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002d86:	69fb      	ldr	r3, [r7, #28]
 8002d88:	005b      	lsls	r3, r3, #1
 8002d8a:	2203      	movs	r2, #3
 8002d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d90:	43db      	mvns	r3, r3
 8002d92:	69ba      	ldr	r2, [r7, #24]
 8002d94:	4013      	ands	r3, r2
 8002d96:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	f003 0203 	and.w	r2, r3, #3
 8002da0:	69fb      	ldr	r3, [r7, #28]
 8002da2:	005b      	lsls	r3, r3, #1
 8002da4:	fa02 f303 	lsl.w	r3, r2, r3
 8002da8:	69ba      	ldr	r2, [r7, #24]
 8002daa:	4313      	orrs	r3, r2
 8002dac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	69ba      	ldr	r2, [r7, #24]
 8002db2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	f000 80b4 	beq.w	8002f2a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	60fb      	str	r3, [r7, #12]
 8002dc6:	4b60      	ldr	r3, [pc, #384]	; (8002f48 <HAL_GPIO_Init+0x30c>)
 8002dc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dca:	4a5f      	ldr	r2, [pc, #380]	; (8002f48 <HAL_GPIO_Init+0x30c>)
 8002dcc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002dd0:	6453      	str	r3, [r2, #68]	; 0x44
 8002dd2:	4b5d      	ldr	r3, [pc, #372]	; (8002f48 <HAL_GPIO_Init+0x30c>)
 8002dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002dda:	60fb      	str	r3, [r7, #12]
 8002ddc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002dde:	4a5b      	ldr	r2, [pc, #364]	; (8002f4c <HAL_GPIO_Init+0x310>)
 8002de0:	69fb      	ldr	r3, [r7, #28]
 8002de2:	089b      	lsrs	r3, r3, #2
 8002de4:	3302      	adds	r3, #2
 8002de6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002dec:	69fb      	ldr	r3, [r7, #28]
 8002dee:	f003 0303 	and.w	r3, r3, #3
 8002df2:	009b      	lsls	r3, r3, #2
 8002df4:	220f      	movs	r2, #15
 8002df6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dfa:	43db      	mvns	r3, r3
 8002dfc:	69ba      	ldr	r2, [r7, #24]
 8002dfe:	4013      	ands	r3, r2
 8002e00:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	4a52      	ldr	r2, [pc, #328]	; (8002f50 <HAL_GPIO_Init+0x314>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d02b      	beq.n	8002e62 <HAL_GPIO_Init+0x226>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	4a51      	ldr	r2, [pc, #324]	; (8002f54 <HAL_GPIO_Init+0x318>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d025      	beq.n	8002e5e <HAL_GPIO_Init+0x222>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	4a50      	ldr	r2, [pc, #320]	; (8002f58 <HAL_GPIO_Init+0x31c>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d01f      	beq.n	8002e5a <HAL_GPIO_Init+0x21e>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	4a4f      	ldr	r2, [pc, #316]	; (8002f5c <HAL_GPIO_Init+0x320>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d019      	beq.n	8002e56 <HAL_GPIO_Init+0x21a>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	4a4e      	ldr	r2, [pc, #312]	; (8002f60 <HAL_GPIO_Init+0x324>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d013      	beq.n	8002e52 <HAL_GPIO_Init+0x216>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	4a4d      	ldr	r2, [pc, #308]	; (8002f64 <HAL_GPIO_Init+0x328>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d00d      	beq.n	8002e4e <HAL_GPIO_Init+0x212>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	4a4c      	ldr	r2, [pc, #304]	; (8002f68 <HAL_GPIO_Init+0x32c>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d007      	beq.n	8002e4a <HAL_GPIO_Init+0x20e>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	4a4b      	ldr	r2, [pc, #300]	; (8002f6c <HAL_GPIO_Init+0x330>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d101      	bne.n	8002e46 <HAL_GPIO_Init+0x20a>
 8002e42:	2307      	movs	r3, #7
 8002e44:	e00e      	b.n	8002e64 <HAL_GPIO_Init+0x228>
 8002e46:	2308      	movs	r3, #8
 8002e48:	e00c      	b.n	8002e64 <HAL_GPIO_Init+0x228>
 8002e4a:	2306      	movs	r3, #6
 8002e4c:	e00a      	b.n	8002e64 <HAL_GPIO_Init+0x228>
 8002e4e:	2305      	movs	r3, #5
 8002e50:	e008      	b.n	8002e64 <HAL_GPIO_Init+0x228>
 8002e52:	2304      	movs	r3, #4
 8002e54:	e006      	b.n	8002e64 <HAL_GPIO_Init+0x228>
 8002e56:	2303      	movs	r3, #3
 8002e58:	e004      	b.n	8002e64 <HAL_GPIO_Init+0x228>
 8002e5a:	2302      	movs	r3, #2
 8002e5c:	e002      	b.n	8002e64 <HAL_GPIO_Init+0x228>
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e000      	b.n	8002e64 <HAL_GPIO_Init+0x228>
 8002e62:	2300      	movs	r3, #0
 8002e64:	69fa      	ldr	r2, [r7, #28]
 8002e66:	f002 0203 	and.w	r2, r2, #3
 8002e6a:	0092      	lsls	r2, r2, #2
 8002e6c:	4093      	lsls	r3, r2
 8002e6e:	69ba      	ldr	r2, [r7, #24]
 8002e70:	4313      	orrs	r3, r2
 8002e72:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002e74:	4935      	ldr	r1, [pc, #212]	; (8002f4c <HAL_GPIO_Init+0x310>)
 8002e76:	69fb      	ldr	r3, [r7, #28]
 8002e78:	089b      	lsrs	r3, r3, #2
 8002e7a:	3302      	adds	r3, #2
 8002e7c:	69ba      	ldr	r2, [r7, #24]
 8002e7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e82:	4b3b      	ldr	r3, [pc, #236]	; (8002f70 <HAL_GPIO_Init+0x334>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e88:	693b      	ldr	r3, [r7, #16]
 8002e8a:	43db      	mvns	r3, r3
 8002e8c:	69ba      	ldr	r2, [r7, #24]
 8002e8e:	4013      	ands	r3, r2
 8002e90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d003      	beq.n	8002ea6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002e9e:	69ba      	ldr	r2, [r7, #24]
 8002ea0:	693b      	ldr	r3, [r7, #16]
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ea6:	4a32      	ldr	r2, [pc, #200]	; (8002f70 <HAL_GPIO_Init+0x334>)
 8002ea8:	69bb      	ldr	r3, [r7, #24]
 8002eaa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002eac:	4b30      	ldr	r3, [pc, #192]	; (8002f70 <HAL_GPIO_Init+0x334>)
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002eb2:	693b      	ldr	r3, [r7, #16]
 8002eb4:	43db      	mvns	r3, r3
 8002eb6:	69ba      	ldr	r2, [r7, #24]
 8002eb8:	4013      	ands	r3, r2
 8002eba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d003      	beq.n	8002ed0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002ec8:	69ba      	ldr	r2, [r7, #24]
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002ed0:	4a27      	ldr	r2, [pc, #156]	; (8002f70 <HAL_GPIO_Init+0x334>)
 8002ed2:	69bb      	ldr	r3, [r7, #24]
 8002ed4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ed6:	4b26      	ldr	r3, [pc, #152]	; (8002f70 <HAL_GPIO_Init+0x334>)
 8002ed8:	689b      	ldr	r3, [r3, #8]
 8002eda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002edc:	693b      	ldr	r3, [r7, #16]
 8002ede:	43db      	mvns	r3, r3
 8002ee0:	69ba      	ldr	r2, [r7, #24]
 8002ee2:	4013      	ands	r3, r2
 8002ee4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d003      	beq.n	8002efa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002ef2:	69ba      	ldr	r2, [r7, #24]
 8002ef4:	693b      	ldr	r3, [r7, #16]
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002efa:	4a1d      	ldr	r2, [pc, #116]	; (8002f70 <HAL_GPIO_Init+0x334>)
 8002efc:	69bb      	ldr	r3, [r7, #24]
 8002efe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f00:	4b1b      	ldr	r3, [pc, #108]	; (8002f70 <HAL_GPIO_Init+0x334>)
 8002f02:	68db      	ldr	r3, [r3, #12]
 8002f04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	43db      	mvns	r3, r3
 8002f0a:	69ba      	ldr	r2, [r7, #24]
 8002f0c:	4013      	ands	r3, r2
 8002f0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d003      	beq.n	8002f24 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002f1c:	69ba      	ldr	r2, [r7, #24]
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	4313      	orrs	r3, r2
 8002f22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002f24:	4a12      	ldr	r2, [pc, #72]	; (8002f70 <HAL_GPIO_Init+0x334>)
 8002f26:	69bb      	ldr	r3, [r7, #24]
 8002f28:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f2a:	69fb      	ldr	r3, [r7, #28]
 8002f2c:	3301      	adds	r3, #1
 8002f2e:	61fb      	str	r3, [r7, #28]
 8002f30:	69fb      	ldr	r3, [r7, #28]
 8002f32:	2b0f      	cmp	r3, #15
 8002f34:	f67f ae90 	bls.w	8002c58 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002f38:	bf00      	nop
 8002f3a:	bf00      	nop
 8002f3c:	3724      	adds	r7, #36	; 0x24
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f44:	4770      	bx	lr
 8002f46:	bf00      	nop
 8002f48:	40023800 	.word	0x40023800
 8002f4c:	40013800 	.word	0x40013800
 8002f50:	40020000 	.word	0x40020000
 8002f54:	40020400 	.word	0x40020400
 8002f58:	40020800 	.word	0x40020800
 8002f5c:	40020c00 	.word	0x40020c00
 8002f60:	40021000 	.word	0x40021000
 8002f64:	40021400 	.word	0x40021400
 8002f68:	40021800 	.word	0x40021800
 8002f6c:	40021c00 	.word	0x40021c00
 8002f70:	40013c00 	.word	0x40013c00

08002f74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b083      	sub	sp, #12
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
 8002f7c:	460b      	mov	r3, r1
 8002f7e:	807b      	strh	r3, [r7, #2]
 8002f80:	4613      	mov	r3, r2
 8002f82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f84:	787b      	ldrb	r3, [r7, #1]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d003      	beq.n	8002f92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f8a:	887a      	ldrh	r2, [r7, #2]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002f90:	e003      	b.n	8002f9a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002f92:	887b      	ldrh	r3, [r7, #2]
 8002f94:	041a      	lsls	r2, r3, #16
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	619a      	str	r2, [r3, #24]
}
 8002f9a:	bf00      	nop
 8002f9c:	370c      	adds	r7, #12
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa4:	4770      	bx	lr
	...

08002fa8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b084      	sub	sp, #16
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d101      	bne.n	8002fba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	e12b      	b.n	8003212 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fc0:	b2db      	uxtb	r3, r3
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d106      	bne.n	8002fd4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002fce:	6878      	ldr	r0, [r7, #4]
 8002fd0:	f7fd fe04 	bl	8000bdc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2224      	movs	r2, #36	; 0x24
 8002fd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	681a      	ldr	r2, [r3, #0]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f022 0201 	bic.w	r2, r2, #1
 8002fea:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	681a      	ldr	r2, [r3, #0]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002ffa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	681a      	ldr	r2, [r3, #0]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800300a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800300c:	f001 fd2a 	bl	8004a64 <HAL_RCC_GetPCLK1Freq>
 8003010:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	4a81      	ldr	r2, [pc, #516]	; (800321c <HAL_I2C_Init+0x274>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d807      	bhi.n	800302c <HAL_I2C_Init+0x84>
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	4a80      	ldr	r2, [pc, #512]	; (8003220 <HAL_I2C_Init+0x278>)
 8003020:	4293      	cmp	r3, r2
 8003022:	bf94      	ite	ls
 8003024:	2301      	movls	r3, #1
 8003026:	2300      	movhi	r3, #0
 8003028:	b2db      	uxtb	r3, r3
 800302a:	e006      	b.n	800303a <HAL_I2C_Init+0x92>
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	4a7d      	ldr	r2, [pc, #500]	; (8003224 <HAL_I2C_Init+0x27c>)
 8003030:	4293      	cmp	r3, r2
 8003032:	bf94      	ite	ls
 8003034:	2301      	movls	r3, #1
 8003036:	2300      	movhi	r3, #0
 8003038:	b2db      	uxtb	r3, r3
 800303a:	2b00      	cmp	r3, #0
 800303c:	d001      	beq.n	8003042 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	e0e7      	b.n	8003212 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	4a78      	ldr	r2, [pc, #480]	; (8003228 <HAL_I2C_Init+0x280>)
 8003046:	fba2 2303 	umull	r2, r3, r2, r3
 800304a:	0c9b      	lsrs	r3, r3, #18
 800304c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	68ba      	ldr	r2, [r7, #8]
 800305e:	430a      	orrs	r2, r1
 8003060:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	6a1b      	ldr	r3, [r3, #32]
 8003068:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	4a6a      	ldr	r2, [pc, #424]	; (800321c <HAL_I2C_Init+0x274>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d802      	bhi.n	800307c <HAL_I2C_Init+0xd4>
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	3301      	adds	r3, #1
 800307a:	e009      	b.n	8003090 <HAL_I2C_Init+0xe8>
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003082:	fb02 f303 	mul.w	r3, r2, r3
 8003086:	4a69      	ldr	r2, [pc, #420]	; (800322c <HAL_I2C_Init+0x284>)
 8003088:	fba2 2303 	umull	r2, r3, r2, r3
 800308c:	099b      	lsrs	r3, r3, #6
 800308e:	3301      	adds	r3, #1
 8003090:	687a      	ldr	r2, [r7, #4]
 8003092:	6812      	ldr	r2, [r2, #0]
 8003094:	430b      	orrs	r3, r1
 8003096:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	69db      	ldr	r3, [r3, #28]
 800309e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80030a2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	495c      	ldr	r1, [pc, #368]	; (800321c <HAL_I2C_Init+0x274>)
 80030ac:	428b      	cmp	r3, r1
 80030ae:	d819      	bhi.n	80030e4 <HAL_I2C_Init+0x13c>
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	1e59      	subs	r1, r3, #1
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	005b      	lsls	r3, r3, #1
 80030ba:	fbb1 f3f3 	udiv	r3, r1, r3
 80030be:	1c59      	adds	r1, r3, #1
 80030c0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80030c4:	400b      	ands	r3, r1
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d00a      	beq.n	80030e0 <HAL_I2C_Init+0x138>
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	1e59      	subs	r1, r3, #1
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	005b      	lsls	r3, r3, #1
 80030d4:	fbb1 f3f3 	udiv	r3, r1, r3
 80030d8:	3301      	adds	r3, #1
 80030da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030de:	e051      	b.n	8003184 <HAL_I2C_Init+0x1dc>
 80030e0:	2304      	movs	r3, #4
 80030e2:	e04f      	b.n	8003184 <HAL_I2C_Init+0x1dc>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	689b      	ldr	r3, [r3, #8]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d111      	bne.n	8003110 <HAL_I2C_Init+0x168>
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	1e58      	subs	r0, r3, #1
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6859      	ldr	r1, [r3, #4]
 80030f4:	460b      	mov	r3, r1
 80030f6:	005b      	lsls	r3, r3, #1
 80030f8:	440b      	add	r3, r1
 80030fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80030fe:	3301      	adds	r3, #1
 8003100:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003104:	2b00      	cmp	r3, #0
 8003106:	bf0c      	ite	eq
 8003108:	2301      	moveq	r3, #1
 800310a:	2300      	movne	r3, #0
 800310c:	b2db      	uxtb	r3, r3
 800310e:	e012      	b.n	8003136 <HAL_I2C_Init+0x18e>
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	1e58      	subs	r0, r3, #1
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6859      	ldr	r1, [r3, #4]
 8003118:	460b      	mov	r3, r1
 800311a:	009b      	lsls	r3, r3, #2
 800311c:	440b      	add	r3, r1
 800311e:	0099      	lsls	r1, r3, #2
 8003120:	440b      	add	r3, r1
 8003122:	fbb0 f3f3 	udiv	r3, r0, r3
 8003126:	3301      	adds	r3, #1
 8003128:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800312c:	2b00      	cmp	r3, #0
 800312e:	bf0c      	ite	eq
 8003130:	2301      	moveq	r3, #1
 8003132:	2300      	movne	r3, #0
 8003134:	b2db      	uxtb	r3, r3
 8003136:	2b00      	cmp	r3, #0
 8003138:	d001      	beq.n	800313e <HAL_I2C_Init+0x196>
 800313a:	2301      	movs	r3, #1
 800313c:	e022      	b.n	8003184 <HAL_I2C_Init+0x1dc>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	689b      	ldr	r3, [r3, #8]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d10e      	bne.n	8003164 <HAL_I2C_Init+0x1bc>
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	1e58      	subs	r0, r3, #1
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6859      	ldr	r1, [r3, #4]
 800314e:	460b      	mov	r3, r1
 8003150:	005b      	lsls	r3, r3, #1
 8003152:	440b      	add	r3, r1
 8003154:	fbb0 f3f3 	udiv	r3, r0, r3
 8003158:	3301      	adds	r3, #1
 800315a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800315e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003162:	e00f      	b.n	8003184 <HAL_I2C_Init+0x1dc>
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	1e58      	subs	r0, r3, #1
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6859      	ldr	r1, [r3, #4]
 800316c:	460b      	mov	r3, r1
 800316e:	009b      	lsls	r3, r3, #2
 8003170:	440b      	add	r3, r1
 8003172:	0099      	lsls	r1, r3, #2
 8003174:	440b      	add	r3, r1
 8003176:	fbb0 f3f3 	udiv	r3, r0, r3
 800317a:	3301      	adds	r3, #1
 800317c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003180:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003184:	6879      	ldr	r1, [r7, #4]
 8003186:	6809      	ldr	r1, [r1, #0]
 8003188:	4313      	orrs	r3, r2
 800318a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	69da      	ldr	r2, [r3, #28]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6a1b      	ldr	r3, [r3, #32]
 800319e:	431a      	orrs	r2, r3
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	430a      	orrs	r2, r1
 80031a6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80031b2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80031b6:	687a      	ldr	r2, [r7, #4]
 80031b8:	6911      	ldr	r1, [r2, #16]
 80031ba:	687a      	ldr	r2, [r7, #4]
 80031bc:	68d2      	ldr	r2, [r2, #12]
 80031be:	4311      	orrs	r1, r2
 80031c0:	687a      	ldr	r2, [r7, #4]
 80031c2:	6812      	ldr	r2, [r2, #0]
 80031c4:	430b      	orrs	r3, r1
 80031c6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	68db      	ldr	r3, [r3, #12]
 80031ce:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	695a      	ldr	r2, [r3, #20]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	699b      	ldr	r3, [r3, #24]
 80031da:	431a      	orrs	r2, r3
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	430a      	orrs	r2, r1
 80031e2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	681a      	ldr	r2, [r3, #0]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f042 0201 	orr.w	r2, r2, #1
 80031f2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2200      	movs	r2, #0
 80031f8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2220      	movs	r2, #32
 80031fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2200      	movs	r2, #0
 8003206:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2200      	movs	r2, #0
 800320c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003210:	2300      	movs	r3, #0
}
 8003212:	4618      	mov	r0, r3
 8003214:	3710      	adds	r7, #16
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}
 800321a:	bf00      	nop
 800321c:	000186a0 	.word	0x000186a0
 8003220:	001e847f 	.word	0x001e847f
 8003224:	003d08ff 	.word	0x003d08ff
 8003228:	431bde83 	.word	0x431bde83
 800322c:	10624dd3 	.word	0x10624dd3

08003230 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b088      	sub	sp, #32
 8003234:	af02      	add	r7, sp, #8
 8003236:	60f8      	str	r0, [r7, #12]
 8003238:	4608      	mov	r0, r1
 800323a:	4611      	mov	r1, r2
 800323c:	461a      	mov	r2, r3
 800323e:	4603      	mov	r3, r0
 8003240:	817b      	strh	r3, [r7, #10]
 8003242:	460b      	mov	r3, r1
 8003244:	813b      	strh	r3, [r7, #8]
 8003246:	4613      	mov	r3, r2
 8003248:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800324a:	f7ff fb23 	bl	8002894 <HAL_GetTick>
 800324e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003256:	b2db      	uxtb	r3, r3
 8003258:	2b20      	cmp	r3, #32
 800325a:	f040 80d9 	bne.w	8003410 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	9300      	str	r3, [sp, #0]
 8003262:	2319      	movs	r3, #25
 8003264:	2201      	movs	r2, #1
 8003266:	496d      	ldr	r1, [pc, #436]	; (800341c <HAL_I2C_Mem_Write+0x1ec>)
 8003268:	68f8      	ldr	r0, [r7, #12]
 800326a:	f000 fdad 	bl	8003dc8 <I2C_WaitOnFlagUntilTimeout>
 800326e:	4603      	mov	r3, r0
 8003270:	2b00      	cmp	r3, #0
 8003272:	d001      	beq.n	8003278 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003274:	2302      	movs	r3, #2
 8003276:	e0cc      	b.n	8003412 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800327e:	2b01      	cmp	r3, #1
 8003280:	d101      	bne.n	8003286 <HAL_I2C_Mem_Write+0x56>
 8003282:	2302      	movs	r3, #2
 8003284:	e0c5      	b.n	8003412 <HAL_I2C_Mem_Write+0x1e2>
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	2201      	movs	r2, #1
 800328a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f003 0301 	and.w	r3, r3, #1
 8003298:	2b01      	cmp	r3, #1
 800329a:	d007      	beq.n	80032ac <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	681a      	ldr	r2, [r3, #0]
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f042 0201 	orr.w	r2, r2, #1
 80032aa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	681a      	ldr	r2, [r3, #0]
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80032ba:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	2221      	movs	r2, #33	; 0x21
 80032c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	2240      	movs	r2, #64	; 0x40
 80032c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	2200      	movs	r2, #0
 80032d0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	6a3a      	ldr	r2, [r7, #32]
 80032d6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80032dc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032e2:	b29a      	uxth	r2, r3
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	4a4d      	ldr	r2, [pc, #308]	; (8003420 <HAL_I2C_Mem_Write+0x1f0>)
 80032ec:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80032ee:	88f8      	ldrh	r0, [r7, #6]
 80032f0:	893a      	ldrh	r2, [r7, #8]
 80032f2:	8979      	ldrh	r1, [r7, #10]
 80032f4:	697b      	ldr	r3, [r7, #20]
 80032f6:	9301      	str	r3, [sp, #4]
 80032f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032fa:	9300      	str	r3, [sp, #0]
 80032fc:	4603      	mov	r3, r0
 80032fe:	68f8      	ldr	r0, [r7, #12]
 8003300:	f000 fbe4 	bl	8003acc <I2C_RequestMemoryWrite>
 8003304:	4603      	mov	r3, r0
 8003306:	2b00      	cmp	r3, #0
 8003308:	d052      	beq.n	80033b0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	e081      	b.n	8003412 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800330e:	697a      	ldr	r2, [r7, #20]
 8003310:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003312:	68f8      	ldr	r0, [r7, #12]
 8003314:	f000 fe2e 	bl	8003f74 <I2C_WaitOnTXEFlagUntilTimeout>
 8003318:	4603      	mov	r3, r0
 800331a:	2b00      	cmp	r3, #0
 800331c:	d00d      	beq.n	800333a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003322:	2b04      	cmp	r3, #4
 8003324:	d107      	bne.n	8003336 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	681a      	ldr	r2, [r3, #0]
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003334:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	e06b      	b.n	8003412 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800333e:	781a      	ldrb	r2, [r3, #0]
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800334a:	1c5a      	adds	r2, r3, #1
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003354:	3b01      	subs	r3, #1
 8003356:	b29a      	uxth	r2, r3
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003360:	b29b      	uxth	r3, r3
 8003362:	3b01      	subs	r3, #1
 8003364:	b29a      	uxth	r2, r3
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	695b      	ldr	r3, [r3, #20]
 8003370:	f003 0304 	and.w	r3, r3, #4
 8003374:	2b04      	cmp	r3, #4
 8003376:	d11b      	bne.n	80033b0 <HAL_I2C_Mem_Write+0x180>
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800337c:	2b00      	cmp	r3, #0
 800337e:	d017      	beq.n	80033b0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003384:	781a      	ldrb	r2, [r3, #0]
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003390:	1c5a      	adds	r2, r3, #1
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800339a:	3b01      	subs	r3, #1
 800339c:	b29a      	uxth	r2, r3
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033a6:	b29b      	uxth	r3, r3
 80033a8:	3b01      	subs	r3, #1
 80033aa:	b29a      	uxth	r2, r3
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d1aa      	bne.n	800330e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033b8:	697a      	ldr	r2, [r7, #20]
 80033ba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80033bc:	68f8      	ldr	r0, [r7, #12]
 80033be:	f000 fe1a 	bl	8003ff6 <I2C_WaitOnBTFFlagUntilTimeout>
 80033c2:	4603      	mov	r3, r0
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d00d      	beq.n	80033e4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033cc:	2b04      	cmp	r3, #4
 80033ce:	d107      	bne.n	80033e0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	681a      	ldr	r2, [r3, #0]
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033de:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80033e0:	2301      	movs	r3, #1
 80033e2:	e016      	b.n	8003412 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	681a      	ldr	r2, [r3, #0]
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	2220      	movs	r2, #32
 80033f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	2200      	movs	r2, #0
 8003400:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	2200      	movs	r2, #0
 8003408:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800340c:	2300      	movs	r3, #0
 800340e:	e000      	b.n	8003412 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003410:	2302      	movs	r3, #2
  }
}
 8003412:	4618      	mov	r0, r3
 8003414:	3718      	adds	r7, #24
 8003416:	46bd      	mov	sp, r7
 8003418:	bd80      	pop	{r7, pc}
 800341a:	bf00      	nop
 800341c:	00100002 	.word	0x00100002
 8003420:	ffff0000 	.word	0xffff0000

08003424 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b08c      	sub	sp, #48	; 0x30
 8003428:	af02      	add	r7, sp, #8
 800342a:	60f8      	str	r0, [r7, #12]
 800342c:	4608      	mov	r0, r1
 800342e:	4611      	mov	r1, r2
 8003430:	461a      	mov	r2, r3
 8003432:	4603      	mov	r3, r0
 8003434:	817b      	strh	r3, [r7, #10]
 8003436:	460b      	mov	r3, r1
 8003438:	813b      	strh	r3, [r7, #8]
 800343a:	4613      	mov	r3, r2
 800343c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800343e:	f7ff fa29 	bl	8002894 <HAL_GetTick>
 8003442:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800344a:	b2db      	uxtb	r3, r3
 800344c:	2b20      	cmp	r3, #32
 800344e:	f040 8208 	bne.w	8003862 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003454:	9300      	str	r3, [sp, #0]
 8003456:	2319      	movs	r3, #25
 8003458:	2201      	movs	r2, #1
 800345a:	497b      	ldr	r1, [pc, #492]	; (8003648 <HAL_I2C_Mem_Read+0x224>)
 800345c:	68f8      	ldr	r0, [r7, #12]
 800345e:	f000 fcb3 	bl	8003dc8 <I2C_WaitOnFlagUntilTimeout>
 8003462:	4603      	mov	r3, r0
 8003464:	2b00      	cmp	r3, #0
 8003466:	d001      	beq.n	800346c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003468:	2302      	movs	r3, #2
 800346a:	e1fb      	b.n	8003864 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003472:	2b01      	cmp	r3, #1
 8003474:	d101      	bne.n	800347a <HAL_I2C_Mem_Read+0x56>
 8003476:	2302      	movs	r3, #2
 8003478:	e1f4      	b.n	8003864 <HAL_I2C_Mem_Read+0x440>
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	2201      	movs	r2, #1
 800347e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f003 0301 	and.w	r3, r3, #1
 800348c:	2b01      	cmp	r3, #1
 800348e:	d007      	beq.n	80034a0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	681a      	ldr	r2, [r3, #0]
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f042 0201 	orr.w	r2, r2, #1
 800349e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	681a      	ldr	r2, [r3, #0]
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80034ae:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	2222      	movs	r2, #34	; 0x22
 80034b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	2240      	movs	r2, #64	; 0x40
 80034bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	2200      	movs	r2, #0
 80034c4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80034ca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80034d0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034d6:	b29a      	uxth	r2, r3
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	4a5b      	ldr	r2, [pc, #364]	; (800364c <HAL_I2C_Mem_Read+0x228>)
 80034e0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80034e2:	88f8      	ldrh	r0, [r7, #6]
 80034e4:	893a      	ldrh	r2, [r7, #8]
 80034e6:	8979      	ldrh	r1, [r7, #10]
 80034e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ea:	9301      	str	r3, [sp, #4]
 80034ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034ee:	9300      	str	r3, [sp, #0]
 80034f0:	4603      	mov	r3, r0
 80034f2:	68f8      	ldr	r0, [r7, #12]
 80034f4:	f000 fb80 	bl	8003bf8 <I2C_RequestMemoryRead>
 80034f8:	4603      	mov	r3, r0
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d001      	beq.n	8003502 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80034fe:	2301      	movs	r3, #1
 8003500:	e1b0      	b.n	8003864 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003506:	2b00      	cmp	r3, #0
 8003508:	d113      	bne.n	8003532 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800350a:	2300      	movs	r3, #0
 800350c:	623b      	str	r3, [r7, #32]
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	695b      	ldr	r3, [r3, #20]
 8003514:	623b      	str	r3, [r7, #32]
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	699b      	ldr	r3, [r3, #24]
 800351c:	623b      	str	r3, [r7, #32]
 800351e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	681a      	ldr	r2, [r3, #0]
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800352e:	601a      	str	r2, [r3, #0]
 8003530:	e184      	b.n	800383c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003536:	2b01      	cmp	r3, #1
 8003538:	d11b      	bne.n	8003572 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	681a      	ldr	r2, [r3, #0]
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003548:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800354a:	2300      	movs	r3, #0
 800354c:	61fb      	str	r3, [r7, #28]
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	695b      	ldr	r3, [r3, #20]
 8003554:	61fb      	str	r3, [r7, #28]
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	699b      	ldr	r3, [r3, #24]
 800355c:	61fb      	str	r3, [r7, #28]
 800355e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	681a      	ldr	r2, [r3, #0]
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800356e:	601a      	str	r2, [r3, #0]
 8003570:	e164      	b.n	800383c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003576:	2b02      	cmp	r3, #2
 8003578:	d11b      	bne.n	80035b2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	681a      	ldr	r2, [r3, #0]
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003588:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	681a      	ldr	r2, [r3, #0]
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003598:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800359a:	2300      	movs	r3, #0
 800359c:	61bb      	str	r3, [r7, #24]
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	695b      	ldr	r3, [r3, #20]
 80035a4:	61bb      	str	r3, [r7, #24]
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	699b      	ldr	r3, [r3, #24]
 80035ac:	61bb      	str	r3, [r7, #24]
 80035ae:	69bb      	ldr	r3, [r7, #24]
 80035b0:	e144      	b.n	800383c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035b2:	2300      	movs	r3, #0
 80035b4:	617b      	str	r3, [r7, #20]
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	695b      	ldr	r3, [r3, #20]
 80035bc:	617b      	str	r3, [r7, #20]
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	699b      	ldr	r3, [r3, #24]
 80035c4:	617b      	str	r3, [r7, #20]
 80035c6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80035c8:	e138      	b.n	800383c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035ce:	2b03      	cmp	r3, #3
 80035d0:	f200 80f1 	bhi.w	80037b6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035d8:	2b01      	cmp	r3, #1
 80035da:	d123      	bne.n	8003624 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035de:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80035e0:	68f8      	ldr	r0, [r7, #12]
 80035e2:	f000 fd49 	bl	8004078 <I2C_WaitOnRXNEFlagUntilTimeout>
 80035e6:	4603      	mov	r3, r0
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d001      	beq.n	80035f0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80035ec:	2301      	movs	r3, #1
 80035ee:	e139      	b.n	8003864 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	691a      	ldr	r2, [r3, #16]
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035fa:	b2d2      	uxtb	r2, r2
 80035fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003602:	1c5a      	adds	r2, r3, #1
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800360c:	3b01      	subs	r3, #1
 800360e:	b29a      	uxth	r2, r3
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003618:	b29b      	uxth	r3, r3
 800361a:	3b01      	subs	r3, #1
 800361c:	b29a      	uxth	r2, r3
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003622:	e10b      	b.n	800383c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003628:	2b02      	cmp	r3, #2
 800362a:	d14e      	bne.n	80036ca <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800362c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800362e:	9300      	str	r3, [sp, #0]
 8003630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003632:	2200      	movs	r2, #0
 8003634:	4906      	ldr	r1, [pc, #24]	; (8003650 <HAL_I2C_Mem_Read+0x22c>)
 8003636:	68f8      	ldr	r0, [r7, #12]
 8003638:	f000 fbc6 	bl	8003dc8 <I2C_WaitOnFlagUntilTimeout>
 800363c:	4603      	mov	r3, r0
 800363e:	2b00      	cmp	r3, #0
 8003640:	d008      	beq.n	8003654 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	e10e      	b.n	8003864 <HAL_I2C_Mem_Read+0x440>
 8003646:	bf00      	nop
 8003648:	00100002 	.word	0x00100002
 800364c:	ffff0000 	.word	0xffff0000
 8003650:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	681a      	ldr	r2, [r3, #0]
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003662:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	691a      	ldr	r2, [r3, #16]
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800366e:	b2d2      	uxtb	r2, r2
 8003670:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003676:	1c5a      	adds	r2, r3, #1
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003680:	3b01      	subs	r3, #1
 8003682:	b29a      	uxth	r2, r3
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800368c:	b29b      	uxth	r3, r3
 800368e:	3b01      	subs	r3, #1
 8003690:	b29a      	uxth	r2, r3
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	691a      	ldr	r2, [r3, #16]
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a0:	b2d2      	uxtb	r2, r2
 80036a2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a8:	1c5a      	adds	r2, r3, #1
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036b2:	3b01      	subs	r3, #1
 80036b4:	b29a      	uxth	r2, r3
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036be:	b29b      	uxth	r3, r3
 80036c0:	3b01      	subs	r3, #1
 80036c2:	b29a      	uxth	r2, r3
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80036c8:	e0b8      	b.n	800383c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80036ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036cc:	9300      	str	r3, [sp, #0]
 80036ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036d0:	2200      	movs	r2, #0
 80036d2:	4966      	ldr	r1, [pc, #408]	; (800386c <HAL_I2C_Mem_Read+0x448>)
 80036d4:	68f8      	ldr	r0, [r7, #12]
 80036d6:	f000 fb77 	bl	8003dc8 <I2C_WaitOnFlagUntilTimeout>
 80036da:	4603      	mov	r3, r0
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d001      	beq.n	80036e4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80036e0:	2301      	movs	r3, #1
 80036e2:	e0bf      	b.n	8003864 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	681a      	ldr	r2, [r3, #0]
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036f2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	691a      	ldr	r2, [r3, #16]
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036fe:	b2d2      	uxtb	r2, r2
 8003700:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003706:	1c5a      	adds	r2, r3, #1
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003710:	3b01      	subs	r3, #1
 8003712:	b29a      	uxth	r2, r3
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800371c:	b29b      	uxth	r3, r3
 800371e:	3b01      	subs	r3, #1
 8003720:	b29a      	uxth	r2, r3
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003728:	9300      	str	r3, [sp, #0]
 800372a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800372c:	2200      	movs	r2, #0
 800372e:	494f      	ldr	r1, [pc, #316]	; (800386c <HAL_I2C_Mem_Read+0x448>)
 8003730:	68f8      	ldr	r0, [r7, #12]
 8003732:	f000 fb49 	bl	8003dc8 <I2C_WaitOnFlagUntilTimeout>
 8003736:	4603      	mov	r3, r0
 8003738:	2b00      	cmp	r3, #0
 800373a:	d001      	beq.n	8003740 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800373c:	2301      	movs	r3, #1
 800373e:	e091      	b.n	8003864 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	681a      	ldr	r2, [r3, #0]
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800374e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	691a      	ldr	r2, [r3, #16]
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800375a:	b2d2      	uxtb	r2, r2
 800375c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003762:	1c5a      	adds	r2, r3, #1
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800376c:	3b01      	subs	r3, #1
 800376e:	b29a      	uxth	r2, r3
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003778:	b29b      	uxth	r3, r3
 800377a:	3b01      	subs	r3, #1
 800377c:	b29a      	uxth	r2, r3
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	691a      	ldr	r2, [r3, #16]
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800378c:	b2d2      	uxtb	r2, r2
 800378e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003794:	1c5a      	adds	r2, r3, #1
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800379e:	3b01      	subs	r3, #1
 80037a0:	b29a      	uxth	r2, r3
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037aa:	b29b      	uxth	r3, r3
 80037ac:	3b01      	subs	r3, #1
 80037ae:	b29a      	uxth	r2, r3
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80037b4:	e042      	b.n	800383c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037b8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80037ba:	68f8      	ldr	r0, [r7, #12]
 80037bc:	f000 fc5c 	bl	8004078 <I2C_WaitOnRXNEFlagUntilTimeout>
 80037c0:	4603      	mov	r3, r0
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d001      	beq.n	80037ca <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80037c6:	2301      	movs	r3, #1
 80037c8:	e04c      	b.n	8003864 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	691a      	ldr	r2, [r3, #16]
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d4:	b2d2      	uxtb	r2, r2
 80037d6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037dc:	1c5a      	adds	r2, r3, #1
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037e6:	3b01      	subs	r3, #1
 80037e8:	b29a      	uxth	r2, r3
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037f2:	b29b      	uxth	r3, r3
 80037f4:	3b01      	subs	r3, #1
 80037f6:	b29a      	uxth	r2, r3
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	695b      	ldr	r3, [r3, #20]
 8003802:	f003 0304 	and.w	r3, r3, #4
 8003806:	2b04      	cmp	r3, #4
 8003808:	d118      	bne.n	800383c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	691a      	ldr	r2, [r3, #16]
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003814:	b2d2      	uxtb	r2, r2
 8003816:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800381c:	1c5a      	adds	r2, r3, #1
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003826:	3b01      	subs	r3, #1
 8003828:	b29a      	uxth	r2, r3
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003832:	b29b      	uxth	r3, r3
 8003834:	3b01      	subs	r3, #1
 8003836:	b29a      	uxth	r2, r3
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003840:	2b00      	cmp	r3, #0
 8003842:	f47f aec2 	bne.w	80035ca <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	2220      	movs	r2, #32
 800384a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	2200      	movs	r2, #0
 8003852:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	2200      	movs	r2, #0
 800385a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800385e:	2300      	movs	r3, #0
 8003860:	e000      	b.n	8003864 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003862:	2302      	movs	r3, #2
  }
}
 8003864:	4618      	mov	r0, r3
 8003866:	3728      	adds	r7, #40	; 0x28
 8003868:	46bd      	mov	sp, r7
 800386a:	bd80      	pop	{r7, pc}
 800386c:	00010004 	.word	0x00010004

08003870 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b08a      	sub	sp, #40	; 0x28
 8003874:	af02      	add	r7, sp, #8
 8003876:	60f8      	str	r0, [r7, #12]
 8003878:	607a      	str	r2, [r7, #4]
 800387a:	603b      	str	r3, [r7, #0]
 800387c:	460b      	mov	r3, r1
 800387e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003880:	f7ff f808 	bl	8002894 <HAL_GetTick>
 8003884:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8003886:	2301      	movs	r3, #1
 8003888:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003890:	b2db      	uxtb	r3, r3
 8003892:	2b20      	cmp	r3, #32
 8003894:	f040 8111 	bne.w	8003aba <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003898:	69fb      	ldr	r3, [r7, #28]
 800389a:	9300      	str	r3, [sp, #0]
 800389c:	2319      	movs	r3, #25
 800389e:	2201      	movs	r2, #1
 80038a0:	4988      	ldr	r1, [pc, #544]	; (8003ac4 <HAL_I2C_IsDeviceReady+0x254>)
 80038a2:	68f8      	ldr	r0, [r7, #12]
 80038a4:	f000 fa90 	bl	8003dc8 <I2C_WaitOnFlagUntilTimeout>
 80038a8:	4603      	mov	r3, r0
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d001      	beq.n	80038b2 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80038ae:	2302      	movs	r3, #2
 80038b0:	e104      	b.n	8003abc <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038b8:	2b01      	cmp	r3, #1
 80038ba:	d101      	bne.n	80038c0 <HAL_I2C_IsDeviceReady+0x50>
 80038bc:	2302      	movs	r3, #2
 80038be:	e0fd      	b.n	8003abc <HAL_I2C_IsDeviceReady+0x24c>
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	2201      	movs	r2, #1
 80038c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f003 0301 	and.w	r3, r3, #1
 80038d2:	2b01      	cmp	r3, #1
 80038d4:	d007      	beq.n	80038e6 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	681a      	ldr	r2, [r3, #0]
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f042 0201 	orr.w	r2, r2, #1
 80038e4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	681a      	ldr	r2, [r3, #0]
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80038f4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	2224      	movs	r2, #36	; 0x24
 80038fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	2200      	movs	r2, #0
 8003902:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	4a70      	ldr	r2, [pc, #448]	; (8003ac8 <HAL_I2C_IsDeviceReady+0x258>)
 8003908:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	681a      	ldr	r2, [r3, #0]
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003918:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800391a:	69fb      	ldr	r3, [r7, #28]
 800391c:	9300      	str	r3, [sp, #0]
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	2200      	movs	r2, #0
 8003922:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003926:	68f8      	ldr	r0, [r7, #12]
 8003928:	f000 fa4e 	bl	8003dc8 <I2C_WaitOnFlagUntilTimeout>
 800392c:	4603      	mov	r3, r0
 800392e:	2b00      	cmp	r3, #0
 8003930:	d00d      	beq.n	800394e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800393c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003940:	d103      	bne.n	800394a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003948:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800394a:	2303      	movs	r3, #3
 800394c:	e0b6      	b.n	8003abc <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800394e:	897b      	ldrh	r3, [r7, #10]
 8003950:	b2db      	uxtb	r3, r3
 8003952:	461a      	mov	r2, r3
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800395c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800395e:	f7fe ff99 	bl	8002894 <HAL_GetTick>
 8003962:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	695b      	ldr	r3, [r3, #20]
 800396a:	f003 0302 	and.w	r3, r3, #2
 800396e:	2b02      	cmp	r3, #2
 8003970:	bf0c      	ite	eq
 8003972:	2301      	moveq	r3, #1
 8003974:	2300      	movne	r3, #0
 8003976:	b2db      	uxtb	r3, r3
 8003978:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	695b      	ldr	r3, [r3, #20]
 8003980:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003984:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003988:	bf0c      	ite	eq
 800398a:	2301      	moveq	r3, #1
 800398c:	2300      	movne	r3, #0
 800398e:	b2db      	uxtb	r3, r3
 8003990:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003992:	e025      	b.n	80039e0 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003994:	f7fe ff7e 	bl	8002894 <HAL_GetTick>
 8003998:	4602      	mov	r2, r0
 800399a:	69fb      	ldr	r3, [r7, #28]
 800399c:	1ad3      	subs	r3, r2, r3
 800399e:	683a      	ldr	r2, [r7, #0]
 80039a0:	429a      	cmp	r2, r3
 80039a2:	d302      	bcc.n	80039aa <HAL_I2C_IsDeviceReady+0x13a>
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d103      	bne.n	80039b2 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	22a0      	movs	r2, #160	; 0xa0
 80039ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	695b      	ldr	r3, [r3, #20]
 80039b8:	f003 0302 	and.w	r3, r3, #2
 80039bc:	2b02      	cmp	r3, #2
 80039be:	bf0c      	ite	eq
 80039c0:	2301      	moveq	r3, #1
 80039c2:	2300      	movne	r3, #0
 80039c4:	b2db      	uxtb	r3, r3
 80039c6:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	695b      	ldr	r3, [r3, #20]
 80039ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039d6:	bf0c      	ite	eq
 80039d8:	2301      	moveq	r3, #1
 80039da:	2300      	movne	r3, #0
 80039dc:	b2db      	uxtb	r3, r3
 80039de:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039e6:	b2db      	uxtb	r3, r3
 80039e8:	2ba0      	cmp	r3, #160	; 0xa0
 80039ea:	d005      	beq.n	80039f8 <HAL_I2C_IsDeviceReady+0x188>
 80039ec:	7dfb      	ldrb	r3, [r7, #23]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d102      	bne.n	80039f8 <HAL_I2C_IsDeviceReady+0x188>
 80039f2:	7dbb      	ldrb	r3, [r7, #22]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d0cd      	beq.n	8003994 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	2220      	movs	r2, #32
 80039fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	695b      	ldr	r3, [r3, #20]
 8003a06:	f003 0302 	and.w	r3, r3, #2
 8003a0a:	2b02      	cmp	r3, #2
 8003a0c:	d129      	bne.n	8003a62 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	681a      	ldr	r2, [r3, #0]
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a1c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a1e:	2300      	movs	r3, #0
 8003a20:	613b      	str	r3, [r7, #16]
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	695b      	ldr	r3, [r3, #20]
 8003a28:	613b      	str	r3, [r7, #16]
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	699b      	ldr	r3, [r3, #24]
 8003a30:	613b      	str	r3, [r7, #16]
 8003a32:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003a34:	69fb      	ldr	r3, [r7, #28]
 8003a36:	9300      	str	r3, [sp, #0]
 8003a38:	2319      	movs	r3, #25
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	4921      	ldr	r1, [pc, #132]	; (8003ac4 <HAL_I2C_IsDeviceReady+0x254>)
 8003a3e:	68f8      	ldr	r0, [r7, #12]
 8003a40:	f000 f9c2 	bl	8003dc8 <I2C_WaitOnFlagUntilTimeout>
 8003a44:	4603      	mov	r3, r0
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d001      	beq.n	8003a4e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	e036      	b.n	8003abc <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	2220      	movs	r2, #32
 8003a52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8003a5e:	2300      	movs	r3, #0
 8003a60:	e02c      	b.n	8003abc <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	681a      	ldr	r2, [r3, #0]
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a70:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003a7a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003a7c:	69fb      	ldr	r3, [r7, #28]
 8003a7e:	9300      	str	r3, [sp, #0]
 8003a80:	2319      	movs	r3, #25
 8003a82:	2201      	movs	r2, #1
 8003a84:	490f      	ldr	r1, [pc, #60]	; (8003ac4 <HAL_I2C_IsDeviceReady+0x254>)
 8003a86:	68f8      	ldr	r0, [r7, #12]
 8003a88:	f000 f99e 	bl	8003dc8 <I2C_WaitOnFlagUntilTimeout>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d001      	beq.n	8003a96 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003a92:	2301      	movs	r3, #1
 8003a94:	e012      	b.n	8003abc <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003a96:	69bb      	ldr	r3, [r7, #24]
 8003a98:	3301      	adds	r3, #1
 8003a9a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003a9c:	69ba      	ldr	r2, [r7, #24]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	429a      	cmp	r2, r3
 8003aa2:	f4ff af32 	bcc.w	800390a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	2220      	movs	r2, #32
 8003aaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	e000      	b.n	8003abc <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003aba:	2302      	movs	r3, #2
  }
}
 8003abc:	4618      	mov	r0, r3
 8003abe:	3720      	adds	r7, #32
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bd80      	pop	{r7, pc}
 8003ac4:	00100002 	.word	0x00100002
 8003ac8:	ffff0000 	.word	0xffff0000

08003acc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b088      	sub	sp, #32
 8003ad0:	af02      	add	r7, sp, #8
 8003ad2:	60f8      	str	r0, [r7, #12]
 8003ad4:	4608      	mov	r0, r1
 8003ad6:	4611      	mov	r1, r2
 8003ad8:	461a      	mov	r2, r3
 8003ada:	4603      	mov	r3, r0
 8003adc:	817b      	strh	r3, [r7, #10]
 8003ade:	460b      	mov	r3, r1
 8003ae0:	813b      	strh	r3, [r7, #8]
 8003ae2:	4613      	mov	r3, r2
 8003ae4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	681a      	ldr	r2, [r3, #0]
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003af4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af8:	9300      	str	r3, [sp, #0]
 8003afa:	6a3b      	ldr	r3, [r7, #32]
 8003afc:	2200      	movs	r2, #0
 8003afe:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003b02:	68f8      	ldr	r0, [r7, #12]
 8003b04:	f000 f960 	bl	8003dc8 <I2C_WaitOnFlagUntilTimeout>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d00d      	beq.n	8003b2a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b1c:	d103      	bne.n	8003b26 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b24:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003b26:	2303      	movs	r3, #3
 8003b28:	e05f      	b.n	8003bea <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003b2a:	897b      	ldrh	r3, [r7, #10]
 8003b2c:	b2db      	uxtb	r3, r3
 8003b2e:	461a      	mov	r2, r3
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003b38:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b3c:	6a3a      	ldr	r2, [r7, #32]
 8003b3e:	492d      	ldr	r1, [pc, #180]	; (8003bf4 <I2C_RequestMemoryWrite+0x128>)
 8003b40:	68f8      	ldr	r0, [r7, #12]
 8003b42:	f000 f998 	bl	8003e76 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b46:	4603      	mov	r3, r0
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d001      	beq.n	8003b50 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	e04c      	b.n	8003bea <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b50:	2300      	movs	r3, #0
 8003b52:	617b      	str	r3, [r7, #20]
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	695b      	ldr	r3, [r3, #20]
 8003b5a:	617b      	str	r3, [r7, #20]
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	699b      	ldr	r3, [r3, #24]
 8003b62:	617b      	str	r3, [r7, #20]
 8003b64:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b68:	6a39      	ldr	r1, [r7, #32]
 8003b6a:	68f8      	ldr	r0, [r7, #12]
 8003b6c:	f000 fa02 	bl	8003f74 <I2C_WaitOnTXEFlagUntilTimeout>
 8003b70:	4603      	mov	r3, r0
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d00d      	beq.n	8003b92 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b7a:	2b04      	cmp	r3, #4
 8003b7c:	d107      	bne.n	8003b8e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	681a      	ldr	r2, [r3, #0]
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b8c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	e02b      	b.n	8003bea <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003b92:	88fb      	ldrh	r3, [r7, #6]
 8003b94:	2b01      	cmp	r3, #1
 8003b96:	d105      	bne.n	8003ba4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003b98:	893b      	ldrh	r3, [r7, #8]
 8003b9a:	b2da      	uxtb	r2, r3
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	611a      	str	r2, [r3, #16]
 8003ba2:	e021      	b.n	8003be8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003ba4:	893b      	ldrh	r3, [r7, #8]
 8003ba6:	0a1b      	lsrs	r3, r3, #8
 8003ba8:	b29b      	uxth	r3, r3
 8003baa:	b2da      	uxtb	r2, r3
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003bb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bb4:	6a39      	ldr	r1, [r7, #32]
 8003bb6:	68f8      	ldr	r0, [r7, #12]
 8003bb8:	f000 f9dc 	bl	8003f74 <I2C_WaitOnTXEFlagUntilTimeout>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d00d      	beq.n	8003bde <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc6:	2b04      	cmp	r3, #4
 8003bc8:	d107      	bne.n	8003bda <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	681a      	ldr	r2, [r3, #0]
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bd8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	e005      	b.n	8003bea <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003bde:	893b      	ldrh	r3, [r7, #8]
 8003be0:	b2da      	uxtb	r2, r3
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003be8:	2300      	movs	r3, #0
}
 8003bea:	4618      	mov	r0, r3
 8003bec:	3718      	adds	r7, #24
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bd80      	pop	{r7, pc}
 8003bf2:	bf00      	nop
 8003bf4:	00010002 	.word	0x00010002

08003bf8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b088      	sub	sp, #32
 8003bfc:	af02      	add	r7, sp, #8
 8003bfe:	60f8      	str	r0, [r7, #12]
 8003c00:	4608      	mov	r0, r1
 8003c02:	4611      	mov	r1, r2
 8003c04:	461a      	mov	r2, r3
 8003c06:	4603      	mov	r3, r0
 8003c08:	817b      	strh	r3, [r7, #10]
 8003c0a:	460b      	mov	r3, r1
 8003c0c:	813b      	strh	r3, [r7, #8]
 8003c0e:	4613      	mov	r3, r2
 8003c10:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	681a      	ldr	r2, [r3, #0]
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003c20:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	681a      	ldr	r2, [r3, #0]
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c30:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c34:	9300      	str	r3, [sp, #0]
 8003c36:	6a3b      	ldr	r3, [r7, #32]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003c3e:	68f8      	ldr	r0, [r7, #12]
 8003c40:	f000 f8c2 	bl	8003dc8 <I2C_WaitOnFlagUntilTimeout>
 8003c44:	4603      	mov	r3, r0
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d00d      	beq.n	8003c66 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c58:	d103      	bne.n	8003c62 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c60:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003c62:	2303      	movs	r3, #3
 8003c64:	e0aa      	b.n	8003dbc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003c66:	897b      	ldrh	r3, [r7, #10]
 8003c68:	b2db      	uxtb	r3, r3
 8003c6a:	461a      	mov	r2, r3
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003c74:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c78:	6a3a      	ldr	r2, [r7, #32]
 8003c7a:	4952      	ldr	r1, [pc, #328]	; (8003dc4 <I2C_RequestMemoryRead+0x1cc>)
 8003c7c:	68f8      	ldr	r0, [r7, #12]
 8003c7e:	f000 f8fa 	bl	8003e76 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c82:	4603      	mov	r3, r0
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d001      	beq.n	8003c8c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003c88:	2301      	movs	r3, #1
 8003c8a:	e097      	b.n	8003dbc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	617b      	str	r3, [r7, #20]
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	695b      	ldr	r3, [r3, #20]
 8003c96:	617b      	str	r3, [r7, #20]
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	699b      	ldr	r3, [r3, #24]
 8003c9e:	617b      	str	r3, [r7, #20]
 8003ca0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ca2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ca4:	6a39      	ldr	r1, [r7, #32]
 8003ca6:	68f8      	ldr	r0, [r7, #12]
 8003ca8:	f000 f964 	bl	8003f74 <I2C_WaitOnTXEFlagUntilTimeout>
 8003cac:	4603      	mov	r3, r0
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d00d      	beq.n	8003cce <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb6:	2b04      	cmp	r3, #4
 8003cb8:	d107      	bne.n	8003cca <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	681a      	ldr	r2, [r3, #0]
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cc8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	e076      	b.n	8003dbc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003cce:	88fb      	ldrh	r3, [r7, #6]
 8003cd0:	2b01      	cmp	r3, #1
 8003cd2:	d105      	bne.n	8003ce0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003cd4:	893b      	ldrh	r3, [r7, #8]
 8003cd6:	b2da      	uxtb	r2, r3
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	611a      	str	r2, [r3, #16]
 8003cde:	e021      	b.n	8003d24 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003ce0:	893b      	ldrh	r3, [r7, #8]
 8003ce2:	0a1b      	lsrs	r3, r3, #8
 8003ce4:	b29b      	uxth	r3, r3
 8003ce6:	b2da      	uxtb	r2, r3
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003cee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cf0:	6a39      	ldr	r1, [r7, #32]
 8003cf2:	68f8      	ldr	r0, [r7, #12]
 8003cf4:	f000 f93e 	bl	8003f74 <I2C_WaitOnTXEFlagUntilTimeout>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d00d      	beq.n	8003d1a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d02:	2b04      	cmp	r3, #4
 8003d04:	d107      	bne.n	8003d16 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	681a      	ldr	r2, [r3, #0]
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d14:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003d16:	2301      	movs	r3, #1
 8003d18:	e050      	b.n	8003dbc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003d1a:	893b      	ldrh	r3, [r7, #8]
 8003d1c:	b2da      	uxtb	r2, r3
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d26:	6a39      	ldr	r1, [r7, #32]
 8003d28:	68f8      	ldr	r0, [r7, #12]
 8003d2a:	f000 f923 	bl	8003f74 <I2C_WaitOnTXEFlagUntilTimeout>
 8003d2e:	4603      	mov	r3, r0
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d00d      	beq.n	8003d50 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d38:	2b04      	cmp	r3, #4
 8003d3a:	d107      	bne.n	8003d4c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	681a      	ldr	r2, [r3, #0]
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d4a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	e035      	b.n	8003dbc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	681a      	ldr	r2, [r3, #0]
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d5e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d62:	9300      	str	r3, [sp, #0]
 8003d64:	6a3b      	ldr	r3, [r7, #32]
 8003d66:	2200      	movs	r2, #0
 8003d68:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003d6c:	68f8      	ldr	r0, [r7, #12]
 8003d6e:	f000 f82b 	bl	8003dc8 <I2C_WaitOnFlagUntilTimeout>
 8003d72:	4603      	mov	r3, r0
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d00d      	beq.n	8003d94 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d86:	d103      	bne.n	8003d90 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d8e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003d90:	2303      	movs	r3, #3
 8003d92:	e013      	b.n	8003dbc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003d94:	897b      	ldrh	r3, [r7, #10]
 8003d96:	b2db      	uxtb	r3, r3
 8003d98:	f043 0301 	orr.w	r3, r3, #1
 8003d9c:	b2da      	uxtb	r2, r3
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da6:	6a3a      	ldr	r2, [r7, #32]
 8003da8:	4906      	ldr	r1, [pc, #24]	; (8003dc4 <I2C_RequestMemoryRead+0x1cc>)
 8003daa:	68f8      	ldr	r0, [r7, #12]
 8003dac:	f000 f863 	bl	8003e76 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003db0:	4603      	mov	r3, r0
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d001      	beq.n	8003dba <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003db6:	2301      	movs	r3, #1
 8003db8:	e000      	b.n	8003dbc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003dba:	2300      	movs	r3, #0
}
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	3718      	adds	r7, #24
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	bd80      	pop	{r7, pc}
 8003dc4:	00010002 	.word	0x00010002

08003dc8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b084      	sub	sp, #16
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	60f8      	str	r0, [r7, #12]
 8003dd0:	60b9      	str	r1, [r7, #8]
 8003dd2:	603b      	str	r3, [r7, #0]
 8003dd4:	4613      	mov	r3, r2
 8003dd6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003dd8:	e025      	b.n	8003e26 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003de0:	d021      	beq.n	8003e26 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003de2:	f7fe fd57 	bl	8002894 <HAL_GetTick>
 8003de6:	4602      	mov	r2, r0
 8003de8:	69bb      	ldr	r3, [r7, #24]
 8003dea:	1ad3      	subs	r3, r2, r3
 8003dec:	683a      	ldr	r2, [r7, #0]
 8003dee:	429a      	cmp	r2, r3
 8003df0:	d302      	bcc.n	8003df8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d116      	bne.n	8003e26 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	2220      	movs	r2, #32
 8003e02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e12:	f043 0220 	orr.w	r2, r3, #32
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003e22:	2301      	movs	r3, #1
 8003e24:	e023      	b.n	8003e6e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e26:	68bb      	ldr	r3, [r7, #8]
 8003e28:	0c1b      	lsrs	r3, r3, #16
 8003e2a:	b2db      	uxtb	r3, r3
 8003e2c:	2b01      	cmp	r3, #1
 8003e2e:	d10d      	bne.n	8003e4c <I2C_WaitOnFlagUntilTimeout+0x84>
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	695b      	ldr	r3, [r3, #20]
 8003e36:	43da      	mvns	r2, r3
 8003e38:	68bb      	ldr	r3, [r7, #8]
 8003e3a:	4013      	ands	r3, r2
 8003e3c:	b29b      	uxth	r3, r3
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	bf0c      	ite	eq
 8003e42:	2301      	moveq	r3, #1
 8003e44:	2300      	movne	r3, #0
 8003e46:	b2db      	uxtb	r3, r3
 8003e48:	461a      	mov	r2, r3
 8003e4a:	e00c      	b.n	8003e66 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	699b      	ldr	r3, [r3, #24]
 8003e52:	43da      	mvns	r2, r3
 8003e54:	68bb      	ldr	r3, [r7, #8]
 8003e56:	4013      	ands	r3, r2
 8003e58:	b29b      	uxth	r3, r3
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	bf0c      	ite	eq
 8003e5e:	2301      	moveq	r3, #1
 8003e60:	2300      	movne	r3, #0
 8003e62:	b2db      	uxtb	r3, r3
 8003e64:	461a      	mov	r2, r3
 8003e66:	79fb      	ldrb	r3, [r7, #7]
 8003e68:	429a      	cmp	r2, r3
 8003e6a:	d0b6      	beq.n	8003dda <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003e6c:	2300      	movs	r3, #0
}
 8003e6e:	4618      	mov	r0, r3
 8003e70:	3710      	adds	r7, #16
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bd80      	pop	{r7, pc}

08003e76 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003e76:	b580      	push	{r7, lr}
 8003e78:	b084      	sub	sp, #16
 8003e7a:	af00      	add	r7, sp, #0
 8003e7c:	60f8      	str	r0, [r7, #12]
 8003e7e:	60b9      	str	r1, [r7, #8]
 8003e80:	607a      	str	r2, [r7, #4]
 8003e82:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003e84:	e051      	b.n	8003f2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	695b      	ldr	r3, [r3, #20]
 8003e8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e94:	d123      	bne.n	8003ede <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	681a      	ldr	r2, [r3, #0]
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ea4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003eae:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	2220      	movs	r2, #32
 8003eba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eca:	f043 0204 	orr.w	r2, r3, #4
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	e046      	b.n	8003f6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ee4:	d021      	beq.n	8003f2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ee6:	f7fe fcd5 	bl	8002894 <HAL_GetTick>
 8003eea:	4602      	mov	r2, r0
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	1ad3      	subs	r3, r2, r3
 8003ef0:	687a      	ldr	r2, [r7, #4]
 8003ef2:	429a      	cmp	r2, r3
 8003ef4:	d302      	bcc.n	8003efc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d116      	bne.n	8003f2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	2200      	movs	r2, #0
 8003f00:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	2220      	movs	r2, #32
 8003f06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f16:	f043 0220 	orr.w	r2, r3, #32
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	2200      	movs	r2, #0
 8003f22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003f26:	2301      	movs	r3, #1
 8003f28:	e020      	b.n	8003f6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003f2a:	68bb      	ldr	r3, [r7, #8]
 8003f2c:	0c1b      	lsrs	r3, r3, #16
 8003f2e:	b2db      	uxtb	r3, r3
 8003f30:	2b01      	cmp	r3, #1
 8003f32:	d10c      	bne.n	8003f4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	695b      	ldr	r3, [r3, #20]
 8003f3a:	43da      	mvns	r2, r3
 8003f3c:	68bb      	ldr	r3, [r7, #8]
 8003f3e:	4013      	ands	r3, r2
 8003f40:	b29b      	uxth	r3, r3
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	bf14      	ite	ne
 8003f46:	2301      	movne	r3, #1
 8003f48:	2300      	moveq	r3, #0
 8003f4a:	b2db      	uxtb	r3, r3
 8003f4c:	e00b      	b.n	8003f66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	699b      	ldr	r3, [r3, #24]
 8003f54:	43da      	mvns	r2, r3
 8003f56:	68bb      	ldr	r3, [r7, #8]
 8003f58:	4013      	ands	r3, r2
 8003f5a:	b29b      	uxth	r3, r3
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	bf14      	ite	ne
 8003f60:	2301      	movne	r3, #1
 8003f62:	2300      	moveq	r3, #0
 8003f64:	b2db      	uxtb	r3, r3
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d18d      	bne.n	8003e86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003f6a:	2300      	movs	r3, #0
}
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	3710      	adds	r7, #16
 8003f70:	46bd      	mov	sp, r7
 8003f72:	bd80      	pop	{r7, pc}

08003f74 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b084      	sub	sp, #16
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	60f8      	str	r0, [r7, #12]
 8003f7c:	60b9      	str	r1, [r7, #8]
 8003f7e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003f80:	e02d      	b.n	8003fde <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003f82:	68f8      	ldr	r0, [r7, #12]
 8003f84:	f000 f8ce 	bl	8004124 <I2C_IsAcknowledgeFailed>
 8003f88:	4603      	mov	r3, r0
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d001      	beq.n	8003f92 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003f8e:	2301      	movs	r3, #1
 8003f90:	e02d      	b.n	8003fee <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f92:	68bb      	ldr	r3, [r7, #8]
 8003f94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f98:	d021      	beq.n	8003fde <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f9a:	f7fe fc7b 	bl	8002894 <HAL_GetTick>
 8003f9e:	4602      	mov	r2, r0
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	1ad3      	subs	r3, r2, r3
 8003fa4:	68ba      	ldr	r2, [r7, #8]
 8003fa6:	429a      	cmp	r2, r3
 8003fa8:	d302      	bcc.n	8003fb0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003faa:	68bb      	ldr	r3, [r7, #8]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d116      	bne.n	8003fde <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	2220      	movs	r2, #32
 8003fba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fca:	f043 0220 	orr.w	r2, r3, #32
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	e007      	b.n	8003fee <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	695b      	ldr	r3, [r3, #20]
 8003fe4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fe8:	2b80      	cmp	r3, #128	; 0x80
 8003fea:	d1ca      	bne.n	8003f82 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003fec:	2300      	movs	r3, #0
}
 8003fee:	4618      	mov	r0, r3
 8003ff0:	3710      	adds	r7, #16
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bd80      	pop	{r7, pc}

08003ff6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ff6:	b580      	push	{r7, lr}
 8003ff8:	b084      	sub	sp, #16
 8003ffa:	af00      	add	r7, sp, #0
 8003ffc:	60f8      	str	r0, [r7, #12]
 8003ffe:	60b9      	str	r1, [r7, #8]
 8004000:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004002:	e02d      	b.n	8004060 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004004:	68f8      	ldr	r0, [r7, #12]
 8004006:	f000 f88d 	bl	8004124 <I2C_IsAcknowledgeFailed>
 800400a:	4603      	mov	r3, r0
 800400c:	2b00      	cmp	r3, #0
 800400e:	d001      	beq.n	8004014 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004010:	2301      	movs	r3, #1
 8004012:	e02d      	b.n	8004070 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	f1b3 3fff 	cmp.w	r3, #4294967295
 800401a:	d021      	beq.n	8004060 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800401c:	f7fe fc3a 	bl	8002894 <HAL_GetTick>
 8004020:	4602      	mov	r2, r0
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	1ad3      	subs	r3, r2, r3
 8004026:	68ba      	ldr	r2, [r7, #8]
 8004028:	429a      	cmp	r2, r3
 800402a:	d302      	bcc.n	8004032 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800402c:	68bb      	ldr	r3, [r7, #8]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d116      	bne.n	8004060 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	2200      	movs	r2, #0
 8004036:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	2220      	movs	r2, #32
 800403c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	2200      	movs	r2, #0
 8004044:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800404c:	f043 0220 	orr.w	r2, r3, #32
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	2200      	movs	r2, #0
 8004058:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800405c:	2301      	movs	r3, #1
 800405e:	e007      	b.n	8004070 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	695b      	ldr	r3, [r3, #20]
 8004066:	f003 0304 	and.w	r3, r3, #4
 800406a:	2b04      	cmp	r3, #4
 800406c:	d1ca      	bne.n	8004004 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800406e:	2300      	movs	r3, #0
}
 8004070:	4618      	mov	r0, r3
 8004072:	3710      	adds	r7, #16
 8004074:	46bd      	mov	sp, r7
 8004076:	bd80      	pop	{r7, pc}

08004078 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b084      	sub	sp, #16
 800407c:	af00      	add	r7, sp, #0
 800407e:	60f8      	str	r0, [r7, #12]
 8004080:	60b9      	str	r1, [r7, #8]
 8004082:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004084:	e042      	b.n	800410c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	695b      	ldr	r3, [r3, #20]
 800408c:	f003 0310 	and.w	r3, r3, #16
 8004090:	2b10      	cmp	r3, #16
 8004092:	d119      	bne.n	80040c8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f06f 0210 	mvn.w	r2, #16
 800409c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	2200      	movs	r2, #0
 80040a2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	2220      	movs	r2, #32
 80040a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	2200      	movs	r2, #0
 80040b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	2200      	movs	r2, #0
 80040c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80040c4:	2301      	movs	r3, #1
 80040c6:	e029      	b.n	800411c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040c8:	f7fe fbe4 	bl	8002894 <HAL_GetTick>
 80040cc:	4602      	mov	r2, r0
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	1ad3      	subs	r3, r2, r3
 80040d2:	68ba      	ldr	r2, [r7, #8]
 80040d4:	429a      	cmp	r2, r3
 80040d6:	d302      	bcc.n	80040de <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d116      	bne.n	800410c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	2200      	movs	r2, #0
 80040e2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	2220      	movs	r2, #32
 80040e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	2200      	movs	r2, #0
 80040f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040f8:	f043 0220 	orr.w	r2, r3, #32
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	2200      	movs	r2, #0
 8004104:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004108:	2301      	movs	r3, #1
 800410a:	e007      	b.n	800411c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	695b      	ldr	r3, [r3, #20]
 8004112:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004116:	2b40      	cmp	r3, #64	; 0x40
 8004118:	d1b5      	bne.n	8004086 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800411a:	2300      	movs	r3, #0
}
 800411c:	4618      	mov	r0, r3
 800411e:	3710      	adds	r7, #16
 8004120:	46bd      	mov	sp, r7
 8004122:	bd80      	pop	{r7, pc}

08004124 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004124:	b480      	push	{r7}
 8004126:	b083      	sub	sp, #12
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	695b      	ldr	r3, [r3, #20]
 8004132:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004136:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800413a:	d11b      	bne.n	8004174 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004144:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2200      	movs	r2, #0
 800414a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2220      	movs	r2, #32
 8004150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2200      	movs	r2, #0
 8004158:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004160:	f043 0204 	orr.w	r2, r3, #4
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2200      	movs	r2, #0
 800416c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004170:	2301      	movs	r3, #1
 8004172:	e000      	b.n	8004176 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004174:	2300      	movs	r3, #0
}
 8004176:	4618      	mov	r0, r3
 8004178:	370c      	adds	r7, #12
 800417a:	46bd      	mov	sp, r7
 800417c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004180:	4770      	bx	lr
	...

08004184 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b086      	sub	sp, #24
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d101      	bne.n	8004196 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004192:	2301      	movs	r3, #1
 8004194:	e267      	b.n	8004666 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f003 0301 	and.w	r3, r3, #1
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d075      	beq.n	800428e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80041a2:	4b88      	ldr	r3, [pc, #544]	; (80043c4 <HAL_RCC_OscConfig+0x240>)
 80041a4:	689b      	ldr	r3, [r3, #8]
 80041a6:	f003 030c 	and.w	r3, r3, #12
 80041aa:	2b04      	cmp	r3, #4
 80041ac:	d00c      	beq.n	80041c8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80041ae:	4b85      	ldr	r3, [pc, #532]	; (80043c4 <HAL_RCC_OscConfig+0x240>)
 80041b0:	689b      	ldr	r3, [r3, #8]
 80041b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80041b6:	2b08      	cmp	r3, #8
 80041b8:	d112      	bne.n	80041e0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80041ba:	4b82      	ldr	r3, [pc, #520]	; (80043c4 <HAL_RCC_OscConfig+0x240>)
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80041c6:	d10b      	bne.n	80041e0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041c8:	4b7e      	ldr	r3, [pc, #504]	; (80043c4 <HAL_RCC_OscConfig+0x240>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d05b      	beq.n	800428c <HAL_RCC_OscConfig+0x108>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d157      	bne.n	800428c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80041dc:	2301      	movs	r3, #1
 80041de:	e242      	b.n	8004666 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041e8:	d106      	bne.n	80041f8 <HAL_RCC_OscConfig+0x74>
 80041ea:	4b76      	ldr	r3, [pc, #472]	; (80043c4 <HAL_RCC_OscConfig+0x240>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a75      	ldr	r2, [pc, #468]	; (80043c4 <HAL_RCC_OscConfig+0x240>)
 80041f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041f4:	6013      	str	r3, [r2, #0]
 80041f6:	e01d      	b.n	8004234 <HAL_RCC_OscConfig+0xb0>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	685b      	ldr	r3, [r3, #4]
 80041fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004200:	d10c      	bne.n	800421c <HAL_RCC_OscConfig+0x98>
 8004202:	4b70      	ldr	r3, [pc, #448]	; (80043c4 <HAL_RCC_OscConfig+0x240>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4a6f      	ldr	r2, [pc, #444]	; (80043c4 <HAL_RCC_OscConfig+0x240>)
 8004208:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800420c:	6013      	str	r3, [r2, #0]
 800420e:	4b6d      	ldr	r3, [pc, #436]	; (80043c4 <HAL_RCC_OscConfig+0x240>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a6c      	ldr	r2, [pc, #432]	; (80043c4 <HAL_RCC_OscConfig+0x240>)
 8004214:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004218:	6013      	str	r3, [r2, #0]
 800421a:	e00b      	b.n	8004234 <HAL_RCC_OscConfig+0xb0>
 800421c:	4b69      	ldr	r3, [pc, #420]	; (80043c4 <HAL_RCC_OscConfig+0x240>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a68      	ldr	r2, [pc, #416]	; (80043c4 <HAL_RCC_OscConfig+0x240>)
 8004222:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004226:	6013      	str	r3, [r2, #0]
 8004228:	4b66      	ldr	r3, [pc, #408]	; (80043c4 <HAL_RCC_OscConfig+0x240>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a65      	ldr	r2, [pc, #404]	; (80043c4 <HAL_RCC_OscConfig+0x240>)
 800422e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004232:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d013      	beq.n	8004264 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800423c:	f7fe fb2a 	bl	8002894 <HAL_GetTick>
 8004240:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004242:	e008      	b.n	8004256 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004244:	f7fe fb26 	bl	8002894 <HAL_GetTick>
 8004248:	4602      	mov	r2, r0
 800424a:	693b      	ldr	r3, [r7, #16]
 800424c:	1ad3      	subs	r3, r2, r3
 800424e:	2b64      	cmp	r3, #100	; 0x64
 8004250:	d901      	bls.n	8004256 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004252:	2303      	movs	r3, #3
 8004254:	e207      	b.n	8004666 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004256:	4b5b      	ldr	r3, [pc, #364]	; (80043c4 <HAL_RCC_OscConfig+0x240>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800425e:	2b00      	cmp	r3, #0
 8004260:	d0f0      	beq.n	8004244 <HAL_RCC_OscConfig+0xc0>
 8004262:	e014      	b.n	800428e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004264:	f7fe fb16 	bl	8002894 <HAL_GetTick>
 8004268:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800426a:	e008      	b.n	800427e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800426c:	f7fe fb12 	bl	8002894 <HAL_GetTick>
 8004270:	4602      	mov	r2, r0
 8004272:	693b      	ldr	r3, [r7, #16]
 8004274:	1ad3      	subs	r3, r2, r3
 8004276:	2b64      	cmp	r3, #100	; 0x64
 8004278:	d901      	bls.n	800427e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800427a:	2303      	movs	r3, #3
 800427c:	e1f3      	b.n	8004666 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800427e:	4b51      	ldr	r3, [pc, #324]	; (80043c4 <HAL_RCC_OscConfig+0x240>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004286:	2b00      	cmp	r3, #0
 8004288:	d1f0      	bne.n	800426c <HAL_RCC_OscConfig+0xe8>
 800428a:	e000      	b.n	800428e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800428c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f003 0302 	and.w	r3, r3, #2
 8004296:	2b00      	cmp	r3, #0
 8004298:	d063      	beq.n	8004362 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800429a:	4b4a      	ldr	r3, [pc, #296]	; (80043c4 <HAL_RCC_OscConfig+0x240>)
 800429c:	689b      	ldr	r3, [r3, #8]
 800429e:	f003 030c 	and.w	r3, r3, #12
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d00b      	beq.n	80042be <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80042a6:	4b47      	ldr	r3, [pc, #284]	; (80043c4 <HAL_RCC_OscConfig+0x240>)
 80042a8:	689b      	ldr	r3, [r3, #8]
 80042aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80042ae:	2b08      	cmp	r3, #8
 80042b0:	d11c      	bne.n	80042ec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80042b2:	4b44      	ldr	r3, [pc, #272]	; (80043c4 <HAL_RCC_OscConfig+0x240>)
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d116      	bne.n	80042ec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042be:	4b41      	ldr	r3, [pc, #260]	; (80043c4 <HAL_RCC_OscConfig+0x240>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f003 0302 	and.w	r3, r3, #2
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d005      	beq.n	80042d6 <HAL_RCC_OscConfig+0x152>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	68db      	ldr	r3, [r3, #12]
 80042ce:	2b01      	cmp	r3, #1
 80042d0:	d001      	beq.n	80042d6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80042d2:	2301      	movs	r3, #1
 80042d4:	e1c7      	b.n	8004666 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042d6:	4b3b      	ldr	r3, [pc, #236]	; (80043c4 <HAL_RCC_OscConfig+0x240>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	691b      	ldr	r3, [r3, #16]
 80042e2:	00db      	lsls	r3, r3, #3
 80042e4:	4937      	ldr	r1, [pc, #220]	; (80043c4 <HAL_RCC_OscConfig+0x240>)
 80042e6:	4313      	orrs	r3, r2
 80042e8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042ea:	e03a      	b.n	8004362 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	68db      	ldr	r3, [r3, #12]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d020      	beq.n	8004336 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80042f4:	4b34      	ldr	r3, [pc, #208]	; (80043c8 <HAL_RCC_OscConfig+0x244>)
 80042f6:	2201      	movs	r2, #1
 80042f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042fa:	f7fe facb 	bl	8002894 <HAL_GetTick>
 80042fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004300:	e008      	b.n	8004314 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004302:	f7fe fac7 	bl	8002894 <HAL_GetTick>
 8004306:	4602      	mov	r2, r0
 8004308:	693b      	ldr	r3, [r7, #16]
 800430a:	1ad3      	subs	r3, r2, r3
 800430c:	2b02      	cmp	r3, #2
 800430e:	d901      	bls.n	8004314 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004310:	2303      	movs	r3, #3
 8004312:	e1a8      	b.n	8004666 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004314:	4b2b      	ldr	r3, [pc, #172]	; (80043c4 <HAL_RCC_OscConfig+0x240>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f003 0302 	and.w	r3, r3, #2
 800431c:	2b00      	cmp	r3, #0
 800431e:	d0f0      	beq.n	8004302 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004320:	4b28      	ldr	r3, [pc, #160]	; (80043c4 <HAL_RCC_OscConfig+0x240>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	691b      	ldr	r3, [r3, #16]
 800432c:	00db      	lsls	r3, r3, #3
 800432e:	4925      	ldr	r1, [pc, #148]	; (80043c4 <HAL_RCC_OscConfig+0x240>)
 8004330:	4313      	orrs	r3, r2
 8004332:	600b      	str	r3, [r1, #0]
 8004334:	e015      	b.n	8004362 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004336:	4b24      	ldr	r3, [pc, #144]	; (80043c8 <HAL_RCC_OscConfig+0x244>)
 8004338:	2200      	movs	r2, #0
 800433a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800433c:	f7fe faaa 	bl	8002894 <HAL_GetTick>
 8004340:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004342:	e008      	b.n	8004356 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004344:	f7fe faa6 	bl	8002894 <HAL_GetTick>
 8004348:	4602      	mov	r2, r0
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	1ad3      	subs	r3, r2, r3
 800434e:	2b02      	cmp	r3, #2
 8004350:	d901      	bls.n	8004356 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004352:	2303      	movs	r3, #3
 8004354:	e187      	b.n	8004666 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004356:	4b1b      	ldr	r3, [pc, #108]	; (80043c4 <HAL_RCC_OscConfig+0x240>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f003 0302 	and.w	r3, r3, #2
 800435e:	2b00      	cmp	r3, #0
 8004360:	d1f0      	bne.n	8004344 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f003 0308 	and.w	r3, r3, #8
 800436a:	2b00      	cmp	r3, #0
 800436c:	d036      	beq.n	80043dc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	695b      	ldr	r3, [r3, #20]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d016      	beq.n	80043a4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004376:	4b15      	ldr	r3, [pc, #84]	; (80043cc <HAL_RCC_OscConfig+0x248>)
 8004378:	2201      	movs	r2, #1
 800437a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800437c:	f7fe fa8a 	bl	8002894 <HAL_GetTick>
 8004380:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004382:	e008      	b.n	8004396 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004384:	f7fe fa86 	bl	8002894 <HAL_GetTick>
 8004388:	4602      	mov	r2, r0
 800438a:	693b      	ldr	r3, [r7, #16]
 800438c:	1ad3      	subs	r3, r2, r3
 800438e:	2b02      	cmp	r3, #2
 8004390:	d901      	bls.n	8004396 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004392:	2303      	movs	r3, #3
 8004394:	e167      	b.n	8004666 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004396:	4b0b      	ldr	r3, [pc, #44]	; (80043c4 <HAL_RCC_OscConfig+0x240>)
 8004398:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800439a:	f003 0302 	and.w	r3, r3, #2
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d0f0      	beq.n	8004384 <HAL_RCC_OscConfig+0x200>
 80043a2:	e01b      	b.n	80043dc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80043a4:	4b09      	ldr	r3, [pc, #36]	; (80043cc <HAL_RCC_OscConfig+0x248>)
 80043a6:	2200      	movs	r2, #0
 80043a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043aa:	f7fe fa73 	bl	8002894 <HAL_GetTick>
 80043ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043b0:	e00e      	b.n	80043d0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80043b2:	f7fe fa6f 	bl	8002894 <HAL_GetTick>
 80043b6:	4602      	mov	r2, r0
 80043b8:	693b      	ldr	r3, [r7, #16]
 80043ba:	1ad3      	subs	r3, r2, r3
 80043bc:	2b02      	cmp	r3, #2
 80043be:	d907      	bls.n	80043d0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80043c0:	2303      	movs	r3, #3
 80043c2:	e150      	b.n	8004666 <HAL_RCC_OscConfig+0x4e2>
 80043c4:	40023800 	.word	0x40023800
 80043c8:	42470000 	.word	0x42470000
 80043cc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043d0:	4b88      	ldr	r3, [pc, #544]	; (80045f4 <HAL_RCC_OscConfig+0x470>)
 80043d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043d4:	f003 0302 	and.w	r3, r3, #2
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d1ea      	bne.n	80043b2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f003 0304 	and.w	r3, r3, #4
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	f000 8097 	beq.w	8004518 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80043ea:	2300      	movs	r3, #0
 80043ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80043ee:	4b81      	ldr	r3, [pc, #516]	; (80045f4 <HAL_RCC_OscConfig+0x470>)
 80043f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d10f      	bne.n	800441a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043fa:	2300      	movs	r3, #0
 80043fc:	60bb      	str	r3, [r7, #8]
 80043fe:	4b7d      	ldr	r3, [pc, #500]	; (80045f4 <HAL_RCC_OscConfig+0x470>)
 8004400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004402:	4a7c      	ldr	r2, [pc, #496]	; (80045f4 <HAL_RCC_OscConfig+0x470>)
 8004404:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004408:	6413      	str	r3, [r2, #64]	; 0x40
 800440a:	4b7a      	ldr	r3, [pc, #488]	; (80045f4 <HAL_RCC_OscConfig+0x470>)
 800440c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800440e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004412:	60bb      	str	r3, [r7, #8]
 8004414:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004416:	2301      	movs	r3, #1
 8004418:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800441a:	4b77      	ldr	r3, [pc, #476]	; (80045f8 <HAL_RCC_OscConfig+0x474>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004422:	2b00      	cmp	r3, #0
 8004424:	d118      	bne.n	8004458 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004426:	4b74      	ldr	r3, [pc, #464]	; (80045f8 <HAL_RCC_OscConfig+0x474>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4a73      	ldr	r2, [pc, #460]	; (80045f8 <HAL_RCC_OscConfig+0x474>)
 800442c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004430:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004432:	f7fe fa2f 	bl	8002894 <HAL_GetTick>
 8004436:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004438:	e008      	b.n	800444c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800443a:	f7fe fa2b 	bl	8002894 <HAL_GetTick>
 800443e:	4602      	mov	r2, r0
 8004440:	693b      	ldr	r3, [r7, #16]
 8004442:	1ad3      	subs	r3, r2, r3
 8004444:	2b02      	cmp	r3, #2
 8004446:	d901      	bls.n	800444c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004448:	2303      	movs	r3, #3
 800444a:	e10c      	b.n	8004666 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800444c:	4b6a      	ldr	r3, [pc, #424]	; (80045f8 <HAL_RCC_OscConfig+0x474>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004454:	2b00      	cmp	r3, #0
 8004456:	d0f0      	beq.n	800443a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	689b      	ldr	r3, [r3, #8]
 800445c:	2b01      	cmp	r3, #1
 800445e:	d106      	bne.n	800446e <HAL_RCC_OscConfig+0x2ea>
 8004460:	4b64      	ldr	r3, [pc, #400]	; (80045f4 <HAL_RCC_OscConfig+0x470>)
 8004462:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004464:	4a63      	ldr	r2, [pc, #396]	; (80045f4 <HAL_RCC_OscConfig+0x470>)
 8004466:	f043 0301 	orr.w	r3, r3, #1
 800446a:	6713      	str	r3, [r2, #112]	; 0x70
 800446c:	e01c      	b.n	80044a8 <HAL_RCC_OscConfig+0x324>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	689b      	ldr	r3, [r3, #8]
 8004472:	2b05      	cmp	r3, #5
 8004474:	d10c      	bne.n	8004490 <HAL_RCC_OscConfig+0x30c>
 8004476:	4b5f      	ldr	r3, [pc, #380]	; (80045f4 <HAL_RCC_OscConfig+0x470>)
 8004478:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800447a:	4a5e      	ldr	r2, [pc, #376]	; (80045f4 <HAL_RCC_OscConfig+0x470>)
 800447c:	f043 0304 	orr.w	r3, r3, #4
 8004480:	6713      	str	r3, [r2, #112]	; 0x70
 8004482:	4b5c      	ldr	r3, [pc, #368]	; (80045f4 <HAL_RCC_OscConfig+0x470>)
 8004484:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004486:	4a5b      	ldr	r2, [pc, #364]	; (80045f4 <HAL_RCC_OscConfig+0x470>)
 8004488:	f043 0301 	orr.w	r3, r3, #1
 800448c:	6713      	str	r3, [r2, #112]	; 0x70
 800448e:	e00b      	b.n	80044a8 <HAL_RCC_OscConfig+0x324>
 8004490:	4b58      	ldr	r3, [pc, #352]	; (80045f4 <HAL_RCC_OscConfig+0x470>)
 8004492:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004494:	4a57      	ldr	r2, [pc, #348]	; (80045f4 <HAL_RCC_OscConfig+0x470>)
 8004496:	f023 0301 	bic.w	r3, r3, #1
 800449a:	6713      	str	r3, [r2, #112]	; 0x70
 800449c:	4b55      	ldr	r3, [pc, #340]	; (80045f4 <HAL_RCC_OscConfig+0x470>)
 800449e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044a0:	4a54      	ldr	r2, [pc, #336]	; (80045f4 <HAL_RCC_OscConfig+0x470>)
 80044a2:	f023 0304 	bic.w	r3, r3, #4
 80044a6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	689b      	ldr	r3, [r3, #8]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d015      	beq.n	80044dc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044b0:	f7fe f9f0 	bl	8002894 <HAL_GetTick>
 80044b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044b6:	e00a      	b.n	80044ce <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044b8:	f7fe f9ec 	bl	8002894 <HAL_GetTick>
 80044bc:	4602      	mov	r2, r0
 80044be:	693b      	ldr	r3, [r7, #16]
 80044c0:	1ad3      	subs	r3, r2, r3
 80044c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d901      	bls.n	80044ce <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80044ca:	2303      	movs	r3, #3
 80044cc:	e0cb      	b.n	8004666 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044ce:	4b49      	ldr	r3, [pc, #292]	; (80045f4 <HAL_RCC_OscConfig+0x470>)
 80044d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044d2:	f003 0302 	and.w	r3, r3, #2
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d0ee      	beq.n	80044b8 <HAL_RCC_OscConfig+0x334>
 80044da:	e014      	b.n	8004506 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044dc:	f7fe f9da 	bl	8002894 <HAL_GetTick>
 80044e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044e2:	e00a      	b.n	80044fa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044e4:	f7fe f9d6 	bl	8002894 <HAL_GetTick>
 80044e8:	4602      	mov	r2, r0
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	1ad3      	subs	r3, r2, r3
 80044ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d901      	bls.n	80044fa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80044f6:	2303      	movs	r3, #3
 80044f8:	e0b5      	b.n	8004666 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044fa:	4b3e      	ldr	r3, [pc, #248]	; (80045f4 <HAL_RCC_OscConfig+0x470>)
 80044fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044fe:	f003 0302 	and.w	r3, r3, #2
 8004502:	2b00      	cmp	r3, #0
 8004504:	d1ee      	bne.n	80044e4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004506:	7dfb      	ldrb	r3, [r7, #23]
 8004508:	2b01      	cmp	r3, #1
 800450a:	d105      	bne.n	8004518 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800450c:	4b39      	ldr	r3, [pc, #228]	; (80045f4 <HAL_RCC_OscConfig+0x470>)
 800450e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004510:	4a38      	ldr	r2, [pc, #224]	; (80045f4 <HAL_RCC_OscConfig+0x470>)
 8004512:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004516:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	699b      	ldr	r3, [r3, #24]
 800451c:	2b00      	cmp	r3, #0
 800451e:	f000 80a1 	beq.w	8004664 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004522:	4b34      	ldr	r3, [pc, #208]	; (80045f4 <HAL_RCC_OscConfig+0x470>)
 8004524:	689b      	ldr	r3, [r3, #8]
 8004526:	f003 030c 	and.w	r3, r3, #12
 800452a:	2b08      	cmp	r3, #8
 800452c:	d05c      	beq.n	80045e8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	699b      	ldr	r3, [r3, #24]
 8004532:	2b02      	cmp	r3, #2
 8004534:	d141      	bne.n	80045ba <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004536:	4b31      	ldr	r3, [pc, #196]	; (80045fc <HAL_RCC_OscConfig+0x478>)
 8004538:	2200      	movs	r2, #0
 800453a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800453c:	f7fe f9aa 	bl	8002894 <HAL_GetTick>
 8004540:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004542:	e008      	b.n	8004556 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004544:	f7fe f9a6 	bl	8002894 <HAL_GetTick>
 8004548:	4602      	mov	r2, r0
 800454a:	693b      	ldr	r3, [r7, #16]
 800454c:	1ad3      	subs	r3, r2, r3
 800454e:	2b02      	cmp	r3, #2
 8004550:	d901      	bls.n	8004556 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004552:	2303      	movs	r3, #3
 8004554:	e087      	b.n	8004666 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004556:	4b27      	ldr	r3, [pc, #156]	; (80045f4 <HAL_RCC_OscConfig+0x470>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800455e:	2b00      	cmp	r3, #0
 8004560:	d1f0      	bne.n	8004544 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	69da      	ldr	r2, [r3, #28]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6a1b      	ldr	r3, [r3, #32]
 800456a:	431a      	orrs	r2, r3
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004570:	019b      	lsls	r3, r3, #6
 8004572:	431a      	orrs	r2, r3
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004578:	085b      	lsrs	r3, r3, #1
 800457a:	3b01      	subs	r3, #1
 800457c:	041b      	lsls	r3, r3, #16
 800457e:	431a      	orrs	r2, r3
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004584:	061b      	lsls	r3, r3, #24
 8004586:	491b      	ldr	r1, [pc, #108]	; (80045f4 <HAL_RCC_OscConfig+0x470>)
 8004588:	4313      	orrs	r3, r2
 800458a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800458c:	4b1b      	ldr	r3, [pc, #108]	; (80045fc <HAL_RCC_OscConfig+0x478>)
 800458e:	2201      	movs	r2, #1
 8004590:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004592:	f7fe f97f 	bl	8002894 <HAL_GetTick>
 8004596:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004598:	e008      	b.n	80045ac <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800459a:	f7fe f97b 	bl	8002894 <HAL_GetTick>
 800459e:	4602      	mov	r2, r0
 80045a0:	693b      	ldr	r3, [r7, #16]
 80045a2:	1ad3      	subs	r3, r2, r3
 80045a4:	2b02      	cmp	r3, #2
 80045a6:	d901      	bls.n	80045ac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80045a8:	2303      	movs	r3, #3
 80045aa:	e05c      	b.n	8004666 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045ac:	4b11      	ldr	r3, [pc, #68]	; (80045f4 <HAL_RCC_OscConfig+0x470>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d0f0      	beq.n	800459a <HAL_RCC_OscConfig+0x416>
 80045b8:	e054      	b.n	8004664 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045ba:	4b10      	ldr	r3, [pc, #64]	; (80045fc <HAL_RCC_OscConfig+0x478>)
 80045bc:	2200      	movs	r2, #0
 80045be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045c0:	f7fe f968 	bl	8002894 <HAL_GetTick>
 80045c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045c6:	e008      	b.n	80045da <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045c8:	f7fe f964 	bl	8002894 <HAL_GetTick>
 80045cc:	4602      	mov	r2, r0
 80045ce:	693b      	ldr	r3, [r7, #16]
 80045d0:	1ad3      	subs	r3, r2, r3
 80045d2:	2b02      	cmp	r3, #2
 80045d4:	d901      	bls.n	80045da <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80045d6:	2303      	movs	r3, #3
 80045d8:	e045      	b.n	8004666 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045da:	4b06      	ldr	r3, [pc, #24]	; (80045f4 <HAL_RCC_OscConfig+0x470>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d1f0      	bne.n	80045c8 <HAL_RCC_OscConfig+0x444>
 80045e6:	e03d      	b.n	8004664 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	699b      	ldr	r3, [r3, #24]
 80045ec:	2b01      	cmp	r3, #1
 80045ee:	d107      	bne.n	8004600 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80045f0:	2301      	movs	r3, #1
 80045f2:	e038      	b.n	8004666 <HAL_RCC_OscConfig+0x4e2>
 80045f4:	40023800 	.word	0x40023800
 80045f8:	40007000 	.word	0x40007000
 80045fc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004600:	4b1b      	ldr	r3, [pc, #108]	; (8004670 <HAL_RCC_OscConfig+0x4ec>)
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	699b      	ldr	r3, [r3, #24]
 800460a:	2b01      	cmp	r3, #1
 800460c:	d028      	beq.n	8004660 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004618:	429a      	cmp	r2, r3
 800461a:	d121      	bne.n	8004660 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004626:	429a      	cmp	r2, r3
 8004628:	d11a      	bne.n	8004660 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800462a:	68fa      	ldr	r2, [r7, #12]
 800462c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004630:	4013      	ands	r3, r2
 8004632:	687a      	ldr	r2, [r7, #4]
 8004634:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004636:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004638:	4293      	cmp	r3, r2
 800463a:	d111      	bne.n	8004660 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004646:	085b      	lsrs	r3, r3, #1
 8004648:	3b01      	subs	r3, #1
 800464a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800464c:	429a      	cmp	r2, r3
 800464e:	d107      	bne.n	8004660 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800465a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800465c:	429a      	cmp	r2, r3
 800465e:	d001      	beq.n	8004664 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004660:	2301      	movs	r3, #1
 8004662:	e000      	b.n	8004666 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004664:	2300      	movs	r3, #0
}
 8004666:	4618      	mov	r0, r3
 8004668:	3718      	adds	r7, #24
 800466a:	46bd      	mov	sp, r7
 800466c:	bd80      	pop	{r7, pc}
 800466e:	bf00      	nop
 8004670:	40023800 	.word	0x40023800

08004674 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b084      	sub	sp, #16
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
 800467c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d101      	bne.n	8004688 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004684:	2301      	movs	r3, #1
 8004686:	e0cc      	b.n	8004822 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004688:	4b68      	ldr	r3, [pc, #416]	; (800482c <HAL_RCC_ClockConfig+0x1b8>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f003 0307 	and.w	r3, r3, #7
 8004690:	683a      	ldr	r2, [r7, #0]
 8004692:	429a      	cmp	r2, r3
 8004694:	d90c      	bls.n	80046b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004696:	4b65      	ldr	r3, [pc, #404]	; (800482c <HAL_RCC_ClockConfig+0x1b8>)
 8004698:	683a      	ldr	r2, [r7, #0]
 800469a:	b2d2      	uxtb	r2, r2
 800469c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800469e:	4b63      	ldr	r3, [pc, #396]	; (800482c <HAL_RCC_ClockConfig+0x1b8>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f003 0307 	and.w	r3, r3, #7
 80046a6:	683a      	ldr	r2, [r7, #0]
 80046a8:	429a      	cmp	r2, r3
 80046aa:	d001      	beq.n	80046b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80046ac:	2301      	movs	r3, #1
 80046ae:	e0b8      	b.n	8004822 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f003 0302 	and.w	r3, r3, #2
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d020      	beq.n	80046fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f003 0304 	and.w	r3, r3, #4
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d005      	beq.n	80046d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80046c8:	4b59      	ldr	r3, [pc, #356]	; (8004830 <HAL_RCC_ClockConfig+0x1bc>)
 80046ca:	689b      	ldr	r3, [r3, #8]
 80046cc:	4a58      	ldr	r2, [pc, #352]	; (8004830 <HAL_RCC_ClockConfig+0x1bc>)
 80046ce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80046d2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f003 0308 	and.w	r3, r3, #8
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d005      	beq.n	80046ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80046e0:	4b53      	ldr	r3, [pc, #332]	; (8004830 <HAL_RCC_ClockConfig+0x1bc>)
 80046e2:	689b      	ldr	r3, [r3, #8]
 80046e4:	4a52      	ldr	r2, [pc, #328]	; (8004830 <HAL_RCC_ClockConfig+0x1bc>)
 80046e6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80046ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80046ec:	4b50      	ldr	r3, [pc, #320]	; (8004830 <HAL_RCC_ClockConfig+0x1bc>)
 80046ee:	689b      	ldr	r3, [r3, #8]
 80046f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	689b      	ldr	r3, [r3, #8]
 80046f8:	494d      	ldr	r1, [pc, #308]	; (8004830 <HAL_RCC_ClockConfig+0x1bc>)
 80046fa:	4313      	orrs	r3, r2
 80046fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f003 0301 	and.w	r3, r3, #1
 8004706:	2b00      	cmp	r3, #0
 8004708:	d044      	beq.n	8004794 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	2b01      	cmp	r3, #1
 8004710:	d107      	bne.n	8004722 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004712:	4b47      	ldr	r3, [pc, #284]	; (8004830 <HAL_RCC_ClockConfig+0x1bc>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800471a:	2b00      	cmp	r3, #0
 800471c:	d119      	bne.n	8004752 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800471e:	2301      	movs	r3, #1
 8004720:	e07f      	b.n	8004822 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	2b02      	cmp	r3, #2
 8004728:	d003      	beq.n	8004732 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800472e:	2b03      	cmp	r3, #3
 8004730:	d107      	bne.n	8004742 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004732:	4b3f      	ldr	r3, [pc, #252]	; (8004830 <HAL_RCC_ClockConfig+0x1bc>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800473a:	2b00      	cmp	r3, #0
 800473c:	d109      	bne.n	8004752 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800473e:	2301      	movs	r3, #1
 8004740:	e06f      	b.n	8004822 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004742:	4b3b      	ldr	r3, [pc, #236]	; (8004830 <HAL_RCC_ClockConfig+0x1bc>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f003 0302 	and.w	r3, r3, #2
 800474a:	2b00      	cmp	r3, #0
 800474c:	d101      	bne.n	8004752 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800474e:	2301      	movs	r3, #1
 8004750:	e067      	b.n	8004822 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004752:	4b37      	ldr	r3, [pc, #220]	; (8004830 <HAL_RCC_ClockConfig+0x1bc>)
 8004754:	689b      	ldr	r3, [r3, #8]
 8004756:	f023 0203 	bic.w	r2, r3, #3
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	4934      	ldr	r1, [pc, #208]	; (8004830 <HAL_RCC_ClockConfig+0x1bc>)
 8004760:	4313      	orrs	r3, r2
 8004762:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004764:	f7fe f896 	bl	8002894 <HAL_GetTick>
 8004768:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800476a:	e00a      	b.n	8004782 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800476c:	f7fe f892 	bl	8002894 <HAL_GetTick>
 8004770:	4602      	mov	r2, r0
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	1ad3      	subs	r3, r2, r3
 8004776:	f241 3288 	movw	r2, #5000	; 0x1388
 800477a:	4293      	cmp	r3, r2
 800477c:	d901      	bls.n	8004782 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800477e:	2303      	movs	r3, #3
 8004780:	e04f      	b.n	8004822 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004782:	4b2b      	ldr	r3, [pc, #172]	; (8004830 <HAL_RCC_ClockConfig+0x1bc>)
 8004784:	689b      	ldr	r3, [r3, #8]
 8004786:	f003 020c 	and.w	r2, r3, #12
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	009b      	lsls	r3, r3, #2
 8004790:	429a      	cmp	r2, r3
 8004792:	d1eb      	bne.n	800476c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004794:	4b25      	ldr	r3, [pc, #148]	; (800482c <HAL_RCC_ClockConfig+0x1b8>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f003 0307 	and.w	r3, r3, #7
 800479c:	683a      	ldr	r2, [r7, #0]
 800479e:	429a      	cmp	r2, r3
 80047a0:	d20c      	bcs.n	80047bc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047a2:	4b22      	ldr	r3, [pc, #136]	; (800482c <HAL_RCC_ClockConfig+0x1b8>)
 80047a4:	683a      	ldr	r2, [r7, #0]
 80047a6:	b2d2      	uxtb	r2, r2
 80047a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80047aa:	4b20      	ldr	r3, [pc, #128]	; (800482c <HAL_RCC_ClockConfig+0x1b8>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f003 0307 	and.w	r3, r3, #7
 80047b2:	683a      	ldr	r2, [r7, #0]
 80047b4:	429a      	cmp	r2, r3
 80047b6:	d001      	beq.n	80047bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80047b8:	2301      	movs	r3, #1
 80047ba:	e032      	b.n	8004822 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f003 0304 	and.w	r3, r3, #4
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d008      	beq.n	80047da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80047c8:	4b19      	ldr	r3, [pc, #100]	; (8004830 <HAL_RCC_ClockConfig+0x1bc>)
 80047ca:	689b      	ldr	r3, [r3, #8]
 80047cc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	68db      	ldr	r3, [r3, #12]
 80047d4:	4916      	ldr	r1, [pc, #88]	; (8004830 <HAL_RCC_ClockConfig+0x1bc>)
 80047d6:	4313      	orrs	r3, r2
 80047d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f003 0308 	and.w	r3, r3, #8
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d009      	beq.n	80047fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80047e6:	4b12      	ldr	r3, [pc, #72]	; (8004830 <HAL_RCC_ClockConfig+0x1bc>)
 80047e8:	689b      	ldr	r3, [r3, #8]
 80047ea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	691b      	ldr	r3, [r3, #16]
 80047f2:	00db      	lsls	r3, r3, #3
 80047f4:	490e      	ldr	r1, [pc, #56]	; (8004830 <HAL_RCC_ClockConfig+0x1bc>)
 80047f6:	4313      	orrs	r3, r2
 80047f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80047fa:	f000 f821 	bl	8004840 <HAL_RCC_GetSysClockFreq>
 80047fe:	4602      	mov	r2, r0
 8004800:	4b0b      	ldr	r3, [pc, #44]	; (8004830 <HAL_RCC_ClockConfig+0x1bc>)
 8004802:	689b      	ldr	r3, [r3, #8]
 8004804:	091b      	lsrs	r3, r3, #4
 8004806:	f003 030f 	and.w	r3, r3, #15
 800480a:	490a      	ldr	r1, [pc, #40]	; (8004834 <HAL_RCC_ClockConfig+0x1c0>)
 800480c:	5ccb      	ldrb	r3, [r1, r3]
 800480e:	fa22 f303 	lsr.w	r3, r2, r3
 8004812:	4a09      	ldr	r2, [pc, #36]	; (8004838 <HAL_RCC_ClockConfig+0x1c4>)
 8004814:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004816:	4b09      	ldr	r3, [pc, #36]	; (800483c <HAL_RCC_ClockConfig+0x1c8>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4618      	mov	r0, r3
 800481c:	f7fd fff6 	bl	800280c <HAL_InitTick>

  return HAL_OK;
 8004820:	2300      	movs	r3, #0
}
 8004822:	4618      	mov	r0, r3
 8004824:	3710      	adds	r7, #16
 8004826:	46bd      	mov	sp, r7
 8004828:	bd80      	pop	{r7, pc}
 800482a:	bf00      	nop
 800482c:	40023c00 	.word	0x40023c00
 8004830:	40023800 	.word	0x40023800
 8004834:	0800aba4 	.word	0x0800aba4
 8004838:	20000008 	.word	0x20000008
 800483c:	2000000c 	.word	0x2000000c

08004840 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004840:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004844:	b094      	sub	sp, #80	; 0x50
 8004846:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004848:	2300      	movs	r3, #0
 800484a:	647b      	str	r3, [r7, #68]	; 0x44
 800484c:	2300      	movs	r3, #0
 800484e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004850:	2300      	movs	r3, #0
 8004852:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004854:	2300      	movs	r3, #0
 8004856:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004858:	4b79      	ldr	r3, [pc, #484]	; (8004a40 <HAL_RCC_GetSysClockFreq+0x200>)
 800485a:	689b      	ldr	r3, [r3, #8]
 800485c:	f003 030c 	and.w	r3, r3, #12
 8004860:	2b08      	cmp	r3, #8
 8004862:	d00d      	beq.n	8004880 <HAL_RCC_GetSysClockFreq+0x40>
 8004864:	2b08      	cmp	r3, #8
 8004866:	f200 80e1 	bhi.w	8004a2c <HAL_RCC_GetSysClockFreq+0x1ec>
 800486a:	2b00      	cmp	r3, #0
 800486c:	d002      	beq.n	8004874 <HAL_RCC_GetSysClockFreq+0x34>
 800486e:	2b04      	cmp	r3, #4
 8004870:	d003      	beq.n	800487a <HAL_RCC_GetSysClockFreq+0x3a>
 8004872:	e0db      	b.n	8004a2c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004874:	4b73      	ldr	r3, [pc, #460]	; (8004a44 <HAL_RCC_GetSysClockFreq+0x204>)
 8004876:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004878:	e0db      	b.n	8004a32 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800487a:	4b73      	ldr	r3, [pc, #460]	; (8004a48 <HAL_RCC_GetSysClockFreq+0x208>)
 800487c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800487e:	e0d8      	b.n	8004a32 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004880:	4b6f      	ldr	r3, [pc, #444]	; (8004a40 <HAL_RCC_GetSysClockFreq+0x200>)
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004888:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800488a:	4b6d      	ldr	r3, [pc, #436]	; (8004a40 <HAL_RCC_GetSysClockFreq+0x200>)
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004892:	2b00      	cmp	r3, #0
 8004894:	d063      	beq.n	800495e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004896:	4b6a      	ldr	r3, [pc, #424]	; (8004a40 <HAL_RCC_GetSysClockFreq+0x200>)
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	099b      	lsrs	r3, r3, #6
 800489c:	2200      	movs	r2, #0
 800489e:	63bb      	str	r3, [r7, #56]	; 0x38
 80048a0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80048a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048a8:	633b      	str	r3, [r7, #48]	; 0x30
 80048aa:	2300      	movs	r3, #0
 80048ac:	637b      	str	r3, [r7, #52]	; 0x34
 80048ae:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80048b2:	4622      	mov	r2, r4
 80048b4:	462b      	mov	r3, r5
 80048b6:	f04f 0000 	mov.w	r0, #0
 80048ba:	f04f 0100 	mov.w	r1, #0
 80048be:	0159      	lsls	r1, r3, #5
 80048c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80048c4:	0150      	lsls	r0, r2, #5
 80048c6:	4602      	mov	r2, r0
 80048c8:	460b      	mov	r3, r1
 80048ca:	4621      	mov	r1, r4
 80048cc:	1a51      	subs	r1, r2, r1
 80048ce:	6139      	str	r1, [r7, #16]
 80048d0:	4629      	mov	r1, r5
 80048d2:	eb63 0301 	sbc.w	r3, r3, r1
 80048d6:	617b      	str	r3, [r7, #20]
 80048d8:	f04f 0200 	mov.w	r2, #0
 80048dc:	f04f 0300 	mov.w	r3, #0
 80048e0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80048e4:	4659      	mov	r1, fp
 80048e6:	018b      	lsls	r3, r1, #6
 80048e8:	4651      	mov	r1, sl
 80048ea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80048ee:	4651      	mov	r1, sl
 80048f0:	018a      	lsls	r2, r1, #6
 80048f2:	4651      	mov	r1, sl
 80048f4:	ebb2 0801 	subs.w	r8, r2, r1
 80048f8:	4659      	mov	r1, fp
 80048fa:	eb63 0901 	sbc.w	r9, r3, r1
 80048fe:	f04f 0200 	mov.w	r2, #0
 8004902:	f04f 0300 	mov.w	r3, #0
 8004906:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800490a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800490e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004912:	4690      	mov	r8, r2
 8004914:	4699      	mov	r9, r3
 8004916:	4623      	mov	r3, r4
 8004918:	eb18 0303 	adds.w	r3, r8, r3
 800491c:	60bb      	str	r3, [r7, #8]
 800491e:	462b      	mov	r3, r5
 8004920:	eb49 0303 	adc.w	r3, r9, r3
 8004924:	60fb      	str	r3, [r7, #12]
 8004926:	f04f 0200 	mov.w	r2, #0
 800492a:	f04f 0300 	mov.w	r3, #0
 800492e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004932:	4629      	mov	r1, r5
 8004934:	024b      	lsls	r3, r1, #9
 8004936:	4621      	mov	r1, r4
 8004938:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800493c:	4621      	mov	r1, r4
 800493e:	024a      	lsls	r2, r1, #9
 8004940:	4610      	mov	r0, r2
 8004942:	4619      	mov	r1, r3
 8004944:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004946:	2200      	movs	r2, #0
 8004948:	62bb      	str	r3, [r7, #40]	; 0x28
 800494a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800494c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004950:	f7fb fc8e 	bl	8000270 <__aeabi_uldivmod>
 8004954:	4602      	mov	r2, r0
 8004956:	460b      	mov	r3, r1
 8004958:	4613      	mov	r3, r2
 800495a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800495c:	e058      	b.n	8004a10 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800495e:	4b38      	ldr	r3, [pc, #224]	; (8004a40 <HAL_RCC_GetSysClockFreq+0x200>)
 8004960:	685b      	ldr	r3, [r3, #4]
 8004962:	099b      	lsrs	r3, r3, #6
 8004964:	2200      	movs	r2, #0
 8004966:	4618      	mov	r0, r3
 8004968:	4611      	mov	r1, r2
 800496a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800496e:	623b      	str	r3, [r7, #32]
 8004970:	2300      	movs	r3, #0
 8004972:	627b      	str	r3, [r7, #36]	; 0x24
 8004974:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004978:	4642      	mov	r2, r8
 800497a:	464b      	mov	r3, r9
 800497c:	f04f 0000 	mov.w	r0, #0
 8004980:	f04f 0100 	mov.w	r1, #0
 8004984:	0159      	lsls	r1, r3, #5
 8004986:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800498a:	0150      	lsls	r0, r2, #5
 800498c:	4602      	mov	r2, r0
 800498e:	460b      	mov	r3, r1
 8004990:	4641      	mov	r1, r8
 8004992:	ebb2 0a01 	subs.w	sl, r2, r1
 8004996:	4649      	mov	r1, r9
 8004998:	eb63 0b01 	sbc.w	fp, r3, r1
 800499c:	f04f 0200 	mov.w	r2, #0
 80049a0:	f04f 0300 	mov.w	r3, #0
 80049a4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80049a8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80049ac:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80049b0:	ebb2 040a 	subs.w	r4, r2, sl
 80049b4:	eb63 050b 	sbc.w	r5, r3, fp
 80049b8:	f04f 0200 	mov.w	r2, #0
 80049bc:	f04f 0300 	mov.w	r3, #0
 80049c0:	00eb      	lsls	r3, r5, #3
 80049c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80049c6:	00e2      	lsls	r2, r4, #3
 80049c8:	4614      	mov	r4, r2
 80049ca:	461d      	mov	r5, r3
 80049cc:	4643      	mov	r3, r8
 80049ce:	18e3      	adds	r3, r4, r3
 80049d0:	603b      	str	r3, [r7, #0]
 80049d2:	464b      	mov	r3, r9
 80049d4:	eb45 0303 	adc.w	r3, r5, r3
 80049d8:	607b      	str	r3, [r7, #4]
 80049da:	f04f 0200 	mov.w	r2, #0
 80049de:	f04f 0300 	mov.w	r3, #0
 80049e2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80049e6:	4629      	mov	r1, r5
 80049e8:	028b      	lsls	r3, r1, #10
 80049ea:	4621      	mov	r1, r4
 80049ec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80049f0:	4621      	mov	r1, r4
 80049f2:	028a      	lsls	r2, r1, #10
 80049f4:	4610      	mov	r0, r2
 80049f6:	4619      	mov	r1, r3
 80049f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049fa:	2200      	movs	r2, #0
 80049fc:	61bb      	str	r3, [r7, #24]
 80049fe:	61fa      	str	r2, [r7, #28]
 8004a00:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004a04:	f7fb fc34 	bl	8000270 <__aeabi_uldivmod>
 8004a08:	4602      	mov	r2, r0
 8004a0a:	460b      	mov	r3, r1
 8004a0c:	4613      	mov	r3, r2
 8004a0e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004a10:	4b0b      	ldr	r3, [pc, #44]	; (8004a40 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	0c1b      	lsrs	r3, r3, #16
 8004a16:	f003 0303 	and.w	r3, r3, #3
 8004a1a:	3301      	adds	r3, #1
 8004a1c:	005b      	lsls	r3, r3, #1
 8004a1e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004a20:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004a22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a24:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a28:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004a2a:	e002      	b.n	8004a32 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004a2c:	4b05      	ldr	r3, [pc, #20]	; (8004a44 <HAL_RCC_GetSysClockFreq+0x204>)
 8004a2e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004a30:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004a32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004a34:	4618      	mov	r0, r3
 8004a36:	3750      	adds	r7, #80	; 0x50
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a3e:	bf00      	nop
 8004a40:	40023800 	.word	0x40023800
 8004a44:	00f42400 	.word	0x00f42400
 8004a48:	007a1200 	.word	0x007a1200

08004a4c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a50:	4b03      	ldr	r3, [pc, #12]	; (8004a60 <HAL_RCC_GetHCLKFreq+0x14>)
 8004a52:	681b      	ldr	r3, [r3, #0]
}
 8004a54:	4618      	mov	r0, r3
 8004a56:	46bd      	mov	sp, r7
 8004a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5c:	4770      	bx	lr
 8004a5e:	bf00      	nop
 8004a60:	20000008 	.word	0x20000008

08004a64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004a68:	f7ff fff0 	bl	8004a4c <HAL_RCC_GetHCLKFreq>
 8004a6c:	4602      	mov	r2, r0
 8004a6e:	4b05      	ldr	r3, [pc, #20]	; (8004a84 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004a70:	689b      	ldr	r3, [r3, #8]
 8004a72:	0a9b      	lsrs	r3, r3, #10
 8004a74:	f003 0307 	and.w	r3, r3, #7
 8004a78:	4903      	ldr	r1, [pc, #12]	; (8004a88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a7a:	5ccb      	ldrb	r3, [r1, r3]
 8004a7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a80:	4618      	mov	r0, r3
 8004a82:	bd80      	pop	{r7, pc}
 8004a84:	40023800 	.word	0x40023800
 8004a88:	0800abb4 	.word	0x0800abb4

08004a8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004a90:	f7ff ffdc 	bl	8004a4c <HAL_RCC_GetHCLKFreq>
 8004a94:	4602      	mov	r2, r0
 8004a96:	4b05      	ldr	r3, [pc, #20]	; (8004aac <HAL_RCC_GetPCLK2Freq+0x20>)
 8004a98:	689b      	ldr	r3, [r3, #8]
 8004a9a:	0b5b      	lsrs	r3, r3, #13
 8004a9c:	f003 0307 	and.w	r3, r3, #7
 8004aa0:	4903      	ldr	r1, [pc, #12]	; (8004ab0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004aa2:	5ccb      	ldrb	r3, [r1, r3]
 8004aa4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	bd80      	pop	{r7, pc}
 8004aac:	40023800 	.word	0x40023800
 8004ab0:	0800abb4 	.word	0x0800abb4

08004ab4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b082      	sub	sp, #8
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d101      	bne.n	8004ac6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	e07b      	b.n	8004bbe <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d108      	bne.n	8004ae0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004ad6:	d009      	beq.n	8004aec <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2200      	movs	r2, #0
 8004adc:	61da      	str	r2, [r3, #28]
 8004ade:	e005      	b.n	8004aec <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2200      	movs	r2, #0
 8004aea:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2200      	movs	r2, #0
 8004af0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004af8:	b2db      	uxtb	r3, r3
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d106      	bne.n	8004b0c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2200      	movs	r2, #0
 8004b02:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004b06:	6878      	ldr	r0, [r7, #4]
 8004b08:	f7fd fb5a 	bl	80021c0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2202      	movs	r2, #2
 8004b10:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	681a      	ldr	r2, [r3, #0]
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b22:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	689b      	ldr	r3, [r3, #8]
 8004b30:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004b34:	431a      	orrs	r2, r3
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	68db      	ldr	r3, [r3, #12]
 8004b3a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b3e:	431a      	orrs	r2, r3
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	691b      	ldr	r3, [r3, #16]
 8004b44:	f003 0302 	and.w	r3, r3, #2
 8004b48:	431a      	orrs	r2, r3
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	695b      	ldr	r3, [r3, #20]
 8004b4e:	f003 0301 	and.w	r3, r3, #1
 8004b52:	431a      	orrs	r2, r3
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	699b      	ldr	r3, [r3, #24]
 8004b58:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b5c:	431a      	orrs	r2, r3
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	69db      	ldr	r3, [r3, #28]
 8004b62:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004b66:	431a      	orrs	r2, r3
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6a1b      	ldr	r3, [r3, #32]
 8004b6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b70:	ea42 0103 	orr.w	r1, r2, r3
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b78:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	430a      	orrs	r2, r1
 8004b82:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	699b      	ldr	r3, [r3, #24]
 8004b88:	0c1b      	lsrs	r3, r3, #16
 8004b8a:	f003 0104 	and.w	r1, r3, #4
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b92:	f003 0210 	and.w	r2, r3, #16
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	430a      	orrs	r2, r1
 8004b9c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	69da      	ldr	r2, [r3, #28]
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004bac:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2201      	movs	r2, #1
 8004bb8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004bbc:	2300      	movs	r3, #0
}
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	3708      	adds	r7, #8
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	bd80      	pop	{r7, pc}

08004bc6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004bc6:	b580      	push	{r7, lr}
 8004bc8:	b088      	sub	sp, #32
 8004bca:	af00      	add	r7, sp, #0
 8004bcc:	60f8      	str	r0, [r7, #12]
 8004bce:	60b9      	str	r1, [r7, #8]
 8004bd0:	603b      	str	r3, [r7, #0]
 8004bd2:	4613      	mov	r3, r2
 8004bd4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004be0:	2b01      	cmp	r3, #1
 8004be2:	d101      	bne.n	8004be8 <HAL_SPI_Transmit+0x22>
 8004be4:	2302      	movs	r3, #2
 8004be6:	e126      	b.n	8004e36 <HAL_SPI_Transmit+0x270>
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	2201      	movs	r2, #1
 8004bec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004bf0:	f7fd fe50 	bl	8002894 <HAL_GetTick>
 8004bf4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004bf6:	88fb      	ldrh	r3, [r7, #6]
 8004bf8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c00:	b2db      	uxtb	r3, r3
 8004c02:	2b01      	cmp	r3, #1
 8004c04:	d002      	beq.n	8004c0c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004c06:	2302      	movs	r3, #2
 8004c08:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004c0a:	e10b      	b.n	8004e24 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004c0c:	68bb      	ldr	r3, [r7, #8]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d002      	beq.n	8004c18 <HAL_SPI_Transmit+0x52>
 8004c12:	88fb      	ldrh	r3, [r7, #6]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d102      	bne.n	8004c1e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004c18:	2301      	movs	r3, #1
 8004c1a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004c1c:	e102      	b.n	8004e24 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	2203      	movs	r2, #3
 8004c22:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	2200      	movs	r2, #0
 8004c2a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	68ba      	ldr	r2, [r7, #8]
 8004c30:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	88fa      	ldrh	r2, [r7, #6]
 8004c36:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	88fa      	ldrh	r2, [r7, #6]
 8004c3c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	2200      	movs	r2, #0
 8004c42:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	2200      	movs	r2, #0
 8004c48:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	2200      	movs	r2, #0
 8004c54:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	689b      	ldr	r3, [r3, #8]
 8004c60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c64:	d10f      	bne.n	8004c86 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	681a      	ldr	r2, [r3, #0]
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c74:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	681a      	ldr	r2, [r3, #0]
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004c84:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c90:	2b40      	cmp	r3, #64	; 0x40
 8004c92:	d007      	beq.n	8004ca4 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	681a      	ldr	r2, [r3, #0]
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ca2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	68db      	ldr	r3, [r3, #12]
 8004ca8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004cac:	d14b      	bne.n	8004d46 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	685b      	ldr	r3, [r3, #4]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d002      	beq.n	8004cbc <HAL_SPI_Transmit+0xf6>
 8004cb6:	8afb      	ldrh	r3, [r7, #22]
 8004cb8:	2b01      	cmp	r3, #1
 8004cba:	d13e      	bne.n	8004d3a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cc0:	881a      	ldrh	r2, [r3, #0]
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ccc:	1c9a      	adds	r2, r3, #2
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004cd6:	b29b      	uxth	r3, r3
 8004cd8:	3b01      	subs	r3, #1
 8004cda:	b29a      	uxth	r2, r3
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004ce0:	e02b      	b.n	8004d3a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	689b      	ldr	r3, [r3, #8]
 8004ce8:	f003 0302 	and.w	r3, r3, #2
 8004cec:	2b02      	cmp	r3, #2
 8004cee:	d112      	bne.n	8004d16 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cf4:	881a      	ldrh	r2, [r3, #0]
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d00:	1c9a      	adds	r2, r3, #2
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d0a:	b29b      	uxth	r3, r3
 8004d0c:	3b01      	subs	r3, #1
 8004d0e:	b29a      	uxth	r2, r3
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	86da      	strh	r2, [r3, #54]	; 0x36
 8004d14:	e011      	b.n	8004d3a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004d16:	f7fd fdbd 	bl	8002894 <HAL_GetTick>
 8004d1a:	4602      	mov	r2, r0
 8004d1c:	69bb      	ldr	r3, [r7, #24]
 8004d1e:	1ad3      	subs	r3, r2, r3
 8004d20:	683a      	ldr	r2, [r7, #0]
 8004d22:	429a      	cmp	r2, r3
 8004d24:	d803      	bhi.n	8004d2e <HAL_SPI_Transmit+0x168>
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d2c:	d102      	bne.n	8004d34 <HAL_SPI_Transmit+0x16e>
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d102      	bne.n	8004d3a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004d34:	2303      	movs	r3, #3
 8004d36:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004d38:	e074      	b.n	8004e24 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d3e:	b29b      	uxth	r3, r3
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d1ce      	bne.n	8004ce2 <HAL_SPI_Transmit+0x11c>
 8004d44:	e04c      	b.n	8004de0 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d002      	beq.n	8004d54 <HAL_SPI_Transmit+0x18e>
 8004d4e:	8afb      	ldrh	r3, [r7, #22]
 8004d50:	2b01      	cmp	r3, #1
 8004d52:	d140      	bne.n	8004dd6 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	330c      	adds	r3, #12
 8004d5e:	7812      	ldrb	r2, [r2, #0]
 8004d60:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d66:	1c5a      	adds	r2, r3, #1
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d70:	b29b      	uxth	r3, r3
 8004d72:	3b01      	subs	r3, #1
 8004d74:	b29a      	uxth	r2, r3
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004d7a:	e02c      	b.n	8004dd6 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	689b      	ldr	r3, [r3, #8]
 8004d82:	f003 0302 	and.w	r3, r3, #2
 8004d86:	2b02      	cmp	r3, #2
 8004d88:	d113      	bne.n	8004db2 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	330c      	adds	r3, #12
 8004d94:	7812      	ldrb	r2, [r2, #0]
 8004d96:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d9c:	1c5a      	adds	r2, r3, #1
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004da6:	b29b      	uxth	r3, r3
 8004da8:	3b01      	subs	r3, #1
 8004daa:	b29a      	uxth	r2, r3
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	86da      	strh	r2, [r3, #54]	; 0x36
 8004db0:	e011      	b.n	8004dd6 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004db2:	f7fd fd6f 	bl	8002894 <HAL_GetTick>
 8004db6:	4602      	mov	r2, r0
 8004db8:	69bb      	ldr	r3, [r7, #24]
 8004dba:	1ad3      	subs	r3, r2, r3
 8004dbc:	683a      	ldr	r2, [r7, #0]
 8004dbe:	429a      	cmp	r2, r3
 8004dc0:	d803      	bhi.n	8004dca <HAL_SPI_Transmit+0x204>
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dc8:	d102      	bne.n	8004dd0 <HAL_SPI_Transmit+0x20a>
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d102      	bne.n	8004dd6 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004dd0:	2303      	movs	r3, #3
 8004dd2:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004dd4:	e026      	b.n	8004e24 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004dda:	b29b      	uxth	r3, r3
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d1cd      	bne.n	8004d7c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004de0:	69ba      	ldr	r2, [r7, #24]
 8004de2:	6839      	ldr	r1, [r7, #0]
 8004de4:	68f8      	ldr	r0, [r7, #12]
 8004de6:	f000 fbcb 	bl	8005580 <SPI_EndRxTxTransaction>
 8004dea:	4603      	mov	r3, r0
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d002      	beq.n	8004df6 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	2220      	movs	r2, #32
 8004df4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	689b      	ldr	r3, [r3, #8]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d10a      	bne.n	8004e14 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004dfe:	2300      	movs	r3, #0
 8004e00:	613b      	str	r3, [r7, #16]
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	68db      	ldr	r3, [r3, #12]
 8004e08:	613b      	str	r3, [r7, #16]
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	689b      	ldr	r3, [r3, #8]
 8004e10:	613b      	str	r3, [r7, #16]
 8004e12:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d002      	beq.n	8004e22 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	77fb      	strb	r3, [r7, #31]
 8004e20:	e000      	b.n	8004e24 <HAL_SPI_Transmit+0x25e>
  }

error:
 8004e22:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	2201      	movs	r2, #1
 8004e28:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	2200      	movs	r2, #0
 8004e30:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004e34:	7ffb      	ldrb	r3, [r7, #31]
}
 8004e36:	4618      	mov	r0, r3
 8004e38:	3720      	adds	r7, #32
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bd80      	pop	{r7, pc}

08004e3e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e3e:	b580      	push	{r7, lr}
 8004e40:	b088      	sub	sp, #32
 8004e42:	af02      	add	r7, sp, #8
 8004e44:	60f8      	str	r0, [r7, #12]
 8004e46:	60b9      	str	r1, [r7, #8]
 8004e48:	603b      	str	r3, [r7, #0]
 8004e4a:	4613      	mov	r3, r2
 8004e4c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004e4e:	2300      	movs	r3, #0
 8004e50:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	685b      	ldr	r3, [r3, #4]
 8004e56:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e5a:	d112      	bne.n	8004e82 <HAL_SPI_Receive+0x44>
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	689b      	ldr	r3, [r3, #8]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d10e      	bne.n	8004e82 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	2204      	movs	r2, #4
 8004e68:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004e6c:	88fa      	ldrh	r2, [r7, #6]
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	9300      	str	r3, [sp, #0]
 8004e72:	4613      	mov	r3, r2
 8004e74:	68ba      	ldr	r2, [r7, #8]
 8004e76:	68b9      	ldr	r1, [r7, #8]
 8004e78:	68f8      	ldr	r0, [r7, #12]
 8004e7a:	f000 f8f1 	bl	8005060 <HAL_SPI_TransmitReceive>
 8004e7e:	4603      	mov	r3, r0
 8004e80:	e0ea      	b.n	8005058 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004e88:	2b01      	cmp	r3, #1
 8004e8a:	d101      	bne.n	8004e90 <HAL_SPI_Receive+0x52>
 8004e8c:	2302      	movs	r3, #2
 8004e8e:	e0e3      	b.n	8005058 <HAL_SPI_Receive+0x21a>
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	2201      	movs	r2, #1
 8004e94:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004e98:	f7fd fcfc 	bl	8002894 <HAL_GetTick>
 8004e9c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004ea4:	b2db      	uxtb	r3, r3
 8004ea6:	2b01      	cmp	r3, #1
 8004ea8:	d002      	beq.n	8004eb0 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004eaa:	2302      	movs	r3, #2
 8004eac:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004eae:	e0ca      	b.n	8005046 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8004eb0:	68bb      	ldr	r3, [r7, #8]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d002      	beq.n	8004ebc <HAL_SPI_Receive+0x7e>
 8004eb6:	88fb      	ldrh	r3, [r7, #6]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d102      	bne.n	8004ec2 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004ec0:	e0c1      	b.n	8005046 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	2204      	movs	r2, #4
 8004ec6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	2200      	movs	r2, #0
 8004ece:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	68ba      	ldr	r2, [r7, #8]
 8004ed4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	88fa      	ldrh	r2, [r7, #6]
 8004eda:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	88fa      	ldrh	r2, [r7, #6]
 8004ee0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	2200      	movs	r2, #0
 8004eec:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	2200      	movs	r2, #0
 8004efe:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	689b      	ldr	r3, [r3, #8]
 8004f04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f08:	d10f      	bne.n	8004f2a <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	681a      	ldr	r2, [r3, #0]
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f18:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	681a      	ldr	r2, [r3, #0]
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004f28:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f34:	2b40      	cmp	r3, #64	; 0x40
 8004f36:	d007      	beq.n	8004f48 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	681a      	ldr	r2, [r3, #0]
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004f46:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	68db      	ldr	r3, [r3, #12]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d162      	bne.n	8005016 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004f50:	e02e      	b.n	8004fb0 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	689b      	ldr	r3, [r3, #8]
 8004f58:	f003 0301 	and.w	r3, r3, #1
 8004f5c:	2b01      	cmp	r3, #1
 8004f5e:	d115      	bne.n	8004f8c <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f103 020c 	add.w	r2, r3, #12
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f6c:	7812      	ldrb	r2, [r2, #0]
 8004f6e:	b2d2      	uxtb	r2, r2
 8004f70:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f76:	1c5a      	adds	r2, r3, #1
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f80:	b29b      	uxth	r3, r3
 8004f82:	3b01      	subs	r3, #1
 8004f84:	b29a      	uxth	r2, r3
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004f8a:	e011      	b.n	8004fb0 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004f8c:	f7fd fc82 	bl	8002894 <HAL_GetTick>
 8004f90:	4602      	mov	r2, r0
 8004f92:	693b      	ldr	r3, [r7, #16]
 8004f94:	1ad3      	subs	r3, r2, r3
 8004f96:	683a      	ldr	r2, [r7, #0]
 8004f98:	429a      	cmp	r2, r3
 8004f9a:	d803      	bhi.n	8004fa4 <HAL_SPI_Receive+0x166>
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fa2:	d102      	bne.n	8004faa <HAL_SPI_Receive+0x16c>
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d102      	bne.n	8004fb0 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8004faa:	2303      	movs	r3, #3
 8004fac:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004fae:	e04a      	b.n	8005046 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fb4:	b29b      	uxth	r3, r3
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d1cb      	bne.n	8004f52 <HAL_SPI_Receive+0x114>
 8004fba:	e031      	b.n	8005020 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	689b      	ldr	r3, [r3, #8]
 8004fc2:	f003 0301 	and.w	r3, r3, #1
 8004fc6:	2b01      	cmp	r3, #1
 8004fc8:	d113      	bne.n	8004ff2 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	68da      	ldr	r2, [r3, #12]
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fd4:	b292      	uxth	r2, r2
 8004fd6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fdc:	1c9a      	adds	r2, r3, #2
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fe6:	b29b      	uxth	r3, r3
 8004fe8:	3b01      	subs	r3, #1
 8004fea:	b29a      	uxth	r2, r3
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004ff0:	e011      	b.n	8005016 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004ff2:	f7fd fc4f 	bl	8002894 <HAL_GetTick>
 8004ff6:	4602      	mov	r2, r0
 8004ff8:	693b      	ldr	r3, [r7, #16]
 8004ffa:	1ad3      	subs	r3, r2, r3
 8004ffc:	683a      	ldr	r2, [r7, #0]
 8004ffe:	429a      	cmp	r2, r3
 8005000:	d803      	bhi.n	800500a <HAL_SPI_Receive+0x1cc>
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005008:	d102      	bne.n	8005010 <HAL_SPI_Receive+0x1d2>
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d102      	bne.n	8005016 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8005010:	2303      	movs	r3, #3
 8005012:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005014:	e017      	b.n	8005046 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800501a:	b29b      	uxth	r3, r3
 800501c:	2b00      	cmp	r3, #0
 800501e:	d1cd      	bne.n	8004fbc <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005020:	693a      	ldr	r2, [r7, #16]
 8005022:	6839      	ldr	r1, [r7, #0]
 8005024:	68f8      	ldr	r0, [r7, #12]
 8005026:	f000 fa45 	bl	80054b4 <SPI_EndRxTransaction>
 800502a:	4603      	mov	r3, r0
 800502c:	2b00      	cmp	r3, #0
 800502e:	d002      	beq.n	8005036 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	2220      	movs	r2, #32
 8005034:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800503a:	2b00      	cmp	r3, #0
 800503c:	d002      	beq.n	8005044 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800503e:	2301      	movs	r3, #1
 8005040:	75fb      	strb	r3, [r7, #23]
 8005042:	e000      	b.n	8005046 <HAL_SPI_Receive+0x208>
  }

error :
 8005044:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	2201      	movs	r2, #1
 800504a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	2200      	movs	r2, #0
 8005052:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005056:	7dfb      	ldrb	r3, [r7, #23]
}
 8005058:	4618      	mov	r0, r3
 800505a:	3718      	adds	r7, #24
 800505c:	46bd      	mov	sp, r7
 800505e:	bd80      	pop	{r7, pc}

08005060 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b08c      	sub	sp, #48	; 0x30
 8005064:	af00      	add	r7, sp, #0
 8005066:	60f8      	str	r0, [r7, #12]
 8005068:	60b9      	str	r1, [r7, #8]
 800506a:	607a      	str	r2, [r7, #4]
 800506c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800506e:	2301      	movs	r3, #1
 8005070:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005072:	2300      	movs	r3, #0
 8005074:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800507e:	2b01      	cmp	r3, #1
 8005080:	d101      	bne.n	8005086 <HAL_SPI_TransmitReceive+0x26>
 8005082:	2302      	movs	r3, #2
 8005084:	e18a      	b.n	800539c <HAL_SPI_TransmitReceive+0x33c>
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	2201      	movs	r2, #1
 800508a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800508e:	f7fd fc01 	bl	8002894 <HAL_GetTick>
 8005092:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800509a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	685b      	ldr	r3, [r3, #4]
 80050a2:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80050a4:	887b      	ldrh	r3, [r7, #2]
 80050a6:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80050a8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80050ac:	2b01      	cmp	r3, #1
 80050ae:	d00f      	beq.n	80050d0 <HAL_SPI_TransmitReceive+0x70>
 80050b0:	69fb      	ldr	r3, [r7, #28]
 80050b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80050b6:	d107      	bne.n	80050c8 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	689b      	ldr	r3, [r3, #8]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d103      	bne.n	80050c8 <HAL_SPI_TransmitReceive+0x68>
 80050c0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80050c4:	2b04      	cmp	r3, #4
 80050c6:	d003      	beq.n	80050d0 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80050c8:	2302      	movs	r3, #2
 80050ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80050ce:	e15b      	b.n	8005388 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80050d0:	68bb      	ldr	r3, [r7, #8]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d005      	beq.n	80050e2 <HAL_SPI_TransmitReceive+0x82>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d002      	beq.n	80050e2 <HAL_SPI_TransmitReceive+0x82>
 80050dc:	887b      	ldrh	r3, [r7, #2]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d103      	bne.n	80050ea <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80050e2:	2301      	movs	r3, #1
 80050e4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80050e8:	e14e      	b.n	8005388 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80050f0:	b2db      	uxtb	r3, r3
 80050f2:	2b04      	cmp	r3, #4
 80050f4:	d003      	beq.n	80050fe <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	2205      	movs	r2, #5
 80050fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	2200      	movs	r2, #0
 8005102:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	687a      	ldr	r2, [r7, #4]
 8005108:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	887a      	ldrh	r2, [r7, #2]
 800510e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	887a      	ldrh	r2, [r7, #2]
 8005114:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	68ba      	ldr	r2, [r7, #8]
 800511a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	887a      	ldrh	r2, [r7, #2]
 8005120:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	887a      	ldrh	r2, [r7, #2]
 8005126:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	2200      	movs	r2, #0
 800512c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	2200      	movs	r2, #0
 8005132:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800513e:	2b40      	cmp	r3, #64	; 0x40
 8005140:	d007      	beq.n	8005152 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	681a      	ldr	r2, [r3, #0]
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005150:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	68db      	ldr	r3, [r3, #12]
 8005156:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800515a:	d178      	bne.n	800524e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	685b      	ldr	r3, [r3, #4]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d002      	beq.n	800516a <HAL_SPI_TransmitReceive+0x10a>
 8005164:	8b7b      	ldrh	r3, [r7, #26]
 8005166:	2b01      	cmp	r3, #1
 8005168:	d166      	bne.n	8005238 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800516e:	881a      	ldrh	r2, [r3, #0]
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800517a:	1c9a      	adds	r2, r3, #2
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005184:	b29b      	uxth	r3, r3
 8005186:	3b01      	subs	r3, #1
 8005188:	b29a      	uxth	r2, r3
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800518e:	e053      	b.n	8005238 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	689b      	ldr	r3, [r3, #8]
 8005196:	f003 0302 	and.w	r3, r3, #2
 800519a:	2b02      	cmp	r3, #2
 800519c:	d11b      	bne.n	80051d6 <HAL_SPI_TransmitReceive+0x176>
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80051a2:	b29b      	uxth	r3, r3
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d016      	beq.n	80051d6 <HAL_SPI_TransmitReceive+0x176>
 80051a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051aa:	2b01      	cmp	r3, #1
 80051ac:	d113      	bne.n	80051d6 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051b2:	881a      	ldrh	r2, [r3, #0]
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051be:	1c9a      	adds	r2, r3, #2
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80051c8:	b29b      	uxth	r3, r3
 80051ca:	3b01      	subs	r3, #1
 80051cc:	b29a      	uxth	r2, r3
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80051d2:	2300      	movs	r3, #0
 80051d4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	689b      	ldr	r3, [r3, #8]
 80051dc:	f003 0301 	and.w	r3, r3, #1
 80051e0:	2b01      	cmp	r3, #1
 80051e2:	d119      	bne.n	8005218 <HAL_SPI_TransmitReceive+0x1b8>
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051e8:	b29b      	uxth	r3, r3
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d014      	beq.n	8005218 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	68da      	ldr	r2, [r3, #12]
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051f8:	b292      	uxth	r2, r2
 80051fa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005200:	1c9a      	adds	r2, r3, #2
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800520a:	b29b      	uxth	r3, r3
 800520c:	3b01      	subs	r3, #1
 800520e:	b29a      	uxth	r2, r3
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005214:	2301      	movs	r3, #1
 8005216:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005218:	f7fd fb3c 	bl	8002894 <HAL_GetTick>
 800521c:	4602      	mov	r2, r0
 800521e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005220:	1ad3      	subs	r3, r2, r3
 8005222:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005224:	429a      	cmp	r2, r3
 8005226:	d807      	bhi.n	8005238 <HAL_SPI_TransmitReceive+0x1d8>
 8005228:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800522a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800522e:	d003      	beq.n	8005238 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005230:	2303      	movs	r3, #3
 8005232:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005236:	e0a7      	b.n	8005388 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800523c:	b29b      	uxth	r3, r3
 800523e:	2b00      	cmp	r3, #0
 8005240:	d1a6      	bne.n	8005190 <HAL_SPI_TransmitReceive+0x130>
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005246:	b29b      	uxth	r3, r3
 8005248:	2b00      	cmp	r3, #0
 800524a:	d1a1      	bne.n	8005190 <HAL_SPI_TransmitReceive+0x130>
 800524c:	e07c      	b.n	8005348 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	685b      	ldr	r3, [r3, #4]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d002      	beq.n	800525c <HAL_SPI_TransmitReceive+0x1fc>
 8005256:	8b7b      	ldrh	r3, [r7, #26]
 8005258:	2b01      	cmp	r3, #1
 800525a:	d16b      	bne.n	8005334 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	330c      	adds	r3, #12
 8005266:	7812      	ldrb	r2, [r2, #0]
 8005268:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800526e:	1c5a      	adds	r2, r3, #1
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005278:	b29b      	uxth	r3, r3
 800527a:	3b01      	subs	r3, #1
 800527c:	b29a      	uxth	r2, r3
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005282:	e057      	b.n	8005334 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	689b      	ldr	r3, [r3, #8]
 800528a:	f003 0302 	and.w	r3, r3, #2
 800528e:	2b02      	cmp	r3, #2
 8005290:	d11c      	bne.n	80052cc <HAL_SPI_TransmitReceive+0x26c>
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005296:	b29b      	uxth	r3, r3
 8005298:	2b00      	cmp	r3, #0
 800529a:	d017      	beq.n	80052cc <HAL_SPI_TransmitReceive+0x26c>
 800529c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800529e:	2b01      	cmp	r3, #1
 80052a0:	d114      	bne.n	80052cc <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	330c      	adds	r3, #12
 80052ac:	7812      	ldrb	r2, [r2, #0]
 80052ae:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052b4:	1c5a      	adds	r2, r3, #1
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80052be:	b29b      	uxth	r3, r3
 80052c0:	3b01      	subs	r3, #1
 80052c2:	b29a      	uxth	r2, r3
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80052c8:	2300      	movs	r3, #0
 80052ca:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	689b      	ldr	r3, [r3, #8]
 80052d2:	f003 0301 	and.w	r3, r3, #1
 80052d6:	2b01      	cmp	r3, #1
 80052d8:	d119      	bne.n	800530e <HAL_SPI_TransmitReceive+0x2ae>
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052de:	b29b      	uxth	r3, r3
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d014      	beq.n	800530e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	68da      	ldr	r2, [r3, #12]
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052ee:	b2d2      	uxtb	r2, r2
 80052f0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052f6:	1c5a      	adds	r2, r3, #1
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005300:	b29b      	uxth	r3, r3
 8005302:	3b01      	subs	r3, #1
 8005304:	b29a      	uxth	r2, r3
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800530a:	2301      	movs	r3, #1
 800530c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800530e:	f7fd fac1 	bl	8002894 <HAL_GetTick>
 8005312:	4602      	mov	r2, r0
 8005314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005316:	1ad3      	subs	r3, r2, r3
 8005318:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800531a:	429a      	cmp	r2, r3
 800531c:	d803      	bhi.n	8005326 <HAL_SPI_TransmitReceive+0x2c6>
 800531e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005320:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005324:	d102      	bne.n	800532c <HAL_SPI_TransmitReceive+0x2cc>
 8005326:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005328:	2b00      	cmp	r3, #0
 800532a:	d103      	bne.n	8005334 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800532c:	2303      	movs	r3, #3
 800532e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005332:	e029      	b.n	8005388 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005338:	b29b      	uxth	r3, r3
 800533a:	2b00      	cmp	r3, #0
 800533c:	d1a2      	bne.n	8005284 <HAL_SPI_TransmitReceive+0x224>
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005342:	b29b      	uxth	r3, r3
 8005344:	2b00      	cmp	r3, #0
 8005346:	d19d      	bne.n	8005284 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005348:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800534a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800534c:	68f8      	ldr	r0, [r7, #12]
 800534e:	f000 f917 	bl	8005580 <SPI_EndRxTxTransaction>
 8005352:	4603      	mov	r3, r0
 8005354:	2b00      	cmp	r3, #0
 8005356:	d006      	beq.n	8005366 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005358:	2301      	movs	r3, #1
 800535a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	2220      	movs	r2, #32
 8005362:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005364:	e010      	b.n	8005388 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	689b      	ldr	r3, [r3, #8]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d10b      	bne.n	8005386 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800536e:	2300      	movs	r3, #0
 8005370:	617b      	str	r3, [r7, #20]
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	68db      	ldr	r3, [r3, #12]
 8005378:	617b      	str	r3, [r7, #20]
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	689b      	ldr	r3, [r3, #8]
 8005380:	617b      	str	r3, [r7, #20]
 8005382:	697b      	ldr	r3, [r7, #20]
 8005384:	e000      	b.n	8005388 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005386:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	2201      	movs	r2, #1
 800538c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	2200      	movs	r2, #0
 8005394:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005398:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800539c:	4618      	mov	r0, r3
 800539e:	3730      	adds	r7, #48	; 0x30
 80053a0:	46bd      	mov	sp, r7
 80053a2:	bd80      	pop	{r7, pc}

080053a4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b088      	sub	sp, #32
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	60f8      	str	r0, [r7, #12]
 80053ac:	60b9      	str	r1, [r7, #8]
 80053ae:	603b      	str	r3, [r7, #0]
 80053b0:	4613      	mov	r3, r2
 80053b2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80053b4:	f7fd fa6e 	bl	8002894 <HAL_GetTick>
 80053b8:	4602      	mov	r2, r0
 80053ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053bc:	1a9b      	subs	r3, r3, r2
 80053be:	683a      	ldr	r2, [r7, #0]
 80053c0:	4413      	add	r3, r2
 80053c2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80053c4:	f7fd fa66 	bl	8002894 <HAL_GetTick>
 80053c8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80053ca:	4b39      	ldr	r3, [pc, #228]	; (80054b0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	015b      	lsls	r3, r3, #5
 80053d0:	0d1b      	lsrs	r3, r3, #20
 80053d2:	69fa      	ldr	r2, [r7, #28]
 80053d4:	fb02 f303 	mul.w	r3, r2, r3
 80053d8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80053da:	e054      	b.n	8005486 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053e2:	d050      	beq.n	8005486 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80053e4:	f7fd fa56 	bl	8002894 <HAL_GetTick>
 80053e8:	4602      	mov	r2, r0
 80053ea:	69bb      	ldr	r3, [r7, #24]
 80053ec:	1ad3      	subs	r3, r2, r3
 80053ee:	69fa      	ldr	r2, [r7, #28]
 80053f0:	429a      	cmp	r2, r3
 80053f2:	d902      	bls.n	80053fa <SPI_WaitFlagStateUntilTimeout+0x56>
 80053f4:	69fb      	ldr	r3, [r7, #28]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d13d      	bne.n	8005476 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	685a      	ldr	r2, [r3, #4]
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005408:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	685b      	ldr	r3, [r3, #4]
 800540e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005412:	d111      	bne.n	8005438 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	689b      	ldr	r3, [r3, #8]
 8005418:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800541c:	d004      	beq.n	8005428 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	689b      	ldr	r3, [r3, #8]
 8005422:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005426:	d107      	bne.n	8005438 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	681a      	ldr	r2, [r3, #0]
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005436:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800543c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005440:	d10f      	bne.n	8005462 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	681a      	ldr	r2, [r3, #0]
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005450:	601a      	str	r2, [r3, #0]
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	681a      	ldr	r2, [r3, #0]
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005460:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	2201      	movs	r2, #1
 8005466:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	2200      	movs	r2, #0
 800546e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005472:	2303      	movs	r3, #3
 8005474:	e017      	b.n	80054a6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005476:	697b      	ldr	r3, [r7, #20]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d101      	bne.n	8005480 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800547c:	2300      	movs	r3, #0
 800547e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005480:	697b      	ldr	r3, [r7, #20]
 8005482:	3b01      	subs	r3, #1
 8005484:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	689a      	ldr	r2, [r3, #8]
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	4013      	ands	r3, r2
 8005490:	68ba      	ldr	r2, [r7, #8]
 8005492:	429a      	cmp	r2, r3
 8005494:	bf0c      	ite	eq
 8005496:	2301      	moveq	r3, #1
 8005498:	2300      	movne	r3, #0
 800549a:	b2db      	uxtb	r3, r3
 800549c:	461a      	mov	r2, r3
 800549e:	79fb      	ldrb	r3, [r7, #7]
 80054a0:	429a      	cmp	r2, r3
 80054a2:	d19b      	bne.n	80053dc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80054a4:	2300      	movs	r3, #0
}
 80054a6:	4618      	mov	r0, r3
 80054a8:	3720      	adds	r7, #32
 80054aa:	46bd      	mov	sp, r7
 80054ac:	bd80      	pop	{r7, pc}
 80054ae:	bf00      	nop
 80054b0:	20000008 	.word	0x20000008

080054b4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b086      	sub	sp, #24
 80054b8:	af02      	add	r7, sp, #8
 80054ba:	60f8      	str	r0, [r7, #12]
 80054bc:	60b9      	str	r1, [r7, #8]
 80054be:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	685b      	ldr	r3, [r3, #4]
 80054c4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80054c8:	d111      	bne.n	80054ee <SPI_EndRxTransaction+0x3a>
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	689b      	ldr	r3, [r3, #8]
 80054ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054d2:	d004      	beq.n	80054de <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	689b      	ldr	r3, [r3, #8]
 80054d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054dc:	d107      	bne.n	80054ee <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	681a      	ldr	r2, [r3, #0]
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80054ec:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	685b      	ldr	r3, [r3, #4]
 80054f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80054f6:	d12a      	bne.n	800554e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	689b      	ldr	r3, [r3, #8]
 80054fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005500:	d012      	beq.n	8005528 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	9300      	str	r3, [sp, #0]
 8005506:	68bb      	ldr	r3, [r7, #8]
 8005508:	2200      	movs	r2, #0
 800550a:	2180      	movs	r1, #128	; 0x80
 800550c:	68f8      	ldr	r0, [r7, #12]
 800550e:	f7ff ff49 	bl	80053a4 <SPI_WaitFlagStateUntilTimeout>
 8005512:	4603      	mov	r3, r0
 8005514:	2b00      	cmp	r3, #0
 8005516:	d02d      	beq.n	8005574 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800551c:	f043 0220 	orr.w	r2, r3, #32
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005524:	2303      	movs	r3, #3
 8005526:	e026      	b.n	8005576 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	9300      	str	r3, [sp, #0]
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	2200      	movs	r2, #0
 8005530:	2101      	movs	r1, #1
 8005532:	68f8      	ldr	r0, [r7, #12]
 8005534:	f7ff ff36 	bl	80053a4 <SPI_WaitFlagStateUntilTimeout>
 8005538:	4603      	mov	r3, r0
 800553a:	2b00      	cmp	r3, #0
 800553c:	d01a      	beq.n	8005574 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005542:	f043 0220 	orr.w	r2, r3, #32
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800554a:	2303      	movs	r3, #3
 800554c:	e013      	b.n	8005576 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	9300      	str	r3, [sp, #0]
 8005552:	68bb      	ldr	r3, [r7, #8]
 8005554:	2200      	movs	r2, #0
 8005556:	2101      	movs	r1, #1
 8005558:	68f8      	ldr	r0, [r7, #12]
 800555a:	f7ff ff23 	bl	80053a4 <SPI_WaitFlagStateUntilTimeout>
 800555e:	4603      	mov	r3, r0
 8005560:	2b00      	cmp	r3, #0
 8005562:	d007      	beq.n	8005574 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005568:	f043 0220 	orr.w	r2, r3, #32
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005570:	2303      	movs	r3, #3
 8005572:	e000      	b.n	8005576 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005574:	2300      	movs	r3, #0
}
 8005576:	4618      	mov	r0, r3
 8005578:	3710      	adds	r7, #16
 800557a:	46bd      	mov	sp, r7
 800557c:	bd80      	pop	{r7, pc}
	...

08005580 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b088      	sub	sp, #32
 8005584:	af02      	add	r7, sp, #8
 8005586:	60f8      	str	r0, [r7, #12]
 8005588:	60b9      	str	r1, [r7, #8]
 800558a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800558c:	4b1b      	ldr	r3, [pc, #108]	; (80055fc <SPI_EndRxTxTransaction+0x7c>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4a1b      	ldr	r2, [pc, #108]	; (8005600 <SPI_EndRxTxTransaction+0x80>)
 8005592:	fba2 2303 	umull	r2, r3, r2, r3
 8005596:	0d5b      	lsrs	r3, r3, #21
 8005598:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800559c:	fb02 f303 	mul.w	r3, r2, r3
 80055a0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	685b      	ldr	r3, [r3, #4]
 80055a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80055aa:	d112      	bne.n	80055d2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	9300      	str	r3, [sp, #0]
 80055b0:	68bb      	ldr	r3, [r7, #8]
 80055b2:	2200      	movs	r2, #0
 80055b4:	2180      	movs	r1, #128	; 0x80
 80055b6:	68f8      	ldr	r0, [r7, #12]
 80055b8:	f7ff fef4 	bl	80053a4 <SPI_WaitFlagStateUntilTimeout>
 80055bc:	4603      	mov	r3, r0
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d016      	beq.n	80055f0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055c6:	f043 0220 	orr.w	r2, r3, #32
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80055ce:	2303      	movs	r3, #3
 80055d0:	e00f      	b.n	80055f2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80055d2:	697b      	ldr	r3, [r7, #20]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d00a      	beq.n	80055ee <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80055d8:	697b      	ldr	r3, [r7, #20]
 80055da:	3b01      	subs	r3, #1
 80055dc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	689b      	ldr	r3, [r3, #8]
 80055e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055e8:	2b80      	cmp	r3, #128	; 0x80
 80055ea:	d0f2      	beq.n	80055d2 <SPI_EndRxTxTransaction+0x52>
 80055ec:	e000      	b.n	80055f0 <SPI_EndRxTxTransaction+0x70>
        break;
 80055ee:	bf00      	nop
  }

  return HAL_OK;
 80055f0:	2300      	movs	r3, #0
}
 80055f2:	4618      	mov	r0, r3
 80055f4:	3718      	adds	r7, #24
 80055f6:	46bd      	mov	sp, r7
 80055f8:	bd80      	pop	{r7, pc}
 80055fa:	bf00      	nop
 80055fc:	20000008 	.word	0x20000008
 8005600:	165e9f81 	.word	0x165e9f81

08005604 <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 8005604:	b580      	push	{r7, lr}
 8005606:	b084      	sub	sp, #16
 8005608:	af00      	add	r7, sp, #0
 800560a:	60f8      	str	r0, [r7, #12]
 800560c:	60b9      	str	r1, [r7, #8]
 800560e:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d101      	bne.n	800561a <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 8005616:	2301      	movs	r3, #1
 8005618:	e034      	b.n	8005684 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8005620:	b2db      	uxtb	r3, r3
 8005622:	2b00      	cmp	r3, #0
 8005624:	d106      	bne.n	8005634 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	2200      	movs	r2, #0
 800562a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 800562e:	68f8      	ldr	r0, [r7, #12]
 8005630:	f7fb f9a4 	bl	800097c <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681a      	ldr	r2, [r3, #0]
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	3308      	adds	r3, #8
 800563c:	4619      	mov	r1, r3
 800563e:	4610      	mov	r0, r2
 8005640:	f001 fd1a 	bl	8007078 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	6818      	ldr	r0, [r3, #0]
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	689b      	ldr	r3, [r3, #8]
 800564c:	461a      	mov	r2, r3
 800564e:	68b9      	ldr	r1, [r7, #8]
 8005650:	f001 fd64 	bl	800711c <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	6858      	ldr	r0, [r3, #4]
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	689a      	ldr	r2, [r3, #8]
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005660:	6879      	ldr	r1, [r7, #4]
 8005662:	f001 fd99 	bl	8007198 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	68fa      	ldr	r2, [r7, #12]
 800566c:	6892      	ldr	r2, [r2, #8]
 800566e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	68fa      	ldr	r2, [r7, #12]
 8005678:	6892      	ldr	r2, [r2, #8]
 800567a:	f041 0101 	orr.w	r1, r1, #1
 800567e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 8005682:	2300      	movs	r3, #0
}
 8005684:	4618      	mov	r0, r3
 8005686:	3710      	adds	r7, #16
 8005688:	46bd      	mov	sp, r7
 800568a:	bd80      	pop	{r7, pc}

0800568c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b082      	sub	sp, #8
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d101      	bne.n	800569e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800569a:	2301      	movs	r3, #1
 800569c:	e041      	b.n	8005722 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056a4:	b2db      	uxtb	r3, r3
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d106      	bne.n	80056b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2200      	movs	r2, #0
 80056ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80056b2:	6878      	ldr	r0, [r7, #4]
 80056b4:	f7fc fec6 	bl	8002444 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2202      	movs	r2, #2
 80056bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681a      	ldr	r2, [r3, #0]
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	3304      	adds	r3, #4
 80056c8:	4619      	mov	r1, r3
 80056ca:	4610      	mov	r0, r2
 80056cc:	f000 fa96 	bl	8005bfc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2201      	movs	r2, #1
 80056d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2201      	movs	r2, #1
 80056dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2201      	movs	r2, #1
 80056e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2201      	movs	r2, #1
 80056ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2201      	movs	r2, #1
 80056f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2201      	movs	r2, #1
 80056fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2201      	movs	r2, #1
 8005704:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2201      	movs	r2, #1
 800570c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2201      	movs	r2, #1
 8005714:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2201      	movs	r2, #1
 800571c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005720:	2300      	movs	r3, #0
}
 8005722:	4618      	mov	r0, r3
 8005724:	3708      	adds	r7, #8
 8005726:	46bd      	mov	sp, r7
 8005728:	bd80      	pop	{r7, pc}
	...

0800572c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800572c:	b480      	push	{r7}
 800572e:	b085      	sub	sp, #20
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800573a:	b2db      	uxtb	r3, r3
 800573c:	2b01      	cmp	r3, #1
 800573e:	d001      	beq.n	8005744 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005740:	2301      	movs	r3, #1
 8005742:	e04e      	b.n	80057e2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2202      	movs	r2, #2
 8005748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	68da      	ldr	r2, [r3, #12]
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f042 0201 	orr.w	r2, r2, #1
 800575a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	4a23      	ldr	r2, [pc, #140]	; (80057f0 <HAL_TIM_Base_Start_IT+0xc4>)
 8005762:	4293      	cmp	r3, r2
 8005764:	d022      	beq.n	80057ac <HAL_TIM_Base_Start_IT+0x80>
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800576e:	d01d      	beq.n	80057ac <HAL_TIM_Base_Start_IT+0x80>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	4a1f      	ldr	r2, [pc, #124]	; (80057f4 <HAL_TIM_Base_Start_IT+0xc8>)
 8005776:	4293      	cmp	r3, r2
 8005778:	d018      	beq.n	80057ac <HAL_TIM_Base_Start_IT+0x80>
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	4a1e      	ldr	r2, [pc, #120]	; (80057f8 <HAL_TIM_Base_Start_IT+0xcc>)
 8005780:	4293      	cmp	r3, r2
 8005782:	d013      	beq.n	80057ac <HAL_TIM_Base_Start_IT+0x80>
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	4a1c      	ldr	r2, [pc, #112]	; (80057fc <HAL_TIM_Base_Start_IT+0xd0>)
 800578a:	4293      	cmp	r3, r2
 800578c:	d00e      	beq.n	80057ac <HAL_TIM_Base_Start_IT+0x80>
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	4a1b      	ldr	r2, [pc, #108]	; (8005800 <HAL_TIM_Base_Start_IT+0xd4>)
 8005794:	4293      	cmp	r3, r2
 8005796:	d009      	beq.n	80057ac <HAL_TIM_Base_Start_IT+0x80>
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	4a19      	ldr	r2, [pc, #100]	; (8005804 <HAL_TIM_Base_Start_IT+0xd8>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	d004      	beq.n	80057ac <HAL_TIM_Base_Start_IT+0x80>
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	4a18      	ldr	r2, [pc, #96]	; (8005808 <HAL_TIM_Base_Start_IT+0xdc>)
 80057a8:	4293      	cmp	r3, r2
 80057aa:	d111      	bne.n	80057d0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	689b      	ldr	r3, [r3, #8]
 80057b2:	f003 0307 	and.w	r3, r3, #7
 80057b6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	2b06      	cmp	r3, #6
 80057bc:	d010      	beq.n	80057e0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	681a      	ldr	r2, [r3, #0]
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f042 0201 	orr.w	r2, r2, #1
 80057cc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057ce:	e007      	b.n	80057e0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	681a      	ldr	r2, [r3, #0]
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f042 0201 	orr.w	r2, r2, #1
 80057de:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80057e0:	2300      	movs	r3, #0
}
 80057e2:	4618      	mov	r0, r3
 80057e4:	3714      	adds	r7, #20
 80057e6:	46bd      	mov	sp, r7
 80057e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ec:	4770      	bx	lr
 80057ee:	bf00      	nop
 80057f0:	40010000 	.word	0x40010000
 80057f4:	40000400 	.word	0x40000400
 80057f8:	40000800 	.word	0x40000800
 80057fc:	40000c00 	.word	0x40000c00
 8005800:	40010400 	.word	0x40010400
 8005804:	40014000 	.word	0x40014000
 8005808:	40001800 	.word	0x40001800

0800580c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b082      	sub	sp, #8
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	691b      	ldr	r3, [r3, #16]
 800581a:	f003 0302 	and.w	r3, r3, #2
 800581e:	2b02      	cmp	r3, #2
 8005820:	d122      	bne.n	8005868 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	68db      	ldr	r3, [r3, #12]
 8005828:	f003 0302 	and.w	r3, r3, #2
 800582c:	2b02      	cmp	r3, #2
 800582e:	d11b      	bne.n	8005868 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f06f 0202 	mvn.w	r2, #2
 8005838:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2201      	movs	r2, #1
 800583e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	699b      	ldr	r3, [r3, #24]
 8005846:	f003 0303 	and.w	r3, r3, #3
 800584a:	2b00      	cmp	r3, #0
 800584c:	d003      	beq.n	8005856 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800584e:	6878      	ldr	r0, [r7, #4]
 8005850:	f000 f9b5 	bl	8005bbe <HAL_TIM_IC_CaptureCallback>
 8005854:	e005      	b.n	8005862 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005856:	6878      	ldr	r0, [r7, #4]
 8005858:	f000 f9a7 	bl	8005baa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800585c:	6878      	ldr	r0, [r7, #4]
 800585e:	f000 f9b8 	bl	8005bd2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2200      	movs	r2, #0
 8005866:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	691b      	ldr	r3, [r3, #16]
 800586e:	f003 0304 	and.w	r3, r3, #4
 8005872:	2b04      	cmp	r3, #4
 8005874:	d122      	bne.n	80058bc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	68db      	ldr	r3, [r3, #12]
 800587c:	f003 0304 	and.w	r3, r3, #4
 8005880:	2b04      	cmp	r3, #4
 8005882:	d11b      	bne.n	80058bc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f06f 0204 	mvn.w	r2, #4
 800588c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2202      	movs	r2, #2
 8005892:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	699b      	ldr	r3, [r3, #24]
 800589a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d003      	beq.n	80058aa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058a2:	6878      	ldr	r0, [r7, #4]
 80058a4:	f000 f98b 	bl	8005bbe <HAL_TIM_IC_CaptureCallback>
 80058a8:	e005      	b.n	80058b6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058aa:	6878      	ldr	r0, [r7, #4]
 80058ac:	f000 f97d 	bl	8005baa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058b0:	6878      	ldr	r0, [r7, #4]
 80058b2:	f000 f98e 	bl	8005bd2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2200      	movs	r2, #0
 80058ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	691b      	ldr	r3, [r3, #16]
 80058c2:	f003 0308 	and.w	r3, r3, #8
 80058c6:	2b08      	cmp	r3, #8
 80058c8:	d122      	bne.n	8005910 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	68db      	ldr	r3, [r3, #12]
 80058d0:	f003 0308 	and.w	r3, r3, #8
 80058d4:	2b08      	cmp	r3, #8
 80058d6:	d11b      	bne.n	8005910 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f06f 0208 	mvn.w	r2, #8
 80058e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2204      	movs	r2, #4
 80058e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	69db      	ldr	r3, [r3, #28]
 80058ee:	f003 0303 	and.w	r3, r3, #3
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d003      	beq.n	80058fe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058f6:	6878      	ldr	r0, [r7, #4]
 80058f8:	f000 f961 	bl	8005bbe <HAL_TIM_IC_CaptureCallback>
 80058fc:	e005      	b.n	800590a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058fe:	6878      	ldr	r0, [r7, #4]
 8005900:	f000 f953 	bl	8005baa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005904:	6878      	ldr	r0, [r7, #4]
 8005906:	f000 f964 	bl	8005bd2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2200      	movs	r2, #0
 800590e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	691b      	ldr	r3, [r3, #16]
 8005916:	f003 0310 	and.w	r3, r3, #16
 800591a:	2b10      	cmp	r3, #16
 800591c:	d122      	bne.n	8005964 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	68db      	ldr	r3, [r3, #12]
 8005924:	f003 0310 	and.w	r3, r3, #16
 8005928:	2b10      	cmp	r3, #16
 800592a:	d11b      	bne.n	8005964 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f06f 0210 	mvn.w	r2, #16
 8005934:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2208      	movs	r2, #8
 800593a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	69db      	ldr	r3, [r3, #28]
 8005942:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005946:	2b00      	cmp	r3, #0
 8005948:	d003      	beq.n	8005952 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800594a:	6878      	ldr	r0, [r7, #4]
 800594c:	f000 f937 	bl	8005bbe <HAL_TIM_IC_CaptureCallback>
 8005950:	e005      	b.n	800595e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005952:	6878      	ldr	r0, [r7, #4]
 8005954:	f000 f929 	bl	8005baa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005958:	6878      	ldr	r0, [r7, #4]
 800595a:	f000 f93a 	bl	8005bd2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2200      	movs	r2, #0
 8005962:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	691b      	ldr	r3, [r3, #16]
 800596a:	f003 0301 	and.w	r3, r3, #1
 800596e:	2b01      	cmp	r3, #1
 8005970:	d10e      	bne.n	8005990 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	68db      	ldr	r3, [r3, #12]
 8005978:	f003 0301 	and.w	r3, r3, #1
 800597c:	2b01      	cmp	r3, #1
 800597e:	d107      	bne.n	8005990 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f06f 0201 	mvn.w	r2, #1
 8005988:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800598a:	6878      	ldr	r0, [r7, #4]
 800598c:	f7fc fb9c 	bl	80020c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	691b      	ldr	r3, [r3, #16]
 8005996:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800599a:	2b80      	cmp	r3, #128	; 0x80
 800599c:	d10e      	bne.n	80059bc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	68db      	ldr	r3, [r3, #12]
 80059a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059a8:	2b80      	cmp	r3, #128	; 0x80
 80059aa:	d107      	bne.n	80059bc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80059b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80059b6:	6878      	ldr	r0, [r7, #4]
 80059b8:	f000 fae0 	bl	8005f7c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	691b      	ldr	r3, [r3, #16]
 80059c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059c6:	2b40      	cmp	r3, #64	; 0x40
 80059c8:	d10e      	bne.n	80059e8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	68db      	ldr	r3, [r3, #12]
 80059d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059d4:	2b40      	cmp	r3, #64	; 0x40
 80059d6:	d107      	bne.n	80059e8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80059e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80059e2:	6878      	ldr	r0, [r7, #4]
 80059e4:	f000 f8ff 	bl	8005be6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	691b      	ldr	r3, [r3, #16]
 80059ee:	f003 0320 	and.w	r3, r3, #32
 80059f2:	2b20      	cmp	r3, #32
 80059f4:	d10e      	bne.n	8005a14 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	68db      	ldr	r3, [r3, #12]
 80059fc:	f003 0320 	and.w	r3, r3, #32
 8005a00:	2b20      	cmp	r3, #32
 8005a02:	d107      	bne.n	8005a14 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f06f 0220 	mvn.w	r2, #32
 8005a0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005a0e:	6878      	ldr	r0, [r7, #4]
 8005a10:	f000 faaa 	bl	8005f68 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005a14:	bf00      	nop
 8005a16:	3708      	adds	r7, #8
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	bd80      	pop	{r7, pc}

08005a1c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b084      	sub	sp, #16
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
 8005a24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005a26:	2300      	movs	r3, #0
 8005a28:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a30:	2b01      	cmp	r3, #1
 8005a32:	d101      	bne.n	8005a38 <HAL_TIM_ConfigClockSource+0x1c>
 8005a34:	2302      	movs	r3, #2
 8005a36:	e0b4      	b.n	8005ba2 <HAL_TIM_ConfigClockSource+0x186>
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2201      	movs	r2, #1
 8005a3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2202      	movs	r2, #2
 8005a44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	689b      	ldr	r3, [r3, #8]
 8005a4e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005a56:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a58:	68bb      	ldr	r3, [r7, #8]
 8005a5a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005a5e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	68ba      	ldr	r2, [r7, #8]
 8005a66:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a70:	d03e      	beq.n	8005af0 <HAL_TIM_ConfigClockSource+0xd4>
 8005a72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a76:	f200 8087 	bhi.w	8005b88 <HAL_TIM_ConfigClockSource+0x16c>
 8005a7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a7e:	f000 8086 	beq.w	8005b8e <HAL_TIM_ConfigClockSource+0x172>
 8005a82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a86:	d87f      	bhi.n	8005b88 <HAL_TIM_ConfigClockSource+0x16c>
 8005a88:	2b70      	cmp	r3, #112	; 0x70
 8005a8a:	d01a      	beq.n	8005ac2 <HAL_TIM_ConfigClockSource+0xa6>
 8005a8c:	2b70      	cmp	r3, #112	; 0x70
 8005a8e:	d87b      	bhi.n	8005b88 <HAL_TIM_ConfigClockSource+0x16c>
 8005a90:	2b60      	cmp	r3, #96	; 0x60
 8005a92:	d050      	beq.n	8005b36 <HAL_TIM_ConfigClockSource+0x11a>
 8005a94:	2b60      	cmp	r3, #96	; 0x60
 8005a96:	d877      	bhi.n	8005b88 <HAL_TIM_ConfigClockSource+0x16c>
 8005a98:	2b50      	cmp	r3, #80	; 0x50
 8005a9a:	d03c      	beq.n	8005b16 <HAL_TIM_ConfigClockSource+0xfa>
 8005a9c:	2b50      	cmp	r3, #80	; 0x50
 8005a9e:	d873      	bhi.n	8005b88 <HAL_TIM_ConfigClockSource+0x16c>
 8005aa0:	2b40      	cmp	r3, #64	; 0x40
 8005aa2:	d058      	beq.n	8005b56 <HAL_TIM_ConfigClockSource+0x13a>
 8005aa4:	2b40      	cmp	r3, #64	; 0x40
 8005aa6:	d86f      	bhi.n	8005b88 <HAL_TIM_ConfigClockSource+0x16c>
 8005aa8:	2b30      	cmp	r3, #48	; 0x30
 8005aaa:	d064      	beq.n	8005b76 <HAL_TIM_ConfigClockSource+0x15a>
 8005aac:	2b30      	cmp	r3, #48	; 0x30
 8005aae:	d86b      	bhi.n	8005b88 <HAL_TIM_ConfigClockSource+0x16c>
 8005ab0:	2b20      	cmp	r3, #32
 8005ab2:	d060      	beq.n	8005b76 <HAL_TIM_ConfigClockSource+0x15a>
 8005ab4:	2b20      	cmp	r3, #32
 8005ab6:	d867      	bhi.n	8005b88 <HAL_TIM_ConfigClockSource+0x16c>
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d05c      	beq.n	8005b76 <HAL_TIM_ConfigClockSource+0x15a>
 8005abc:	2b10      	cmp	r3, #16
 8005abe:	d05a      	beq.n	8005b76 <HAL_TIM_ConfigClockSource+0x15a>
 8005ac0:	e062      	b.n	8005b88 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6818      	ldr	r0, [r3, #0]
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	6899      	ldr	r1, [r3, #8]
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	685a      	ldr	r2, [r3, #4]
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	68db      	ldr	r3, [r3, #12]
 8005ad2:	f000 f9ad 	bl	8005e30 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	689b      	ldr	r3, [r3, #8]
 8005adc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005ade:	68bb      	ldr	r3, [r7, #8]
 8005ae0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005ae4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	68ba      	ldr	r2, [r7, #8]
 8005aec:	609a      	str	r2, [r3, #8]
      break;
 8005aee:	e04f      	b.n	8005b90 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6818      	ldr	r0, [r3, #0]
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	6899      	ldr	r1, [r3, #8]
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	685a      	ldr	r2, [r3, #4]
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	68db      	ldr	r3, [r3, #12]
 8005b00:	f000 f996 	bl	8005e30 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	689a      	ldr	r2, [r3, #8]
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005b12:	609a      	str	r2, [r3, #8]
      break;
 8005b14:	e03c      	b.n	8005b90 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6818      	ldr	r0, [r3, #0]
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	6859      	ldr	r1, [r3, #4]
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	68db      	ldr	r3, [r3, #12]
 8005b22:	461a      	mov	r2, r3
 8005b24:	f000 f90a 	bl	8005d3c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	2150      	movs	r1, #80	; 0x50
 8005b2e:	4618      	mov	r0, r3
 8005b30:	f000 f963 	bl	8005dfa <TIM_ITRx_SetConfig>
      break;
 8005b34:	e02c      	b.n	8005b90 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6818      	ldr	r0, [r3, #0]
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	6859      	ldr	r1, [r3, #4]
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	68db      	ldr	r3, [r3, #12]
 8005b42:	461a      	mov	r2, r3
 8005b44:	f000 f929 	bl	8005d9a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	2160      	movs	r1, #96	; 0x60
 8005b4e:	4618      	mov	r0, r3
 8005b50:	f000 f953 	bl	8005dfa <TIM_ITRx_SetConfig>
      break;
 8005b54:	e01c      	b.n	8005b90 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6818      	ldr	r0, [r3, #0]
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	6859      	ldr	r1, [r3, #4]
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	68db      	ldr	r3, [r3, #12]
 8005b62:	461a      	mov	r2, r3
 8005b64:	f000 f8ea 	bl	8005d3c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	2140      	movs	r1, #64	; 0x40
 8005b6e:	4618      	mov	r0, r3
 8005b70:	f000 f943 	bl	8005dfa <TIM_ITRx_SetConfig>
      break;
 8005b74:	e00c      	b.n	8005b90 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681a      	ldr	r2, [r3, #0]
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	4619      	mov	r1, r3
 8005b80:	4610      	mov	r0, r2
 8005b82:	f000 f93a 	bl	8005dfa <TIM_ITRx_SetConfig>
      break;
 8005b86:	e003      	b.n	8005b90 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005b88:	2301      	movs	r3, #1
 8005b8a:	73fb      	strb	r3, [r7, #15]
      break;
 8005b8c:	e000      	b.n	8005b90 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005b8e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2201      	movs	r2, #1
 8005b94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005ba0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	3710      	adds	r7, #16
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	bd80      	pop	{r7, pc}

08005baa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005baa:	b480      	push	{r7}
 8005bac:	b083      	sub	sp, #12
 8005bae:	af00      	add	r7, sp, #0
 8005bb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005bb2:	bf00      	nop
 8005bb4:	370c      	adds	r7, #12
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbc:	4770      	bx	lr

08005bbe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005bbe:	b480      	push	{r7}
 8005bc0:	b083      	sub	sp, #12
 8005bc2:	af00      	add	r7, sp, #0
 8005bc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005bc6:	bf00      	nop
 8005bc8:	370c      	adds	r7, #12
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd0:	4770      	bx	lr

08005bd2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005bd2:	b480      	push	{r7}
 8005bd4:	b083      	sub	sp, #12
 8005bd6:	af00      	add	r7, sp, #0
 8005bd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005bda:	bf00      	nop
 8005bdc:	370c      	adds	r7, #12
 8005bde:	46bd      	mov	sp, r7
 8005be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be4:	4770      	bx	lr

08005be6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005be6:	b480      	push	{r7}
 8005be8:	b083      	sub	sp, #12
 8005bea:	af00      	add	r7, sp, #0
 8005bec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005bee:	bf00      	nop
 8005bf0:	370c      	adds	r7, #12
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf8:	4770      	bx	lr
	...

08005bfc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005bfc:	b480      	push	{r7}
 8005bfe:	b085      	sub	sp, #20
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
 8005c04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	4a40      	ldr	r2, [pc, #256]	; (8005d10 <TIM_Base_SetConfig+0x114>)
 8005c10:	4293      	cmp	r3, r2
 8005c12:	d013      	beq.n	8005c3c <TIM_Base_SetConfig+0x40>
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c1a:	d00f      	beq.n	8005c3c <TIM_Base_SetConfig+0x40>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	4a3d      	ldr	r2, [pc, #244]	; (8005d14 <TIM_Base_SetConfig+0x118>)
 8005c20:	4293      	cmp	r3, r2
 8005c22:	d00b      	beq.n	8005c3c <TIM_Base_SetConfig+0x40>
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	4a3c      	ldr	r2, [pc, #240]	; (8005d18 <TIM_Base_SetConfig+0x11c>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d007      	beq.n	8005c3c <TIM_Base_SetConfig+0x40>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	4a3b      	ldr	r2, [pc, #236]	; (8005d1c <TIM_Base_SetConfig+0x120>)
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d003      	beq.n	8005c3c <TIM_Base_SetConfig+0x40>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	4a3a      	ldr	r2, [pc, #232]	; (8005d20 <TIM_Base_SetConfig+0x124>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d108      	bne.n	8005c4e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c42:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	685b      	ldr	r3, [r3, #4]
 8005c48:	68fa      	ldr	r2, [r7, #12]
 8005c4a:	4313      	orrs	r3, r2
 8005c4c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	4a2f      	ldr	r2, [pc, #188]	; (8005d10 <TIM_Base_SetConfig+0x114>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d02b      	beq.n	8005cae <TIM_Base_SetConfig+0xb2>
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c5c:	d027      	beq.n	8005cae <TIM_Base_SetConfig+0xb2>
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	4a2c      	ldr	r2, [pc, #176]	; (8005d14 <TIM_Base_SetConfig+0x118>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d023      	beq.n	8005cae <TIM_Base_SetConfig+0xb2>
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	4a2b      	ldr	r2, [pc, #172]	; (8005d18 <TIM_Base_SetConfig+0x11c>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d01f      	beq.n	8005cae <TIM_Base_SetConfig+0xb2>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	4a2a      	ldr	r2, [pc, #168]	; (8005d1c <TIM_Base_SetConfig+0x120>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d01b      	beq.n	8005cae <TIM_Base_SetConfig+0xb2>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	4a29      	ldr	r2, [pc, #164]	; (8005d20 <TIM_Base_SetConfig+0x124>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d017      	beq.n	8005cae <TIM_Base_SetConfig+0xb2>
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	4a28      	ldr	r2, [pc, #160]	; (8005d24 <TIM_Base_SetConfig+0x128>)
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d013      	beq.n	8005cae <TIM_Base_SetConfig+0xb2>
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	4a27      	ldr	r2, [pc, #156]	; (8005d28 <TIM_Base_SetConfig+0x12c>)
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	d00f      	beq.n	8005cae <TIM_Base_SetConfig+0xb2>
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	4a26      	ldr	r2, [pc, #152]	; (8005d2c <TIM_Base_SetConfig+0x130>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d00b      	beq.n	8005cae <TIM_Base_SetConfig+0xb2>
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	4a25      	ldr	r2, [pc, #148]	; (8005d30 <TIM_Base_SetConfig+0x134>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d007      	beq.n	8005cae <TIM_Base_SetConfig+0xb2>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	4a24      	ldr	r2, [pc, #144]	; (8005d34 <TIM_Base_SetConfig+0x138>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d003      	beq.n	8005cae <TIM_Base_SetConfig+0xb2>
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	4a23      	ldr	r2, [pc, #140]	; (8005d38 <TIM_Base_SetConfig+0x13c>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d108      	bne.n	8005cc0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005cb4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	68db      	ldr	r3, [r3, #12]
 8005cba:	68fa      	ldr	r2, [r7, #12]
 8005cbc:	4313      	orrs	r3, r2
 8005cbe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	695b      	ldr	r3, [r3, #20]
 8005cca:	4313      	orrs	r3, r2
 8005ccc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	68fa      	ldr	r2, [r7, #12]
 8005cd2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	689a      	ldr	r2, [r3, #8]
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	681a      	ldr	r2, [r3, #0]
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	4a0a      	ldr	r2, [pc, #40]	; (8005d10 <TIM_Base_SetConfig+0x114>)
 8005ce8:	4293      	cmp	r3, r2
 8005cea:	d003      	beq.n	8005cf4 <TIM_Base_SetConfig+0xf8>
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	4a0c      	ldr	r2, [pc, #48]	; (8005d20 <TIM_Base_SetConfig+0x124>)
 8005cf0:	4293      	cmp	r3, r2
 8005cf2:	d103      	bne.n	8005cfc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	691a      	ldr	r2, [r3, #16]
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2201      	movs	r2, #1
 8005d00:	615a      	str	r2, [r3, #20]
}
 8005d02:	bf00      	nop
 8005d04:	3714      	adds	r7, #20
 8005d06:	46bd      	mov	sp, r7
 8005d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0c:	4770      	bx	lr
 8005d0e:	bf00      	nop
 8005d10:	40010000 	.word	0x40010000
 8005d14:	40000400 	.word	0x40000400
 8005d18:	40000800 	.word	0x40000800
 8005d1c:	40000c00 	.word	0x40000c00
 8005d20:	40010400 	.word	0x40010400
 8005d24:	40014000 	.word	0x40014000
 8005d28:	40014400 	.word	0x40014400
 8005d2c:	40014800 	.word	0x40014800
 8005d30:	40001800 	.word	0x40001800
 8005d34:	40001c00 	.word	0x40001c00
 8005d38:	40002000 	.word	0x40002000

08005d3c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d3c:	b480      	push	{r7}
 8005d3e:	b087      	sub	sp, #28
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	60f8      	str	r0, [r7, #12]
 8005d44:	60b9      	str	r1, [r7, #8]
 8005d46:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	6a1b      	ldr	r3, [r3, #32]
 8005d4c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	6a1b      	ldr	r3, [r3, #32]
 8005d52:	f023 0201 	bic.w	r2, r3, #1
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	699b      	ldr	r3, [r3, #24]
 8005d5e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005d60:	693b      	ldr	r3, [r7, #16]
 8005d62:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005d66:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	011b      	lsls	r3, r3, #4
 8005d6c:	693a      	ldr	r2, [r7, #16]
 8005d6e:	4313      	orrs	r3, r2
 8005d70:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005d72:	697b      	ldr	r3, [r7, #20]
 8005d74:	f023 030a 	bic.w	r3, r3, #10
 8005d78:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005d7a:	697a      	ldr	r2, [r7, #20]
 8005d7c:	68bb      	ldr	r3, [r7, #8]
 8005d7e:	4313      	orrs	r3, r2
 8005d80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	693a      	ldr	r2, [r7, #16]
 8005d86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	697a      	ldr	r2, [r7, #20]
 8005d8c:	621a      	str	r2, [r3, #32]
}
 8005d8e:	bf00      	nop
 8005d90:	371c      	adds	r7, #28
 8005d92:	46bd      	mov	sp, r7
 8005d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d98:	4770      	bx	lr

08005d9a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d9a:	b480      	push	{r7}
 8005d9c:	b087      	sub	sp, #28
 8005d9e:	af00      	add	r7, sp, #0
 8005da0:	60f8      	str	r0, [r7, #12]
 8005da2:	60b9      	str	r1, [r7, #8]
 8005da4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	6a1b      	ldr	r3, [r3, #32]
 8005daa:	f023 0210 	bic.w	r2, r3, #16
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	699b      	ldr	r3, [r3, #24]
 8005db6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	6a1b      	ldr	r3, [r3, #32]
 8005dbc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005dbe:	697b      	ldr	r3, [r7, #20]
 8005dc0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005dc4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	031b      	lsls	r3, r3, #12
 8005dca:	697a      	ldr	r2, [r7, #20]
 8005dcc:	4313      	orrs	r3, r2
 8005dce:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005dd0:	693b      	ldr	r3, [r7, #16]
 8005dd2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005dd6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005dd8:	68bb      	ldr	r3, [r7, #8]
 8005dda:	011b      	lsls	r3, r3, #4
 8005ddc:	693a      	ldr	r2, [r7, #16]
 8005dde:	4313      	orrs	r3, r2
 8005de0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	697a      	ldr	r2, [r7, #20]
 8005de6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	693a      	ldr	r2, [r7, #16]
 8005dec:	621a      	str	r2, [r3, #32]
}
 8005dee:	bf00      	nop
 8005df0:	371c      	adds	r7, #28
 8005df2:	46bd      	mov	sp, r7
 8005df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df8:	4770      	bx	lr

08005dfa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005dfa:	b480      	push	{r7}
 8005dfc:	b085      	sub	sp, #20
 8005dfe:	af00      	add	r7, sp, #0
 8005e00:	6078      	str	r0, [r7, #4]
 8005e02:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	689b      	ldr	r3, [r3, #8]
 8005e08:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e10:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005e12:	683a      	ldr	r2, [r7, #0]
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	4313      	orrs	r3, r2
 8005e18:	f043 0307 	orr.w	r3, r3, #7
 8005e1c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	68fa      	ldr	r2, [r7, #12]
 8005e22:	609a      	str	r2, [r3, #8]
}
 8005e24:	bf00      	nop
 8005e26:	3714      	adds	r7, #20
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2e:	4770      	bx	lr

08005e30 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005e30:	b480      	push	{r7}
 8005e32:	b087      	sub	sp, #28
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	60f8      	str	r0, [r7, #12]
 8005e38:	60b9      	str	r1, [r7, #8]
 8005e3a:	607a      	str	r2, [r7, #4]
 8005e3c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	689b      	ldr	r3, [r3, #8]
 8005e42:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e44:	697b      	ldr	r3, [r7, #20]
 8005e46:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005e4a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	021a      	lsls	r2, r3, #8
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	431a      	orrs	r2, r3
 8005e54:	68bb      	ldr	r3, [r7, #8]
 8005e56:	4313      	orrs	r3, r2
 8005e58:	697a      	ldr	r2, [r7, #20]
 8005e5a:	4313      	orrs	r3, r2
 8005e5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	697a      	ldr	r2, [r7, #20]
 8005e62:	609a      	str	r2, [r3, #8]
}
 8005e64:	bf00      	nop
 8005e66:	371c      	adds	r7, #28
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6e:	4770      	bx	lr

08005e70 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005e70:	b480      	push	{r7}
 8005e72:	b085      	sub	sp, #20
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
 8005e78:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e80:	2b01      	cmp	r3, #1
 8005e82:	d101      	bne.n	8005e88 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005e84:	2302      	movs	r3, #2
 8005e86:	e05a      	b.n	8005f3e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2201      	movs	r2, #1
 8005e8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2202      	movs	r2, #2
 8005e94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	685b      	ldr	r3, [r3, #4]
 8005e9e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	689b      	ldr	r3, [r3, #8]
 8005ea6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005eae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	68fa      	ldr	r2, [r7, #12]
 8005eb6:	4313      	orrs	r3, r2
 8005eb8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	68fa      	ldr	r2, [r7, #12]
 8005ec0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	4a21      	ldr	r2, [pc, #132]	; (8005f4c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d022      	beq.n	8005f12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ed4:	d01d      	beq.n	8005f12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	4a1d      	ldr	r2, [pc, #116]	; (8005f50 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005edc:	4293      	cmp	r3, r2
 8005ede:	d018      	beq.n	8005f12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	4a1b      	ldr	r2, [pc, #108]	; (8005f54 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d013      	beq.n	8005f12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	4a1a      	ldr	r2, [pc, #104]	; (8005f58 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005ef0:	4293      	cmp	r3, r2
 8005ef2:	d00e      	beq.n	8005f12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	4a18      	ldr	r2, [pc, #96]	; (8005f5c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d009      	beq.n	8005f12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	4a17      	ldr	r2, [pc, #92]	; (8005f60 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005f04:	4293      	cmp	r3, r2
 8005f06:	d004      	beq.n	8005f12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	4a15      	ldr	r2, [pc, #84]	; (8005f64 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	d10c      	bne.n	8005f2c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005f12:	68bb      	ldr	r3, [r7, #8]
 8005f14:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f18:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	685b      	ldr	r3, [r3, #4]
 8005f1e:	68ba      	ldr	r2, [r7, #8]
 8005f20:	4313      	orrs	r3, r2
 8005f22:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	68ba      	ldr	r2, [r7, #8]
 8005f2a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2201      	movs	r2, #1
 8005f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2200      	movs	r2, #0
 8005f38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005f3c:	2300      	movs	r3, #0
}
 8005f3e:	4618      	mov	r0, r3
 8005f40:	3714      	adds	r7, #20
 8005f42:	46bd      	mov	sp, r7
 8005f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f48:	4770      	bx	lr
 8005f4a:	bf00      	nop
 8005f4c:	40010000 	.word	0x40010000
 8005f50:	40000400 	.word	0x40000400
 8005f54:	40000800 	.word	0x40000800
 8005f58:	40000c00 	.word	0x40000c00
 8005f5c:	40010400 	.word	0x40010400
 8005f60:	40014000 	.word	0x40014000
 8005f64:	40001800 	.word	0x40001800

08005f68 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005f68:	b480      	push	{r7}
 8005f6a:	b083      	sub	sp, #12
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005f70:	bf00      	nop
 8005f72:	370c      	adds	r7, #12
 8005f74:	46bd      	mov	sp, r7
 8005f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7a:	4770      	bx	lr

08005f7c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005f7c:	b480      	push	{r7}
 8005f7e:	b083      	sub	sp, #12
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005f84:	bf00      	nop
 8005f86:	370c      	adds	r7, #12
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8e:	4770      	bx	lr

08005f90 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005f90:	b580      	push	{r7, lr}
 8005f92:	b082      	sub	sp, #8
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d101      	bne.n	8005fa2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005f9e:	2301      	movs	r3, #1
 8005fa0:	e03f      	b.n	8006022 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fa8:	b2db      	uxtb	r3, r3
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d106      	bne.n	8005fbc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005fb6:	6878      	ldr	r0, [r7, #4]
 8005fb8:	f7fc fb4e 	bl	8002658 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2224      	movs	r2, #36	; 0x24
 8005fc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	68da      	ldr	r2, [r3, #12]
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005fd2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005fd4:	6878      	ldr	r0, [r7, #4]
 8005fd6:	f000 fddb 	bl	8006b90 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	691a      	ldr	r2, [r3, #16]
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005fe8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	695a      	ldr	r2, [r3, #20]
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005ff8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	68da      	ldr	r2, [r3, #12]
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006008:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	2200      	movs	r2, #0
 800600e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2220      	movs	r2, #32
 8006014:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2220      	movs	r2, #32
 800601c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006020:	2300      	movs	r3, #0
}
 8006022:	4618      	mov	r0, r3
 8006024:	3708      	adds	r7, #8
 8006026:	46bd      	mov	sp, r7
 8006028:	bd80      	pop	{r7, pc}

0800602a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800602a:	b580      	push	{r7, lr}
 800602c:	b08a      	sub	sp, #40	; 0x28
 800602e:	af02      	add	r7, sp, #8
 8006030:	60f8      	str	r0, [r7, #12]
 8006032:	60b9      	str	r1, [r7, #8]
 8006034:	603b      	str	r3, [r7, #0]
 8006036:	4613      	mov	r3, r2
 8006038:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800603a:	2300      	movs	r3, #0
 800603c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006044:	b2db      	uxtb	r3, r3
 8006046:	2b20      	cmp	r3, #32
 8006048:	d17c      	bne.n	8006144 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800604a:	68bb      	ldr	r3, [r7, #8]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d002      	beq.n	8006056 <HAL_UART_Transmit+0x2c>
 8006050:	88fb      	ldrh	r3, [r7, #6]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d101      	bne.n	800605a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006056:	2301      	movs	r3, #1
 8006058:	e075      	b.n	8006146 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006060:	2b01      	cmp	r3, #1
 8006062:	d101      	bne.n	8006068 <HAL_UART_Transmit+0x3e>
 8006064:	2302      	movs	r3, #2
 8006066:	e06e      	b.n	8006146 <HAL_UART_Transmit+0x11c>
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	2201      	movs	r2, #1
 800606c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	2200      	movs	r2, #0
 8006074:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	2221      	movs	r2, #33	; 0x21
 800607a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800607e:	f7fc fc09 	bl	8002894 <HAL_GetTick>
 8006082:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	88fa      	ldrh	r2, [r7, #6]
 8006088:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	88fa      	ldrh	r2, [r7, #6]
 800608e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	689b      	ldr	r3, [r3, #8]
 8006094:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006098:	d108      	bne.n	80060ac <HAL_UART_Transmit+0x82>
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	691b      	ldr	r3, [r3, #16]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d104      	bne.n	80060ac <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80060a2:	2300      	movs	r3, #0
 80060a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80060a6:	68bb      	ldr	r3, [r7, #8]
 80060a8:	61bb      	str	r3, [r7, #24]
 80060aa:	e003      	b.n	80060b4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80060ac:	68bb      	ldr	r3, [r7, #8]
 80060ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80060b0:	2300      	movs	r3, #0
 80060b2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	2200      	movs	r2, #0
 80060b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80060bc:	e02a      	b.n	8006114 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	9300      	str	r3, [sp, #0]
 80060c2:	697b      	ldr	r3, [r7, #20]
 80060c4:	2200      	movs	r2, #0
 80060c6:	2180      	movs	r1, #128	; 0x80
 80060c8:	68f8      	ldr	r0, [r7, #12]
 80060ca:	f000 fb1f 	bl	800670c <UART_WaitOnFlagUntilTimeout>
 80060ce:	4603      	mov	r3, r0
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d001      	beq.n	80060d8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80060d4:	2303      	movs	r3, #3
 80060d6:	e036      	b.n	8006146 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80060d8:	69fb      	ldr	r3, [r7, #28]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d10b      	bne.n	80060f6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80060de:	69bb      	ldr	r3, [r7, #24]
 80060e0:	881b      	ldrh	r3, [r3, #0]
 80060e2:	461a      	mov	r2, r3
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80060ec:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80060ee:	69bb      	ldr	r3, [r7, #24]
 80060f0:	3302      	adds	r3, #2
 80060f2:	61bb      	str	r3, [r7, #24]
 80060f4:	e007      	b.n	8006106 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80060f6:	69fb      	ldr	r3, [r7, #28]
 80060f8:	781a      	ldrb	r2, [r3, #0]
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006100:	69fb      	ldr	r3, [r7, #28]
 8006102:	3301      	adds	r3, #1
 8006104:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800610a:	b29b      	uxth	r3, r3
 800610c:	3b01      	subs	r3, #1
 800610e:	b29a      	uxth	r2, r3
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006118:	b29b      	uxth	r3, r3
 800611a:	2b00      	cmp	r3, #0
 800611c:	d1cf      	bne.n	80060be <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	9300      	str	r3, [sp, #0]
 8006122:	697b      	ldr	r3, [r7, #20]
 8006124:	2200      	movs	r2, #0
 8006126:	2140      	movs	r1, #64	; 0x40
 8006128:	68f8      	ldr	r0, [r7, #12]
 800612a:	f000 faef 	bl	800670c <UART_WaitOnFlagUntilTimeout>
 800612e:	4603      	mov	r3, r0
 8006130:	2b00      	cmp	r3, #0
 8006132:	d001      	beq.n	8006138 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006134:	2303      	movs	r3, #3
 8006136:	e006      	b.n	8006146 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	2220      	movs	r2, #32
 800613c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006140:	2300      	movs	r3, #0
 8006142:	e000      	b.n	8006146 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006144:	2302      	movs	r3, #2
  }
}
 8006146:	4618      	mov	r0, r3
 8006148:	3720      	adds	r7, #32
 800614a:	46bd      	mov	sp, r7
 800614c:	bd80      	pop	{r7, pc}

0800614e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800614e:	b580      	push	{r7, lr}
 8006150:	b084      	sub	sp, #16
 8006152:	af00      	add	r7, sp, #0
 8006154:	60f8      	str	r0, [r7, #12]
 8006156:	60b9      	str	r1, [r7, #8]
 8006158:	4613      	mov	r3, r2
 800615a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006162:	b2db      	uxtb	r3, r3
 8006164:	2b20      	cmp	r3, #32
 8006166:	d11d      	bne.n	80061a4 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8006168:	68bb      	ldr	r3, [r7, #8]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d002      	beq.n	8006174 <HAL_UART_Receive_IT+0x26>
 800616e:	88fb      	ldrh	r3, [r7, #6]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d101      	bne.n	8006178 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006174:	2301      	movs	r3, #1
 8006176:	e016      	b.n	80061a6 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800617e:	2b01      	cmp	r3, #1
 8006180:	d101      	bne.n	8006186 <HAL_UART_Receive_IT+0x38>
 8006182:	2302      	movs	r3, #2
 8006184:	e00f      	b.n	80061a6 <HAL_UART_Receive_IT+0x58>
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	2201      	movs	r2, #1
 800618a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	2200      	movs	r2, #0
 8006192:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006194:	88fb      	ldrh	r3, [r7, #6]
 8006196:	461a      	mov	r2, r3
 8006198:	68b9      	ldr	r1, [r7, #8]
 800619a:	68f8      	ldr	r0, [r7, #12]
 800619c:	f000 fb24 	bl	80067e8 <UART_Start_Receive_IT>
 80061a0:	4603      	mov	r3, r0
 80061a2:	e000      	b.n	80061a6 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80061a4:	2302      	movs	r3, #2
  }
}
 80061a6:	4618      	mov	r0, r3
 80061a8:	3710      	adds	r7, #16
 80061aa:	46bd      	mov	sp, r7
 80061ac:	bd80      	pop	{r7, pc}
	...

080061b0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b0ba      	sub	sp, #232	; 0xe8
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	68db      	ldr	r3, [r3, #12]
 80061c8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	695b      	ldr	r3, [r3, #20]
 80061d2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80061d6:	2300      	movs	r3, #0
 80061d8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80061dc:	2300      	movs	r3, #0
 80061de:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80061e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061e6:	f003 030f 	and.w	r3, r3, #15
 80061ea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80061ee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d10f      	bne.n	8006216 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80061f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061fa:	f003 0320 	and.w	r3, r3, #32
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d009      	beq.n	8006216 <HAL_UART_IRQHandler+0x66>
 8006202:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006206:	f003 0320 	and.w	r3, r3, #32
 800620a:	2b00      	cmp	r3, #0
 800620c:	d003      	beq.n	8006216 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800620e:	6878      	ldr	r0, [r7, #4]
 8006210:	f000 fc03 	bl	8006a1a <UART_Receive_IT>
      return;
 8006214:	e256      	b.n	80066c4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006216:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800621a:	2b00      	cmp	r3, #0
 800621c:	f000 80de 	beq.w	80063dc <HAL_UART_IRQHandler+0x22c>
 8006220:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006224:	f003 0301 	and.w	r3, r3, #1
 8006228:	2b00      	cmp	r3, #0
 800622a:	d106      	bne.n	800623a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800622c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006230:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006234:	2b00      	cmp	r3, #0
 8006236:	f000 80d1 	beq.w	80063dc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800623a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800623e:	f003 0301 	and.w	r3, r3, #1
 8006242:	2b00      	cmp	r3, #0
 8006244:	d00b      	beq.n	800625e <HAL_UART_IRQHandler+0xae>
 8006246:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800624a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800624e:	2b00      	cmp	r3, #0
 8006250:	d005      	beq.n	800625e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006256:	f043 0201 	orr.w	r2, r3, #1
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800625e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006262:	f003 0304 	and.w	r3, r3, #4
 8006266:	2b00      	cmp	r3, #0
 8006268:	d00b      	beq.n	8006282 <HAL_UART_IRQHandler+0xd2>
 800626a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800626e:	f003 0301 	and.w	r3, r3, #1
 8006272:	2b00      	cmp	r3, #0
 8006274:	d005      	beq.n	8006282 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800627a:	f043 0202 	orr.w	r2, r3, #2
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006282:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006286:	f003 0302 	and.w	r3, r3, #2
 800628a:	2b00      	cmp	r3, #0
 800628c:	d00b      	beq.n	80062a6 <HAL_UART_IRQHandler+0xf6>
 800628e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006292:	f003 0301 	and.w	r3, r3, #1
 8006296:	2b00      	cmp	r3, #0
 8006298:	d005      	beq.n	80062a6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800629e:	f043 0204 	orr.w	r2, r3, #4
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80062a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062aa:	f003 0308 	and.w	r3, r3, #8
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d011      	beq.n	80062d6 <HAL_UART_IRQHandler+0x126>
 80062b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062b6:	f003 0320 	and.w	r3, r3, #32
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d105      	bne.n	80062ca <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80062be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80062c2:	f003 0301 	and.w	r3, r3, #1
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d005      	beq.n	80062d6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062ce:	f043 0208 	orr.w	r2, r3, #8
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062da:	2b00      	cmp	r3, #0
 80062dc:	f000 81ed 	beq.w	80066ba <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80062e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062e4:	f003 0320 	and.w	r3, r3, #32
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d008      	beq.n	80062fe <HAL_UART_IRQHandler+0x14e>
 80062ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062f0:	f003 0320 	and.w	r3, r3, #32
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d002      	beq.n	80062fe <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80062f8:	6878      	ldr	r0, [r7, #4]
 80062fa:	f000 fb8e 	bl	8006a1a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	695b      	ldr	r3, [r3, #20]
 8006304:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006308:	2b40      	cmp	r3, #64	; 0x40
 800630a:	bf0c      	ite	eq
 800630c:	2301      	moveq	r3, #1
 800630e:	2300      	movne	r3, #0
 8006310:	b2db      	uxtb	r3, r3
 8006312:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800631a:	f003 0308 	and.w	r3, r3, #8
 800631e:	2b00      	cmp	r3, #0
 8006320:	d103      	bne.n	800632a <HAL_UART_IRQHandler+0x17a>
 8006322:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006326:	2b00      	cmp	r3, #0
 8006328:	d04f      	beq.n	80063ca <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800632a:	6878      	ldr	r0, [r7, #4]
 800632c:	f000 fa96 	bl	800685c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	695b      	ldr	r3, [r3, #20]
 8006336:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800633a:	2b40      	cmp	r3, #64	; 0x40
 800633c:	d141      	bne.n	80063c2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	3314      	adds	r3, #20
 8006344:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006348:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800634c:	e853 3f00 	ldrex	r3, [r3]
 8006350:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006354:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006358:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800635c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	3314      	adds	r3, #20
 8006366:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800636a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800636e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006372:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006376:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800637a:	e841 2300 	strex	r3, r2, [r1]
 800637e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006382:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006386:	2b00      	cmp	r3, #0
 8006388:	d1d9      	bne.n	800633e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800638e:	2b00      	cmp	r3, #0
 8006390:	d013      	beq.n	80063ba <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006396:	4a7d      	ldr	r2, [pc, #500]	; (800658c <HAL_UART_IRQHandler+0x3dc>)
 8006398:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800639e:	4618      	mov	r0, r3
 80063a0:	f7fc fc29 	bl	8002bf6 <HAL_DMA_Abort_IT>
 80063a4:	4603      	mov	r3, r0
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d016      	beq.n	80063d8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063b0:	687a      	ldr	r2, [r7, #4]
 80063b2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80063b4:	4610      	mov	r0, r2
 80063b6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063b8:	e00e      	b.n	80063d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80063ba:	6878      	ldr	r0, [r7, #4]
 80063bc:	f000 f990 	bl	80066e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063c0:	e00a      	b.n	80063d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80063c2:	6878      	ldr	r0, [r7, #4]
 80063c4:	f000 f98c 	bl	80066e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063c8:	e006      	b.n	80063d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80063ca:	6878      	ldr	r0, [r7, #4]
 80063cc:	f000 f988 	bl	80066e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2200      	movs	r2, #0
 80063d4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80063d6:	e170      	b.n	80066ba <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063d8:	bf00      	nop
    return;
 80063da:	e16e      	b.n	80066ba <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063e0:	2b01      	cmp	r3, #1
 80063e2:	f040 814a 	bne.w	800667a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80063e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063ea:	f003 0310 	and.w	r3, r3, #16
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	f000 8143 	beq.w	800667a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80063f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063f8:	f003 0310 	and.w	r3, r3, #16
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	f000 813c 	beq.w	800667a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006402:	2300      	movs	r3, #0
 8006404:	60bb      	str	r3, [r7, #8]
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	60bb      	str	r3, [r7, #8]
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	685b      	ldr	r3, [r3, #4]
 8006414:	60bb      	str	r3, [r7, #8]
 8006416:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	695b      	ldr	r3, [r3, #20]
 800641e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006422:	2b40      	cmp	r3, #64	; 0x40
 8006424:	f040 80b4 	bne.w	8006590 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	685b      	ldr	r3, [r3, #4]
 8006430:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006434:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006438:	2b00      	cmp	r3, #0
 800643a:	f000 8140 	beq.w	80066be <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006442:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006446:	429a      	cmp	r2, r3
 8006448:	f080 8139 	bcs.w	80066be <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006452:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006458:	69db      	ldr	r3, [r3, #28]
 800645a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800645e:	f000 8088 	beq.w	8006572 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	330c      	adds	r3, #12
 8006468:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800646c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006470:	e853 3f00 	ldrex	r3, [r3]
 8006474:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006478:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800647c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006480:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	330c      	adds	r3, #12
 800648a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800648e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006492:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006496:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800649a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800649e:	e841 2300 	strex	r3, r2, [r1]
 80064a2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80064a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d1d9      	bne.n	8006462 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	3314      	adds	r3, #20
 80064b4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80064b8:	e853 3f00 	ldrex	r3, [r3]
 80064bc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80064be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80064c0:	f023 0301 	bic.w	r3, r3, #1
 80064c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	3314      	adds	r3, #20
 80064ce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80064d2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80064d6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064d8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80064da:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80064de:	e841 2300 	strex	r3, r2, [r1]
 80064e2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80064e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d1e1      	bne.n	80064ae <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	3314      	adds	r3, #20
 80064f0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80064f4:	e853 3f00 	ldrex	r3, [r3]
 80064f8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80064fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80064fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006500:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	3314      	adds	r3, #20
 800650a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800650e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006510:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006512:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006514:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006516:	e841 2300 	strex	r3, r2, [r1]
 800651a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800651c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800651e:	2b00      	cmp	r3, #0
 8006520:	d1e3      	bne.n	80064ea <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	2220      	movs	r2, #32
 8006526:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	2200      	movs	r2, #0
 800652e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	330c      	adds	r3, #12
 8006536:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006538:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800653a:	e853 3f00 	ldrex	r3, [r3]
 800653e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006540:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006542:	f023 0310 	bic.w	r3, r3, #16
 8006546:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	330c      	adds	r3, #12
 8006550:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006554:	65ba      	str	r2, [r7, #88]	; 0x58
 8006556:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006558:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800655a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800655c:	e841 2300 	strex	r3, r2, [r1]
 8006560:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006562:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006564:	2b00      	cmp	r3, #0
 8006566:	d1e3      	bne.n	8006530 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800656c:	4618      	mov	r0, r3
 800656e:	f7fc fad2 	bl	8002b16 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800657a:	b29b      	uxth	r3, r3
 800657c:	1ad3      	subs	r3, r2, r3
 800657e:	b29b      	uxth	r3, r3
 8006580:	4619      	mov	r1, r3
 8006582:	6878      	ldr	r0, [r7, #4]
 8006584:	f000 f8b6 	bl	80066f4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006588:	e099      	b.n	80066be <HAL_UART_IRQHandler+0x50e>
 800658a:	bf00      	nop
 800658c:	08006923 	.word	0x08006923
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006598:	b29b      	uxth	r3, r3
 800659a:	1ad3      	subs	r3, r2, r3
 800659c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80065a4:	b29b      	uxth	r3, r3
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	f000 808b 	beq.w	80066c2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80065ac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	f000 8086 	beq.w	80066c2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	330c      	adds	r3, #12
 80065bc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065c0:	e853 3f00 	ldrex	r3, [r3]
 80065c4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80065c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065c8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80065cc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	330c      	adds	r3, #12
 80065d6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80065da:	647a      	str	r2, [r7, #68]	; 0x44
 80065dc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065de:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80065e0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80065e2:	e841 2300 	strex	r3, r2, [r1]
 80065e6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80065e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d1e3      	bne.n	80065b6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	3314      	adds	r3, #20
 80065f4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065f8:	e853 3f00 	ldrex	r3, [r3]
 80065fc:	623b      	str	r3, [r7, #32]
   return(result);
 80065fe:	6a3b      	ldr	r3, [r7, #32]
 8006600:	f023 0301 	bic.w	r3, r3, #1
 8006604:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	3314      	adds	r3, #20
 800660e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006612:	633a      	str	r2, [r7, #48]	; 0x30
 8006614:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006616:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006618:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800661a:	e841 2300 	strex	r3, r2, [r1]
 800661e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006622:	2b00      	cmp	r3, #0
 8006624:	d1e3      	bne.n	80065ee <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	2220      	movs	r2, #32
 800662a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	2200      	movs	r2, #0
 8006632:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	330c      	adds	r3, #12
 800663a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800663c:	693b      	ldr	r3, [r7, #16]
 800663e:	e853 3f00 	ldrex	r3, [r3]
 8006642:	60fb      	str	r3, [r7, #12]
   return(result);
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	f023 0310 	bic.w	r3, r3, #16
 800664a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	330c      	adds	r3, #12
 8006654:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006658:	61fa      	str	r2, [r7, #28]
 800665a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800665c:	69b9      	ldr	r1, [r7, #24]
 800665e:	69fa      	ldr	r2, [r7, #28]
 8006660:	e841 2300 	strex	r3, r2, [r1]
 8006664:	617b      	str	r3, [r7, #20]
   return(result);
 8006666:	697b      	ldr	r3, [r7, #20]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d1e3      	bne.n	8006634 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800666c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006670:	4619      	mov	r1, r3
 8006672:	6878      	ldr	r0, [r7, #4]
 8006674:	f000 f83e 	bl	80066f4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006678:	e023      	b.n	80066c2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800667a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800667e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006682:	2b00      	cmp	r3, #0
 8006684:	d009      	beq.n	800669a <HAL_UART_IRQHandler+0x4ea>
 8006686:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800668a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800668e:	2b00      	cmp	r3, #0
 8006690:	d003      	beq.n	800669a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006692:	6878      	ldr	r0, [r7, #4]
 8006694:	f000 f959 	bl	800694a <UART_Transmit_IT>
    return;
 8006698:	e014      	b.n	80066c4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800669a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800669e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d00e      	beq.n	80066c4 <HAL_UART_IRQHandler+0x514>
 80066a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d008      	beq.n	80066c4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80066b2:	6878      	ldr	r0, [r7, #4]
 80066b4:	f000 f999 	bl	80069ea <UART_EndTransmit_IT>
    return;
 80066b8:	e004      	b.n	80066c4 <HAL_UART_IRQHandler+0x514>
    return;
 80066ba:	bf00      	nop
 80066bc:	e002      	b.n	80066c4 <HAL_UART_IRQHandler+0x514>
      return;
 80066be:	bf00      	nop
 80066c0:	e000      	b.n	80066c4 <HAL_UART_IRQHandler+0x514>
      return;
 80066c2:	bf00      	nop
  }
}
 80066c4:	37e8      	adds	r7, #232	; 0xe8
 80066c6:	46bd      	mov	sp, r7
 80066c8:	bd80      	pop	{r7, pc}
 80066ca:	bf00      	nop

080066cc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80066cc:	b480      	push	{r7}
 80066ce:	b083      	sub	sp, #12
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80066d4:	bf00      	nop
 80066d6:	370c      	adds	r7, #12
 80066d8:	46bd      	mov	sp, r7
 80066da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066de:	4770      	bx	lr

080066e0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80066e0:	b480      	push	{r7}
 80066e2:	b083      	sub	sp, #12
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80066e8:	bf00      	nop
 80066ea:	370c      	adds	r7, #12
 80066ec:	46bd      	mov	sp, r7
 80066ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f2:	4770      	bx	lr

080066f4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80066f4:	b480      	push	{r7}
 80066f6:	b083      	sub	sp, #12
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
 80066fc:	460b      	mov	r3, r1
 80066fe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006700:	bf00      	nop
 8006702:	370c      	adds	r7, #12
 8006704:	46bd      	mov	sp, r7
 8006706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670a:	4770      	bx	lr

0800670c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800670c:	b580      	push	{r7, lr}
 800670e:	b090      	sub	sp, #64	; 0x40
 8006710:	af00      	add	r7, sp, #0
 8006712:	60f8      	str	r0, [r7, #12]
 8006714:	60b9      	str	r1, [r7, #8]
 8006716:	603b      	str	r3, [r7, #0]
 8006718:	4613      	mov	r3, r2
 800671a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800671c:	e050      	b.n	80067c0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800671e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006720:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006724:	d04c      	beq.n	80067c0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006726:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006728:	2b00      	cmp	r3, #0
 800672a:	d007      	beq.n	800673c <UART_WaitOnFlagUntilTimeout+0x30>
 800672c:	f7fc f8b2 	bl	8002894 <HAL_GetTick>
 8006730:	4602      	mov	r2, r0
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	1ad3      	subs	r3, r2, r3
 8006736:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006738:	429a      	cmp	r2, r3
 800673a:	d241      	bcs.n	80067c0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	330c      	adds	r3, #12
 8006742:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006746:	e853 3f00 	ldrex	r3, [r3]
 800674a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800674c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800674e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006752:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	330c      	adds	r3, #12
 800675a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800675c:	637a      	str	r2, [r7, #52]	; 0x34
 800675e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006760:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006762:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006764:	e841 2300 	strex	r3, r2, [r1]
 8006768:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800676a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800676c:	2b00      	cmp	r3, #0
 800676e:	d1e5      	bne.n	800673c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	3314      	adds	r3, #20
 8006776:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006778:	697b      	ldr	r3, [r7, #20]
 800677a:	e853 3f00 	ldrex	r3, [r3]
 800677e:	613b      	str	r3, [r7, #16]
   return(result);
 8006780:	693b      	ldr	r3, [r7, #16]
 8006782:	f023 0301 	bic.w	r3, r3, #1
 8006786:	63bb      	str	r3, [r7, #56]	; 0x38
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	3314      	adds	r3, #20
 800678e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006790:	623a      	str	r2, [r7, #32]
 8006792:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006794:	69f9      	ldr	r1, [r7, #28]
 8006796:	6a3a      	ldr	r2, [r7, #32]
 8006798:	e841 2300 	strex	r3, r2, [r1]
 800679c:	61bb      	str	r3, [r7, #24]
   return(result);
 800679e:	69bb      	ldr	r3, [r7, #24]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d1e5      	bne.n	8006770 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	2220      	movs	r2, #32
 80067a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	2220      	movs	r2, #32
 80067b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	2200      	movs	r2, #0
 80067b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80067bc:	2303      	movs	r3, #3
 80067be:	e00f      	b.n	80067e0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	681a      	ldr	r2, [r3, #0]
 80067c6:	68bb      	ldr	r3, [r7, #8]
 80067c8:	4013      	ands	r3, r2
 80067ca:	68ba      	ldr	r2, [r7, #8]
 80067cc:	429a      	cmp	r2, r3
 80067ce:	bf0c      	ite	eq
 80067d0:	2301      	moveq	r3, #1
 80067d2:	2300      	movne	r3, #0
 80067d4:	b2db      	uxtb	r3, r3
 80067d6:	461a      	mov	r2, r3
 80067d8:	79fb      	ldrb	r3, [r7, #7]
 80067da:	429a      	cmp	r2, r3
 80067dc:	d09f      	beq.n	800671e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80067de:	2300      	movs	r3, #0
}
 80067e0:	4618      	mov	r0, r3
 80067e2:	3740      	adds	r7, #64	; 0x40
 80067e4:	46bd      	mov	sp, r7
 80067e6:	bd80      	pop	{r7, pc}

080067e8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80067e8:	b480      	push	{r7}
 80067ea:	b085      	sub	sp, #20
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	60f8      	str	r0, [r7, #12]
 80067f0:	60b9      	str	r1, [r7, #8]
 80067f2:	4613      	mov	r3, r2
 80067f4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	68ba      	ldr	r2, [r7, #8]
 80067fa:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	88fa      	ldrh	r2, [r7, #6]
 8006800:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	88fa      	ldrh	r2, [r7, #6]
 8006806:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	2200      	movs	r2, #0
 800680c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	2222      	movs	r2, #34	; 0x22
 8006812:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	2200      	movs	r2, #0
 800681a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	68da      	ldr	r2, [r3, #12]
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800682c:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	695a      	ldr	r2, [r3, #20]
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f042 0201 	orr.w	r2, r2, #1
 800683c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	68da      	ldr	r2, [r3, #12]
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f042 0220 	orr.w	r2, r2, #32
 800684c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800684e:	2300      	movs	r3, #0
}
 8006850:	4618      	mov	r0, r3
 8006852:	3714      	adds	r7, #20
 8006854:	46bd      	mov	sp, r7
 8006856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685a:	4770      	bx	lr

0800685c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800685c:	b480      	push	{r7}
 800685e:	b095      	sub	sp, #84	; 0x54
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	330c      	adds	r3, #12
 800686a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800686c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800686e:	e853 3f00 	ldrex	r3, [r3]
 8006872:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006876:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800687a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	330c      	adds	r3, #12
 8006882:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006884:	643a      	str	r2, [r7, #64]	; 0x40
 8006886:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006888:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800688a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800688c:	e841 2300 	strex	r3, r2, [r1]
 8006890:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006892:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006894:	2b00      	cmp	r3, #0
 8006896:	d1e5      	bne.n	8006864 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	3314      	adds	r3, #20
 800689e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068a0:	6a3b      	ldr	r3, [r7, #32]
 80068a2:	e853 3f00 	ldrex	r3, [r3]
 80068a6:	61fb      	str	r3, [r7, #28]
   return(result);
 80068a8:	69fb      	ldr	r3, [r7, #28]
 80068aa:	f023 0301 	bic.w	r3, r3, #1
 80068ae:	64bb      	str	r3, [r7, #72]	; 0x48
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	3314      	adds	r3, #20
 80068b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80068b8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80068ba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80068be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80068c0:	e841 2300 	strex	r3, r2, [r1]
 80068c4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80068c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d1e5      	bne.n	8006898 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068d0:	2b01      	cmp	r3, #1
 80068d2:	d119      	bne.n	8006908 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	330c      	adds	r3, #12
 80068da:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	e853 3f00 	ldrex	r3, [r3]
 80068e2:	60bb      	str	r3, [r7, #8]
   return(result);
 80068e4:	68bb      	ldr	r3, [r7, #8]
 80068e6:	f023 0310 	bic.w	r3, r3, #16
 80068ea:	647b      	str	r3, [r7, #68]	; 0x44
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	330c      	adds	r3, #12
 80068f2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80068f4:	61ba      	str	r2, [r7, #24]
 80068f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068f8:	6979      	ldr	r1, [r7, #20]
 80068fa:	69ba      	ldr	r2, [r7, #24]
 80068fc:	e841 2300 	strex	r3, r2, [r1]
 8006900:	613b      	str	r3, [r7, #16]
   return(result);
 8006902:	693b      	ldr	r3, [r7, #16]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d1e5      	bne.n	80068d4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2220      	movs	r2, #32
 800690c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2200      	movs	r2, #0
 8006914:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006916:	bf00      	nop
 8006918:	3754      	adds	r7, #84	; 0x54
 800691a:	46bd      	mov	sp, r7
 800691c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006920:	4770      	bx	lr

08006922 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006922:	b580      	push	{r7, lr}
 8006924:	b084      	sub	sp, #16
 8006926:	af00      	add	r7, sp, #0
 8006928:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800692e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	2200      	movs	r2, #0
 8006934:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	2200      	movs	r2, #0
 800693a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800693c:	68f8      	ldr	r0, [r7, #12]
 800693e:	f7ff fecf 	bl	80066e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006942:	bf00      	nop
 8006944:	3710      	adds	r7, #16
 8006946:	46bd      	mov	sp, r7
 8006948:	bd80      	pop	{r7, pc}

0800694a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800694a:	b480      	push	{r7}
 800694c:	b085      	sub	sp, #20
 800694e:	af00      	add	r7, sp, #0
 8006950:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006958:	b2db      	uxtb	r3, r3
 800695a:	2b21      	cmp	r3, #33	; 0x21
 800695c:	d13e      	bne.n	80069dc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	689b      	ldr	r3, [r3, #8]
 8006962:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006966:	d114      	bne.n	8006992 <UART_Transmit_IT+0x48>
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	691b      	ldr	r3, [r3, #16]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d110      	bne.n	8006992 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	6a1b      	ldr	r3, [r3, #32]
 8006974:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	881b      	ldrh	r3, [r3, #0]
 800697a:	461a      	mov	r2, r3
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006984:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	6a1b      	ldr	r3, [r3, #32]
 800698a:	1c9a      	adds	r2, r3, #2
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	621a      	str	r2, [r3, #32]
 8006990:	e008      	b.n	80069a4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6a1b      	ldr	r3, [r3, #32]
 8006996:	1c59      	adds	r1, r3, #1
 8006998:	687a      	ldr	r2, [r7, #4]
 800699a:	6211      	str	r1, [r2, #32]
 800699c:	781a      	ldrb	r2, [r3, #0]
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80069a8:	b29b      	uxth	r3, r3
 80069aa:	3b01      	subs	r3, #1
 80069ac:	b29b      	uxth	r3, r3
 80069ae:	687a      	ldr	r2, [r7, #4]
 80069b0:	4619      	mov	r1, r3
 80069b2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d10f      	bne.n	80069d8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	68da      	ldr	r2, [r3, #12]
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80069c6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	68da      	ldr	r2, [r3, #12]
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80069d6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80069d8:	2300      	movs	r3, #0
 80069da:	e000      	b.n	80069de <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80069dc:	2302      	movs	r3, #2
  }
}
 80069de:	4618      	mov	r0, r3
 80069e0:	3714      	adds	r7, #20
 80069e2:	46bd      	mov	sp, r7
 80069e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e8:	4770      	bx	lr

080069ea <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80069ea:	b580      	push	{r7, lr}
 80069ec:	b082      	sub	sp, #8
 80069ee:	af00      	add	r7, sp, #0
 80069f0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	68da      	ldr	r2, [r3, #12]
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a00:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	2220      	movs	r2, #32
 8006a06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006a0a:	6878      	ldr	r0, [r7, #4]
 8006a0c:	f7ff fe5e 	bl	80066cc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006a10:	2300      	movs	r3, #0
}
 8006a12:	4618      	mov	r0, r3
 8006a14:	3708      	adds	r7, #8
 8006a16:	46bd      	mov	sp, r7
 8006a18:	bd80      	pop	{r7, pc}

08006a1a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006a1a:	b580      	push	{r7, lr}
 8006a1c:	b08c      	sub	sp, #48	; 0x30
 8006a1e:	af00      	add	r7, sp, #0
 8006a20:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006a28:	b2db      	uxtb	r3, r3
 8006a2a:	2b22      	cmp	r3, #34	; 0x22
 8006a2c:	f040 80ab 	bne.w	8006b86 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	689b      	ldr	r3, [r3, #8]
 8006a34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a38:	d117      	bne.n	8006a6a <UART_Receive_IT+0x50>
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	691b      	ldr	r3, [r3, #16]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d113      	bne.n	8006a6a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006a42:	2300      	movs	r3, #0
 8006a44:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a4a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	685b      	ldr	r3, [r3, #4]
 8006a52:	b29b      	uxth	r3, r3
 8006a54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a58:	b29a      	uxth	r2, r3
 8006a5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a5c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a62:	1c9a      	adds	r2, r3, #2
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	629a      	str	r2, [r3, #40]	; 0x28
 8006a68:	e026      	b.n	8006ab8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a6e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006a70:	2300      	movs	r3, #0
 8006a72:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	689b      	ldr	r3, [r3, #8]
 8006a78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a7c:	d007      	beq.n	8006a8e <UART_Receive_IT+0x74>
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	689b      	ldr	r3, [r3, #8]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d10a      	bne.n	8006a9c <UART_Receive_IT+0x82>
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	691b      	ldr	r3, [r3, #16]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d106      	bne.n	8006a9c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	685b      	ldr	r3, [r3, #4]
 8006a94:	b2da      	uxtb	r2, r3
 8006a96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a98:	701a      	strb	r2, [r3, #0]
 8006a9a:	e008      	b.n	8006aae <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	685b      	ldr	r3, [r3, #4]
 8006aa2:	b2db      	uxtb	r3, r3
 8006aa4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006aa8:	b2da      	uxtb	r2, r3
 8006aaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006aac:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ab2:	1c5a      	adds	r2, r3, #1
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006abc:	b29b      	uxth	r3, r3
 8006abe:	3b01      	subs	r3, #1
 8006ac0:	b29b      	uxth	r3, r3
 8006ac2:	687a      	ldr	r2, [r7, #4]
 8006ac4:	4619      	mov	r1, r3
 8006ac6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d15a      	bne.n	8006b82 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	68da      	ldr	r2, [r3, #12]
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f022 0220 	bic.w	r2, r2, #32
 8006ada:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	68da      	ldr	r2, [r3, #12]
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006aea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	695a      	ldr	r2, [r3, #20]
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f022 0201 	bic.w	r2, r2, #1
 8006afa:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2220      	movs	r2, #32
 8006b00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b08:	2b01      	cmp	r3, #1
 8006b0a:	d135      	bne.n	8006b78 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2200      	movs	r2, #0
 8006b10:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	330c      	adds	r3, #12
 8006b18:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b1a:	697b      	ldr	r3, [r7, #20]
 8006b1c:	e853 3f00 	ldrex	r3, [r3]
 8006b20:	613b      	str	r3, [r7, #16]
   return(result);
 8006b22:	693b      	ldr	r3, [r7, #16]
 8006b24:	f023 0310 	bic.w	r3, r3, #16
 8006b28:	627b      	str	r3, [r7, #36]	; 0x24
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	330c      	adds	r3, #12
 8006b30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b32:	623a      	str	r2, [r7, #32]
 8006b34:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b36:	69f9      	ldr	r1, [r7, #28]
 8006b38:	6a3a      	ldr	r2, [r7, #32]
 8006b3a:	e841 2300 	strex	r3, r2, [r1]
 8006b3e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006b40:	69bb      	ldr	r3, [r7, #24]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d1e5      	bne.n	8006b12 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f003 0310 	and.w	r3, r3, #16
 8006b50:	2b10      	cmp	r3, #16
 8006b52:	d10a      	bne.n	8006b6a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006b54:	2300      	movs	r3, #0
 8006b56:	60fb      	str	r3, [r7, #12]
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	60fb      	str	r3, [r7, #12]
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	685b      	ldr	r3, [r3, #4]
 8006b66:	60fb      	str	r3, [r7, #12]
 8006b68:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006b6e:	4619      	mov	r1, r3
 8006b70:	6878      	ldr	r0, [r7, #4]
 8006b72:	f7ff fdbf 	bl	80066f4 <HAL_UARTEx_RxEventCallback>
 8006b76:	e002      	b.n	8006b7e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006b78:	6878      	ldr	r0, [r7, #4]
 8006b7a:	f7fb fd07 	bl	800258c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006b7e:	2300      	movs	r3, #0
 8006b80:	e002      	b.n	8006b88 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006b82:	2300      	movs	r3, #0
 8006b84:	e000      	b.n	8006b88 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006b86:	2302      	movs	r3, #2
  }
}
 8006b88:	4618      	mov	r0, r3
 8006b8a:	3730      	adds	r7, #48	; 0x30
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	bd80      	pop	{r7, pc}

08006b90 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006b90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006b94:	b0c0      	sub	sp, #256	; 0x100
 8006b96:	af00      	add	r7, sp, #0
 8006b98:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006b9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	691b      	ldr	r3, [r3, #16]
 8006ba4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006ba8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bac:	68d9      	ldr	r1, [r3, #12]
 8006bae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bb2:	681a      	ldr	r2, [r3, #0]
 8006bb4:	ea40 0301 	orr.w	r3, r0, r1
 8006bb8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006bba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bbe:	689a      	ldr	r2, [r3, #8]
 8006bc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bc4:	691b      	ldr	r3, [r3, #16]
 8006bc6:	431a      	orrs	r2, r3
 8006bc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bcc:	695b      	ldr	r3, [r3, #20]
 8006bce:	431a      	orrs	r2, r3
 8006bd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bd4:	69db      	ldr	r3, [r3, #28]
 8006bd6:	4313      	orrs	r3, r2
 8006bd8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006bdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	68db      	ldr	r3, [r3, #12]
 8006be4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006be8:	f021 010c 	bic.w	r1, r1, #12
 8006bec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bf0:	681a      	ldr	r2, [r3, #0]
 8006bf2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006bf6:	430b      	orrs	r3, r1
 8006bf8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006bfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	695b      	ldr	r3, [r3, #20]
 8006c02:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006c06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c0a:	6999      	ldr	r1, [r3, #24]
 8006c0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c10:	681a      	ldr	r2, [r3, #0]
 8006c12:	ea40 0301 	orr.w	r3, r0, r1
 8006c16:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006c18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c1c:	681a      	ldr	r2, [r3, #0]
 8006c1e:	4b8f      	ldr	r3, [pc, #572]	; (8006e5c <UART_SetConfig+0x2cc>)
 8006c20:	429a      	cmp	r2, r3
 8006c22:	d005      	beq.n	8006c30 <UART_SetConfig+0xa0>
 8006c24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c28:	681a      	ldr	r2, [r3, #0]
 8006c2a:	4b8d      	ldr	r3, [pc, #564]	; (8006e60 <UART_SetConfig+0x2d0>)
 8006c2c:	429a      	cmp	r2, r3
 8006c2e:	d104      	bne.n	8006c3a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006c30:	f7fd ff2c 	bl	8004a8c <HAL_RCC_GetPCLK2Freq>
 8006c34:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006c38:	e003      	b.n	8006c42 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006c3a:	f7fd ff13 	bl	8004a64 <HAL_RCC_GetPCLK1Freq>
 8006c3e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006c42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c46:	69db      	ldr	r3, [r3, #28]
 8006c48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c4c:	f040 810c 	bne.w	8006e68 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006c50:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006c54:	2200      	movs	r2, #0
 8006c56:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006c5a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006c5e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006c62:	4622      	mov	r2, r4
 8006c64:	462b      	mov	r3, r5
 8006c66:	1891      	adds	r1, r2, r2
 8006c68:	65b9      	str	r1, [r7, #88]	; 0x58
 8006c6a:	415b      	adcs	r3, r3
 8006c6c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006c6e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006c72:	4621      	mov	r1, r4
 8006c74:	eb12 0801 	adds.w	r8, r2, r1
 8006c78:	4629      	mov	r1, r5
 8006c7a:	eb43 0901 	adc.w	r9, r3, r1
 8006c7e:	f04f 0200 	mov.w	r2, #0
 8006c82:	f04f 0300 	mov.w	r3, #0
 8006c86:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006c8a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006c8e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006c92:	4690      	mov	r8, r2
 8006c94:	4699      	mov	r9, r3
 8006c96:	4623      	mov	r3, r4
 8006c98:	eb18 0303 	adds.w	r3, r8, r3
 8006c9c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006ca0:	462b      	mov	r3, r5
 8006ca2:	eb49 0303 	adc.w	r3, r9, r3
 8006ca6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006caa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cae:	685b      	ldr	r3, [r3, #4]
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006cb6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006cba:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006cbe:	460b      	mov	r3, r1
 8006cc0:	18db      	adds	r3, r3, r3
 8006cc2:	653b      	str	r3, [r7, #80]	; 0x50
 8006cc4:	4613      	mov	r3, r2
 8006cc6:	eb42 0303 	adc.w	r3, r2, r3
 8006cca:	657b      	str	r3, [r7, #84]	; 0x54
 8006ccc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006cd0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006cd4:	f7f9 facc 	bl	8000270 <__aeabi_uldivmod>
 8006cd8:	4602      	mov	r2, r0
 8006cda:	460b      	mov	r3, r1
 8006cdc:	4b61      	ldr	r3, [pc, #388]	; (8006e64 <UART_SetConfig+0x2d4>)
 8006cde:	fba3 2302 	umull	r2, r3, r3, r2
 8006ce2:	095b      	lsrs	r3, r3, #5
 8006ce4:	011c      	lsls	r4, r3, #4
 8006ce6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006cea:	2200      	movs	r2, #0
 8006cec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006cf0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006cf4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006cf8:	4642      	mov	r2, r8
 8006cfa:	464b      	mov	r3, r9
 8006cfc:	1891      	adds	r1, r2, r2
 8006cfe:	64b9      	str	r1, [r7, #72]	; 0x48
 8006d00:	415b      	adcs	r3, r3
 8006d02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006d04:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006d08:	4641      	mov	r1, r8
 8006d0a:	eb12 0a01 	adds.w	sl, r2, r1
 8006d0e:	4649      	mov	r1, r9
 8006d10:	eb43 0b01 	adc.w	fp, r3, r1
 8006d14:	f04f 0200 	mov.w	r2, #0
 8006d18:	f04f 0300 	mov.w	r3, #0
 8006d1c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006d20:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006d24:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006d28:	4692      	mov	sl, r2
 8006d2a:	469b      	mov	fp, r3
 8006d2c:	4643      	mov	r3, r8
 8006d2e:	eb1a 0303 	adds.w	r3, sl, r3
 8006d32:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006d36:	464b      	mov	r3, r9
 8006d38:	eb4b 0303 	adc.w	r3, fp, r3
 8006d3c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006d40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d44:	685b      	ldr	r3, [r3, #4]
 8006d46:	2200      	movs	r2, #0
 8006d48:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006d4c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006d50:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006d54:	460b      	mov	r3, r1
 8006d56:	18db      	adds	r3, r3, r3
 8006d58:	643b      	str	r3, [r7, #64]	; 0x40
 8006d5a:	4613      	mov	r3, r2
 8006d5c:	eb42 0303 	adc.w	r3, r2, r3
 8006d60:	647b      	str	r3, [r7, #68]	; 0x44
 8006d62:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006d66:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006d6a:	f7f9 fa81 	bl	8000270 <__aeabi_uldivmod>
 8006d6e:	4602      	mov	r2, r0
 8006d70:	460b      	mov	r3, r1
 8006d72:	4611      	mov	r1, r2
 8006d74:	4b3b      	ldr	r3, [pc, #236]	; (8006e64 <UART_SetConfig+0x2d4>)
 8006d76:	fba3 2301 	umull	r2, r3, r3, r1
 8006d7a:	095b      	lsrs	r3, r3, #5
 8006d7c:	2264      	movs	r2, #100	; 0x64
 8006d7e:	fb02 f303 	mul.w	r3, r2, r3
 8006d82:	1acb      	subs	r3, r1, r3
 8006d84:	00db      	lsls	r3, r3, #3
 8006d86:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006d8a:	4b36      	ldr	r3, [pc, #216]	; (8006e64 <UART_SetConfig+0x2d4>)
 8006d8c:	fba3 2302 	umull	r2, r3, r3, r2
 8006d90:	095b      	lsrs	r3, r3, #5
 8006d92:	005b      	lsls	r3, r3, #1
 8006d94:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006d98:	441c      	add	r4, r3
 8006d9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006d9e:	2200      	movs	r2, #0
 8006da0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006da4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006da8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006dac:	4642      	mov	r2, r8
 8006dae:	464b      	mov	r3, r9
 8006db0:	1891      	adds	r1, r2, r2
 8006db2:	63b9      	str	r1, [r7, #56]	; 0x38
 8006db4:	415b      	adcs	r3, r3
 8006db6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006db8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006dbc:	4641      	mov	r1, r8
 8006dbe:	1851      	adds	r1, r2, r1
 8006dc0:	6339      	str	r1, [r7, #48]	; 0x30
 8006dc2:	4649      	mov	r1, r9
 8006dc4:	414b      	adcs	r3, r1
 8006dc6:	637b      	str	r3, [r7, #52]	; 0x34
 8006dc8:	f04f 0200 	mov.w	r2, #0
 8006dcc:	f04f 0300 	mov.w	r3, #0
 8006dd0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006dd4:	4659      	mov	r1, fp
 8006dd6:	00cb      	lsls	r3, r1, #3
 8006dd8:	4651      	mov	r1, sl
 8006dda:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006dde:	4651      	mov	r1, sl
 8006de0:	00ca      	lsls	r2, r1, #3
 8006de2:	4610      	mov	r0, r2
 8006de4:	4619      	mov	r1, r3
 8006de6:	4603      	mov	r3, r0
 8006de8:	4642      	mov	r2, r8
 8006dea:	189b      	adds	r3, r3, r2
 8006dec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006df0:	464b      	mov	r3, r9
 8006df2:	460a      	mov	r2, r1
 8006df4:	eb42 0303 	adc.w	r3, r2, r3
 8006df8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006dfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e00:	685b      	ldr	r3, [r3, #4]
 8006e02:	2200      	movs	r2, #0
 8006e04:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006e08:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006e0c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006e10:	460b      	mov	r3, r1
 8006e12:	18db      	adds	r3, r3, r3
 8006e14:	62bb      	str	r3, [r7, #40]	; 0x28
 8006e16:	4613      	mov	r3, r2
 8006e18:	eb42 0303 	adc.w	r3, r2, r3
 8006e1c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006e1e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006e22:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006e26:	f7f9 fa23 	bl	8000270 <__aeabi_uldivmod>
 8006e2a:	4602      	mov	r2, r0
 8006e2c:	460b      	mov	r3, r1
 8006e2e:	4b0d      	ldr	r3, [pc, #52]	; (8006e64 <UART_SetConfig+0x2d4>)
 8006e30:	fba3 1302 	umull	r1, r3, r3, r2
 8006e34:	095b      	lsrs	r3, r3, #5
 8006e36:	2164      	movs	r1, #100	; 0x64
 8006e38:	fb01 f303 	mul.w	r3, r1, r3
 8006e3c:	1ad3      	subs	r3, r2, r3
 8006e3e:	00db      	lsls	r3, r3, #3
 8006e40:	3332      	adds	r3, #50	; 0x32
 8006e42:	4a08      	ldr	r2, [pc, #32]	; (8006e64 <UART_SetConfig+0x2d4>)
 8006e44:	fba2 2303 	umull	r2, r3, r2, r3
 8006e48:	095b      	lsrs	r3, r3, #5
 8006e4a:	f003 0207 	and.w	r2, r3, #7
 8006e4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	4422      	add	r2, r4
 8006e56:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006e58:	e106      	b.n	8007068 <UART_SetConfig+0x4d8>
 8006e5a:	bf00      	nop
 8006e5c:	40011000 	.word	0x40011000
 8006e60:	40011400 	.word	0x40011400
 8006e64:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006e68:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006e72:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006e76:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006e7a:	4642      	mov	r2, r8
 8006e7c:	464b      	mov	r3, r9
 8006e7e:	1891      	adds	r1, r2, r2
 8006e80:	6239      	str	r1, [r7, #32]
 8006e82:	415b      	adcs	r3, r3
 8006e84:	627b      	str	r3, [r7, #36]	; 0x24
 8006e86:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006e8a:	4641      	mov	r1, r8
 8006e8c:	1854      	adds	r4, r2, r1
 8006e8e:	4649      	mov	r1, r9
 8006e90:	eb43 0501 	adc.w	r5, r3, r1
 8006e94:	f04f 0200 	mov.w	r2, #0
 8006e98:	f04f 0300 	mov.w	r3, #0
 8006e9c:	00eb      	lsls	r3, r5, #3
 8006e9e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006ea2:	00e2      	lsls	r2, r4, #3
 8006ea4:	4614      	mov	r4, r2
 8006ea6:	461d      	mov	r5, r3
 8006ea8:	4643      	mov	r3, r8
 8006eaa:	18e3      	adds	r3, r4, r3
 8006eac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006eb0:	464b      	mov	r3, r9
 8006eb2:	eb45 0303 	adc.w	r3, r5, r3
 8006eb6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006eba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ebe:	685b      	ldr	r3, [r3, #4]
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006ec6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006eca:	f04f 0200 	mov.w	r2, #0
 8006ece:	f04f 0300 	mov.w	r3, #0
 8006ed2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006ed6:	4629      	mov	r1, r5
 8006ed8:	008b      	lsls	r3, r1, #2
 8006eda:	4621      	mov	r1, r4
 8006edc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006ee0:	4621      	mov	r1, r4
 8006ee2:	008a      	lsls	r2, r1, #2
 8006ee4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006ee8:	f7f9 f9c2 	bl	8000270 <__aeabi_uldivmod>
 8006eec:	4602      	mov	r2, r0
 8006eee:	460b      	mov	r3, r1
 8006ef0:	4b60      	ldr	r3, [pc, #384]	; (8007074 <UART_SetConfig+0x4e4>)
 8006ef2:	fba3 2302 	umull	r2, r3, r3, r2
 8006ef6:	095b      	lsrs	r3, r3, #5
 8006ef8:	011c      	lsls	r4, r3, #4
 8006efa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006efe:	2200      	movs	r2, #0
 8006f00:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006f04:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006f08:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006f0c:	4642      	mov	r2, r8
 8006f0e:	464b      	mov	r3, r9
 8006f10:	1891      	adds	r1, r2, r2
 8006f12:	61b9      	str	r1, [r7, #24]
 8006f14:	415b      	adcs	r3, r3
 8006f16:	61fb      	str	r3, [r7, #28]
 8006f18:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006f1c:	4641      	mov	r1, r8
 8006f1e:	1851      	adds	r1, r2, r1
 8006f20:	6139      	str	r1, [r7, #16]
 8006f22:	4649      	mov	r1, r9
 8006f24:	414b      	adcs	r3, r1
 8006f26:	617b      	str	r3, [r7, #20]
 8006f28:	f04f 0200 	mov.w	r2, #0
 8006f2c:	f04f 0300 	mov.w	r3, #0
 8006f30:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006f34:	4659      	mov	r1, fp
 8006f36:	00cb      	lsls	r3, r1, #3
 8006f38:	4651      	mov	r1, sl
 8006f3a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006f3e:	4651      	mov	r1, sl
 8006f40:	00ca      	lsls	r2, r1, #3
 8006f42:	4610      	mov	r0, r2
 8006f44:	4619      	mov	r1, r3
 8006f46:	4603      	mov	r3, r0
 8006f48:	4642      	mov	r2, r8
 8006f4a:	189b      	adds	r3, r3, r2
 8006f4c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006f50:	464b      	mov	r3, r9
 8006f52:	460a      	mov	r2, r1
 8006f54:	eb42 0303 	adc.w	r3, r2, r3
 8006f58:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006f5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f60:	685b      	ldr	r3, [r3, #4]
 8006f62:	2200      	movs	r2, #0
 8006f64:	67bb      	str	r3, [r7, #120]	; 0x78
 8006f66:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006f68:	f04f 0200 	mov.w	r2, #0
 8006f6c:	f04f 0300 	mov.w	r3, #0
 8006f70:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006f74:	4649      	mov	r1, r9
 8006f76:	008b      	lsls	r3, r1, #2
 8006f78:	4641      	mov	r1, r8
 8006f7a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006f7e:	4641      	mov	r1, r8
 8006f80:	008a      	lsls	r2, r1, #2
 8006f82:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006f86:	f7f9 f973 	bl	8000270 <__aeabi_uldivmod>
 8006f8a:	4602      	mov	r2, r0
 8006f8c:	460b      	mov	r3, r1
 8006f8e:	4611      	mov	r1, r2
 8006f90:	4b38      	ldr	r3, [pc, #224]	; (8007074 <UART_SetConfig+0x4e4>)
 8006f92:	fba3 2301 	umull	r2, r3, r3, r1
 8006f96:	095b      	lsrs	r3, r3, #5
 8006f98:	2264      	movs	r2, #100	; 0x64
 8006f9a:	fb02 f303 	mul.w	r3, r2, r3
 8006f9e:	1acb      	subs	r3, r1, r3
 8006fa0:	011b      	lsls	r3, r3, #4
 8006fa2:	3332      	adds	r3, #50	; 0x32
 8006fa4:	4a33      	ldr	r2, [pc, #204]	; (8007074 <UART_SetConfig+0x4e4>)
 8006fa6:	fba2 2303 	umull	r2, r3, r2, r3
 8006faa:	095b      	lsrs	r3, r3, #5
 8006fac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006fb0:	441c      	add	r4, r3
 8006fb2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	673b      	str	r3, [r7, #112]	; 0x70
 8006fba:	677a      	str	r2, [r7, #116]	; 0x74
 8006fbc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006fc0:	4642      	mov	r2, r8
 8006fc2:	464b      	mov	r3, r9
 8006fc4:	1891      	adds	r1, r2, r2
 8006fc6:	60b9      	str	r1, [r7, #8]
 8006fc8:	415b      	adcs	r3, r3
 8006fca:	60fb      	str	r3, [r7, #12]
 8006fcc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006fd0:	4641      	mov	r1, r8
 8006fd2:	1851      	adds	r1, r2, r1
 8006fd4:	6039      	str	r1, [r7, #0]
 8006fd6:	4649      	mov	r1, r9
 8006fd8:	414b      	adcs	r3, r1
 8006fda:	607b      	str	r3, [r7, #4]
 8006fdc:	f04f 0200 	mov.w	r2, #0
 8006fe0:	f04f 0300 	mov.w	r3, #0
 8006fe4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006fe8:	4659      	mov	r1, fp
 8006fea:	00cb      	lsls	r3, r1, #3
 8006fec:	4651      	mov	r1, sl
 8006fee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006ff2:	4651      	mov	r1, sl
 8006ff4:	00ca      	lsls	r2, r1, #3
 8006ff6:	4610      	mov	r0, r2
 8006ff8:	4619      	mov	r1, r3
 8006ffa:	4603      	mov	r3, r0
 8006ffc:	4642      	mov	r2, r8
 8006ffe:	189b      	adds	r3, r3, r2
 8007000:	66bb      	str	r3, [r7, #104]	; 0x68
 8007002:	464b      	mov	r3, r9
 8007004:	460a      	mov	r2, r1
 8007006:	eb42 0303 	adc.w	r3, r2, r3
 800700a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800700c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007010:	685b      	ldr	r3, [r3, #4]
 8007012:	2200      	movs	r2, #0
 8007014:	663b      	str	r3, [r7, #96]	; 0x60
 8007016:	667a      	str	r2, [r7, #100]	; 0x64
 8007018:	f04f 0200 	mov.w	r2, #0
 800701c:	f04f 0300 	mov.w	r3, #0
 8007020:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007024:	4649      	mov	r1, r9
 8007026:	008b      	lsls	r3, r1, #2
 8007028:	4641      	mov	r1, r8
 800702a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800702e:	4641      	mov	r1, r8
 8007030:	008a      	lsls	r2, r1, #2
 8007032:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007036:	f7f9 f91b 	bl	8000270 <__aeabi_uldivmod>
 800703a:	4602      	mov	r2, r0
 800703c:	460b      	mov	r3, r1
 800703e:	4b0d      	ldr	r3, [pc, #52]	; (8007074 <UART_SetConfig+0x4e4>)
 8007040:	fba3 1302 	umull	r1, r3, r3, r2
 8007044:	095b      	lsrs	r3, r3, #5
 8007046:	2164      	movs	r1, #100	; 0x64
 8007048:	fb01 f303 	mul.w	r3, r1, r3
 800704c:	1ad3      	subs	r3, r2, r3
 800704e:	011b      	lsls	r3, r3, #4
 8007050:	3332      	adds	r3, #50	; 0x32
 8007052:	4a08      	ldr	r2, [pc, #32]	; (8007074 <UART_SetConfig+0x4e4>)
 8007054:	fba2 2303 	umull	r2, r3, r2, r3
 8007058:	095b      	lsrs	r3, r3, #5
 800705a:	f003 020f 	and.w	r2, r3, #15
 800705e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	4422      	add	r2, r4
 8007066:	609a      	str	r2, [r3, #8]
}
 8007068:	bf00      	nop
 800706a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800706e:	46bd      	mov	sp, r7
 8007070:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007074:	51eb851f 	.word	0x51eb851f

08007078 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 8007078:	b480      	push	{r7}
 800707a:	b085      	sub	sp, #20
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]
 8007080:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 8007082:	2300      	movs	r3, #0
 8007084:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 8007086:	683b      	ldr	r3, [r7, #0]
 8007088:	681a      	ldr	r2, [r3, #0]
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007090:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 8007092:	68fa      	ldr	r2, [r7, #12]
 8007094:	4b20      	ldr	r3, [pc, #128]	; (8007118 <FSMC_NORSRAM_Init+0xa0>)
 8007096:	4013      	ands	r3, r2
 8007098:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 80070a2:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 80070a4:	683b      	ldr	r3, [r7, #0]
 80070a6:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 80070a8:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 80070aa:	683b      	ldr	r3, [r7, #0]
 80070ac:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 80070ae:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 80070b4:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 80070b6:	683b      	ldr	r3, [r7, #0]
 80070b8:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 80070ba:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 80070bc:	683b      	ldr	r3, [r7, #0]
 80070be:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 80070c0:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 80070c2:	683b      	ldr	r3, [r7, #0]
 80070c4:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 80070c6:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 80070c8:	683b      	ldr	r3, [r7, #0]
 80070ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 80070cc:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 80070ce:	683b      	ldr	r3, [r7, #0]
 80070d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 80070d2:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 80070d4:	683b      	ldr	r3, [r7, #0]
 80070d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 80070d8:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 80070de:	431a      	orrs	r2, r3
                     Init->WriteBurst
 80070e0:	683b      	ldr	r3, [r7, #0]
 80070e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 80070e4:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 80070e6:	68fa      	ldr	r2, [r7, #12]
 80070e8:	4313      	orrs	r3, r2
 80070ea:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 80070ec:	683b      	ldr	r3, [r7, #0]
 80070ee:	689b      	ldr	r3, [r3, #8]
 80070f0:	2b08      	cmp	r3, #8
 80070f2:	d103      	bne.n	80070fc <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80070fa:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 80070fc:	683b      	ldr	r3, [r7, #0]
 80070fe:	681a      	ldr	r2, [r3, #0]
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	68f9      	ldr	r1, [r7, #12]
 8007104:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8007108:	2300      	movs	r3, #0
}
 800710a:	4618      	mov	r0, r3
 800710c:	3714      	adds	r7, #20
 800710e:	46bd      	mov	sp, r7
 8007110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007114:	4770      	bx	lr
 8007116:	bf00      	nop
 8007118:	fff00080 	.word	0xfff00080

0800711c <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800711c:	b480      	push	{r7}
 800711e:	b087      	sub	sp, #28
 8007120:	af00      	add	r7, sp, #0
 8007122:	60f8      	str	r0, [r7, #12]
 8007124:	60b9      	str	r1, [r7, #8]
 8007126:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 8007128:	2300      	movs	r3, #0
 800712a:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	1c5a      	adds	r2, r3, #1
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007136:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 8007138:	697b      	ldr	r3, [r7, #20]
 800713a:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800713e:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8007140:	68bb      	ldr	r3, [r7, #8]
 8007142:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 8007144:	68bb      	ldr	r3, [r7, #8]
 8007146:	685b      	ldr	r3, [r3, #4]
 8007148:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800714a:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 800714c:	68bb      	ldr	r3, [r7, #8]
 800714e:	689b      	ldr	r3, [r3, #8]
 8007150:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 8007152:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8007154:	68bb      	ldr	r3, [r7, #8]
 8007156:	68db      	ldr	r3, [r3, #12]
 8007158:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 800715a:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 800715c:	68bb      	ldr	r3, [r7, #8]
 800715e:	691b      	ldr	r3, [r3, #16]
 8007160:	3b01      	subs	r3, #1
 8007162:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8007164:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 8007166:	68bb      	ldr	r3, [r7, #8]
 8007168:	695b      	ldr	r3, [r3, #20]
 800716a:	3b02      	subs	r3, #2
 800716c:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 800716e:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 8007170:	68bb      	ldr	r3, [r7, #8]
 8007172:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8007174:	4313      	orrs	r3, r2
 8007176:	697a      	ldr	r2, [r7, #20]
 8007178:	4313      	orrs	r3, r2
 800717a:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	1c5a      	adds	r2, r3, #1
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	6979      	ldr	r1, [r7, #20]
 8007184:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8007188:	2300      	movs	r3, #0
}
 800718a:	4618      	mov	r0, r3
 800718c:	371c      	adds	r7, #28
 800718e:	46bd      	mov	sp, r7
 8007190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007194:	4770      	bx	lr
	...

08007198 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 8007198:	b480      	push	{r7}
 800719a:	b087      	sub	sp, #28
 800719c:	af00      	add	r7, sp, #0
 800719e:	60f8      	str	r0, [r7, #12]
 80071a0:	60b9      	str	r1, [r7, #8]
 80071a2:	607a      	str	r2, [r7, #4]
 80071a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 80071a6:	2300      	movs	r3, #0
 80071a8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 80071aa:	683b      	ldr	r3, [r7, #0]
 80071ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80071b0:	d122      	bne.n	80071f8 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	687a      	ldr	r2, [r7, #4]
 80071b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071ba:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 80071bc:	697a      	ldr	r2, [r7, #20]
 80071be:	4b15      	ldr	r3, [pc, #84]	; (8007214 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 80071c0:	4013      	ands	r3, r2
 80071c2:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80071c4:	68bb      	ldr	r3, [r7, #8]
 80071c6:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 80071c8:	68bb      	ldr	r3, [r7, #8]
 80071ca:	685b      	ldr	r3, [r3, #4]
 80071cc:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80071ce:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 80071d0:	68bb      	ldr	r3, [r7, #8]
 80071d2:	689b      	ldr	r3, [r3, #8]
 80071d4:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 80071d6:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 80071d8:	68bb      	ldr	r3, [r7, #8]
 80071da:	68db      	ldr	r3, [r3, #12]
 80071dc:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 80071de:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 80071e0:	68bb      	ldr	r3, [r7, #8]
 80071e2:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 80071e4:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80071e6:	697a      	ldr	r2, [r7, #20]
 80071e8:	4313      	orrs	r3, r2
 80071ea:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	687a      	ldr	r2, [r7, #4]
 80071f0:	6979      	ldr	r1, [r7, #20]
 80071f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80071f6:	e005      	b.n	8007204 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	687a      	ldr	r2, [r7, #4]
 80071fc:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8007200:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 8007204:	2300      	movs	r3, #0
}
 8007206:	4618      	mov	r0, r3
 8007208:	371c      	adds	r7, #28
 800720a:	46bd      	mov	sp, r7
 800720c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007210:	4770      	bx	lr
 8007212:	bf00      	nop
 8007214:	cff00000 	.word	0xcff00000

08007218 <siprintf>:
 8007218:	b40e      	push	{r1, r2, r3}
 800721a:	b500      	push	{lr}
 800721c:	b09c      	sub	sp, #112	; 0x70
 800721e:	ab1d      	add	r3, sp, #116	; 0x74
 8007220:	9002      	str	r0, [sp, #8]
 8007222:	9006      	str	r0, [sp, #24]
 8007224:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007228:	4809      	ldr	r0, [pc, #36]	; (8007250 <siprintf+0x38>)
 800722a:	9107      	str	r1, [sp, #28]
 800722c:	9104      	str	r1, [sp, #16]
 800722e:	4909      	ldr	r1, [pc, #36]	; (8007254 <siprintf+0x3c>)
 8007230:	f853 2b04 	ldr.w	r2, [r3], #4
 8007234:	9105      	str	r1, [sp, #20]
 8007236:	6800      	ldr	r0, [r0, #0]
 8007238:	9301      	str	r3, [sp, #4]
 800723a:	a902      	add	r1, sp, #8
 800723c:	f000 f992 	bl	8007564 <_svfiprintf_r>
 8007240:	9b02      	ldr	r3, [sp, #8]
 8007242:	2200      	movs	r2, #0
 8007244:	701a      	strb	r2, [r3, #0]
 8007246:	b01c      	add	sp, #112	; 0x70
 8007248:	f85d eb04 	ldr.w	lr, [sp], #4
 800724c:	b003      	add	sp, #12
 800724e:	4770      	bx	lr
 8007250:	20000060 	.word	0x20000060
 8007254:	ffff0208 	.word	0xffff0208

08007258 <memset>:
 8007258:	4402      	add	r2, r0
 800725a:	4603      	mov	r3, r0
 800725c:	4293      	cmp	r3, r2
 800725e:	d100      	bne.n	8007262 <memset+0xa>
 8007260:	4770      	bx	lr
 8007262:	f803 1b01 	strb.w	r1, [r3], #1
 8007266:	e7f9      	b.n	800725c <memset+0x4>

08007268 <__errno>:
 8007268:	4b01      	ldr	r3, [pc, #4]	; (8007270 <__errno+0x8>)
 800726a:	6818      	ldr	r0, [r3, #0]
 800726c:	4770      	bx	lr
 800726e:	bf00      	nop
 8007270:	20000060 	.word	0x20000060

08007274 <__libc_init_array>:
 8007274:	b570      	push	{r4, r5, r6, lr}
 8007276:	4d0d      	ldr	r5, [pc, #52]	; (80072ac <__libc_init_array+0x38>)
 8007278:	4c0d      	ldr	r4, [pc, #52]	; (80072b0 <__libc_init_array+0x3c>)
 800727a:	1b64      	subs	r4, r4, r5
 800727c:	10a4      	asrs	r4, r4, #2
 800727e:	2600      	movs	r6, #0
 8007280:	42a6      	cmp	r6, r4
 8007282:	d109      	bne.n	8007298 <__libc_init_array+0x24>
 8007284:	4d0b      	ldr	r5, [pc, #44]	; (80072b4 <__libc_init_array+0x40>)
 8007286:	4c0c      	ldr	r4, [pc, #48]	; (80072b8 <__libc_init_array+0x44>)
 8007288:	f000 fc6a 	bl	8007b60 <_init>
 800728c:	1b64      	subs	r4, r4, r5
 800728e:	10a4      	asrs	r4, r4, #2
 8007290:	2600      	movs	r6, #0
 8007292:	42a6      	cmp	r6, r4
 8007294:	d105      	bne.n	80072a2 <__libc_init_array+0x2e>
 8007296:	bd70      	pop	{r4, r5, r6, pc}
 8007298:	f855 3b04 	ldr.w	r3, [r5], #4
 800729c:	4798      	blx	r3
 800729e:	3601      	adds	r6, #1
 80072a0:	e7ee      	b.n	8007280 <__libc_init_array+0xc>
 80072a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80072a6:	4798      	blx	r3
 80072a8:	3601      	adds	r6, #1
 80072aa:	e7f2      	b.n	8007292 <__libc_init_array+0x1e>
 80072ac:	0800abf8 	.word	0x0800abf8
 80072b0:	0800abf8 	.word	0x0800abf8
 80072b4:	0800abf8 	.word	0x0800abf8
 80072b8:	0800abfc 	.word	0x0800abfc

080072bc <__retarget_lock_acquire_recursive>:
 80072bc:	4770      	bx	lr

080072be <__retarget_lock_release_recursive>:
 80072be:	4770      	bx	lr

080072c0 <_free_r>:
 80072c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80072c2:	2900      	cmp	r1, #0
 80072c4:	d044      	beq.n	8007350 <_free_r+0x90>
 80072c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80072ca:	9001      	str	r0, [sp, #4]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	f1a1 0404 	sub.w	r4, r1, #4
 80072d2:	bfb8      	it	lt
 80072d4:	18e4      	addlt	r4, r4, r3
 80072d6:	f000 f8df 	bl	8007498 <__malloc_lock>
 80072da:	4a1e      	ldr	r2, [pc, #120]	; (8007354 <_free_r+0x94>)
 80072dc:	9801      	ldr	r0, [sp, #4]
 80072de:	6813      	ldr	r3, [r2, #0]
 80072e0:	b933      	cbnz	r3, 80072f0 <_free_r+0x30>
 80072e2:	6063      	str	r3, [r4, #4]
 80072e4:	6014      	str	r4, [r2, #0]
 80072e6:	b003      	add	sp, #12
 80072e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80072ec:	f000 b8da 	b.w	80074a4 <__malloc_unlock>
 80072f0:	42a3      	cmp	r3, r4
 80072f2:	d908      	bls.n	8007306 <_free_r+0x46>
 80072f4:	6825      	ldr	r5, [r4, #0]
 80072f6:	1961      	adds	r1, r4, r5
 80072f8:	428b      	cmp	r3, r1
 80072fa:	bf01      	itttt	eq
 80072fc:	6819      	ldreq	r1, [r3, #0]
 80072fe:	685b      	ldreq	r3, [r3, #4]
 8007300:	1949      	addeq	r1, r1, r5
 8007302:	6021      	streq	r1, [r4, #0]
 8007304:	e7ed      	b.n	80072e2 <_free_r+0x22>
 8007306:	461a      	mov	r2, r3
 8007308:	685b      	ldr	r3, [r3, #4]
 800730a:	b10b      	cbz	r3, 8007310 <_free_r+0x50>
 800730c:	42a3      	cmp	r3, r4
 800730e:	d9fa      	bls.n	8007306 <_free_r+0x46>
 8007310:	6811      	ldr	r1, [r2, #0]
 8007312:	1855      	adds	r5, r2, r1
 8007314:	42a5      	cmp	r5, r4
 8007316:	d10b      	bne.n	8007330 <_free_r+0x70>
 8007318:	6824      	ldr	r4, [r4, #0]
 800731a:	4421      	add	r1, r4
 800731c:	1854      	adds	r4, r2, r1
 800731e:	42a3      	cmp	r3, r4
 8007320:	6011      	str	r1, [r2, #0]
 8007322:	d1e0      	bne.n	80072e6 <_free_r+0x26>
 8007324:	681c      	ldr	r4, [r3, #0]
 8007326:	685b      	ldr	r3, [r3, #4]
 8007328:	6053      	str	r3, [r2, #4]
 800732a:	440c      	add	r4, r1
 800732c:	6014      	str	r4, [r2, #0]
 800732e:	e7da      	b.n	80072e6 <_free_r+0x26>
 8007330:	d902      	bls.n	8007338 <_free_r+0x78>
 8007332:	230c      	movs	r3, #12
 8007334:	6003      	str	r3, [r0, #0]
 8007336:	e7d6      	b.n	80072e6 <_free_r+0x26>
 8007338:	6825      	ldr	r5, [r4, #0]
 800733a:	1961      	adds	r1, r4, r5
 800733c:	428b      	cmp	r3, r1
 800733e:	bf04      	itt	eq
 8007340:	6819      	ldreq	r1, [r3, #0]
 8007342:	685b      	ldreq	r3, [r3, #4]
 8007344:	6063      	str	r3, [r4, #4]
 8007346:	bf04      	itt	eq
 8007348:	1949      	addeq	r1, r1, r5
 800734a:	6021      	streq	r1, [r4, #0]
 800734c:	6054      	str	r4, [r2, #4]
 800734e:	e7ca      	b.n	80072e6 <_free_r+0x26>
 8007350:	b003      	add	sp, #12
 8007352:	bd30      	pop	{r4, r5, pc}
 8007354:	20000438 	.word	0x20000438

08007358 <sbrk_aligned>:
 8007358:	b570      	push	{r4, r5, r6, lr}
 800735a:	4e0e      	ldr	r6, [pc, #56]	; (8007394 <sbrk_aligned+0x3c>)
 800735c:	460c      	mov	r4, r1
 800735e:	6831      	ldr	r1, [r6, #0]
 8007360:	4605      	mov	r5, r0
 8007362:	b911      	cbnz	r1, 800736a <sbrk_aligned+0x12>
 8007364:	f000 fba6 	bl	8007ab4 <_sbrk_r>
 8007368:	6030      	str	r0, [r6, #0]
 800736a:	4621      	mov	r1, r4
 800736c:	4628      	mov	r0, r5
 800736e:	f000 fba1 	bl	8007ab4 <_sbrk_r>
 8007372:	1c43      	adds	r3, r0, #1
 8007374:	d00a      	beq.n	800738c <sbrk_aligned+0x34>
 8007376:	1cc4      	adds	r4, r0, #3
 8007378:	f024 0403 	bic.w	r4, r4, #3
 800737c:	42a0      	cmp	r0, r4
 800737e:	d007      	beq.n	8007390 <sbrk_aligned+0x38>
 8007380:	1a21      	subs	r1, r4, r0
 8007382:	4628      	mov	r0, r5
 8007384:	f000 fb96 	bl	8007ab4 <_sbrk_r>
 8007388:	3001      	adds	r0, #1
 800738a:	d101      	bne.n	8007390 <sbrk_aligned+0x38>
 800738c:	f04f 34ff 	mov.w	r4, #4294967295
 8007390:	4620      	mov	r0, r4
 8007392:	bd70      	pop	{r4, r5, r6, pc}
 8007394:	2000043c 	.word	0x2000043c

08007398 <_malloc_r>:
 8007398:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800739c:	1ccd      	adds	r5, r1, #3
 800739e:	f025 0503 	bic.w	r5, r5, #3
 80073a2:	3508      	adds	r5, #8
 80073a4:	2d0c      	cmp	r5, #12
 80073a6:	bf38      	it	cc
 80073a8:	250c      	movcc	r5, #12
 80073aa:	2d00      	cmp	r5, #0
 80073ac:	4607      	mov	r7, r0
 80073ae:	db01      	blt.n	80073b4 <_malloc_r+0x1c>
 80073b0:	42a9      	cmp	r1, r5
 80073b2:	d905      	bls.n	80073c0 <_malloc_r+0x28>
 80073b4:	230c      	movs	r3, #12
 80073b6:	603b      	str	r3, [r7, #0]
 80073b8:	2600      	movs	r6, #0
 80073ba:	4630      	mov	r0, r6
 80073bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80073c0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007494 <_malloc_r+0xfc>
 80073c4:	f000 f868 	bl	8007498 <__malloc_lock>
 80073c8:	f8d8 3000 	ldr.w	r3, [r8]
 80073cc:	461c      	mov	r4, r3
 80073ce:	bb5c      	cbnz	r4, 8007428 <_malloc_r+0x90>
 80073d0:	4629      	mov	r1, r5
 80073d2:	4638      	mov	r0, r7
 80073d4:	f7ff ffc0 	bl	8007358 <sbrk_aligned>
 80073d8:	1c43      	adds	r3, r0, #1
 80073da:	4604      	mov	r4, r0
 80073dc:	d155      	bne.n	800748a <_malloc_r+0xf2>
 80073de:	f8d8 4000 	ldr.w	r4, [r8]
 80073e2:	4626      	mov	r6, r4
 80073e4:	2e00      	cmp	r6, #0
 80073e6:	d145      	bne.n	8007474 <_malloc_r+0xdc>
 80073e8:	2c00      	cmp	r4, #0
 80073ea:	d048      	beq.n	800747e <_malloc_r+0xe6>
 80073ec:	6823      	ldr	r3, [r4, #0]
 80073ee:	4631      	mov	r1, r6
 80073f0:	4638      	mov	r0, r7
 80073f2:	eb04 0903 	add.w	r9, r4, r3
 80073f6:	f000 fb5d 	bl	8007ab4 <_sbrk_r>
 80073fa:	4581      	cmp	r9, r0
 80073fc:	d13f      	bne.n	800747e <_malloc_r+0xe6>
 80073fe:	6821      	ldr	r1, [r4, #0]
 8007400:	1a6d      	subs	r5, r5, r1
 8007402:	4629      	mov	r1, r5
 8007404:	4638      	mov	r0, r7
 8007406:	f7ff ffa7 	bl	8007358 <sbrk_aligned>
 800740a:	3001      	adds	r0, #1
 800740c:	d037      	beq.n	800747e <_malloc_r+0xe6>
 800740e:	6823      	ldr	r3, [r4, #0]
 8007410:	442b      	add	r3, r5
 8007412:	6023      	str	r3, [r4, #0]
 8007414:	f8d8 3000 	ldr.w	r3, [r8]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d038      	beq.n	800748e <_malloc_r+0xf6>
 800741c:	685a      	ldr	r2, [r3, #4]
 800741e:	42a2      	cmp	r2, r4
 8007420:	d12b      	bne.n	800747a <_malloc_r+0xe2>
 8007422:	2200      	movs	r2, #0
 8007424:	605a      	str	r2, [r3, #4]
 8007426:	e00f      	b.n	8007448 <_malloc_r+0xb0>
 8007428:	6822      	ldr	r2, [r4, #0]
 800742a:	1b52      	subs	r2, r2, r5
 800742c:	d41f      	bmi.n	800746e <_malloc_r+0xd6>
 800742e:	2a0b      	cmp	r2, #11
 8007430:	d917      	bls.n	8007462 <_malloc_r+0xca>
 8007432:	1961      	adds	r1, r4, r5
 8007434:	42a3      	cmp	r3, r4
 8007436:	6025      	str	r5, [r4, #0]
 8007438:	bf18      	it	ne
 800743a:	6059      	strne	r1, [r3, #4]
 800743c:	6863      	ldr	r3, [r4, #4]
 800743e:	bf08      	it	eq
 8007440:	f8c8 1000 	streq.w	r1, [r8]
 8007444:	5162      	str	r2, [r4, r5]
 8007446:	604b      	str	r3, [r1, #4]
 8007448:	4638      	mov	r0, r7
 800744a:	f104 060b 	add.w	r6, r4, #11
 800744e:	f000 f829 	bl	80074a4 <__malloc_unlock>
 8007452:	f026 0607 	bic.w	r6, r6, #7
 8007456:	1d23      	adds	r3, r4, #4
 8007458:	1af2      	subs	r2, r6, r3
 800745a:	d0ae      	beq.n	80073ba <_malloc_r+0x22>
 800745c:	1b9b      	subs	r3, r3, r6
 800745e:	50a3      	str	r3, [r4, r2]
 8007460:	e7ab      	b.n	80073ba <_malloc_r+0x22>
 8007462:	42a3      	cmp	r3, r4
 8007464:	6862      	ldr	r2, [r4, #4]
 8007466:	d1dd      	bne.n	8007424 <_malloc_r+0x8c>
 8007468:	f8c8 2000 	str.w	r2, [r8]
 800746c:	e7ec      	b.n	8007448 <_malloc_r+0xb0>
 800746e:	4623      	mov	r3, r4
 8007470:	6864      	ldr	r4, [r4, #4]
 8007472:	e7ac      	b.n	80073ce <_malloc_r+0x36>
 8007474:	4634      	mov	r4, r6
 8007476:	6876      	ldr	r6, [r6, #4]
 8007478:	e7b4      	b.n	80073e4 <_malloc_r+0x4c>
 800747a:	4613      	mov	r3, r2
 800747c:	e7cc      	b.n	8007418 <_malloc_r+0x80>
 800747e:	230c      	movs	r3, #12
 8007480:	603b      	str	r3, [r7, #0]
 8007482:	4638      	mov	r0, r7
 8007484:	f000 f80e 	bl	80074a4 <__malloc_unlock>
 8007488:	e797      	b.n	80073ba <_malloc_r+0x22>
 800748a:	6025      	str	r5, [r4, #0]
 800748c:	e7dc      	b.n	8007448 <_malloc_r+0xb0>
 800748e:	605b      	str	r3, [r3, #4]
 8007490:	deff      	udf	#255	; 0xff
 8007492:	bf00      	nop
 8007494:	20000438 	.word	0x20000438

08007498 <__malloc_lock>:
 8007498:	4801      	ldr	r0, [pc, #4]	; (80074a0 <__malloc_lock+0x8>)
 800749a:	f7ff bf0f 	b.w	80072bc <__retarget_lock_acquire_recursive>
 800749e:	bf00      	nop
 80074a0:	20000434 	.word	0x20000434

080074a4 <__malloc_unlock>:
 80074a4:	4801      	ldr	r0, [pc, #4]	; (80074ac <__malloc_unlock+0x8>)
 80074a6:	f7ff bf0a 	b.w	80072be <__retarget_lock_release_recursive>
 80074aa:	bf00      	nop
 80074ac:	20000434 	.word	0x20000434

080074b0 <__ssputs_r>:
 80074b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80074b4:	688e      	ldr	r6, [r1, #8]
 80074b6:	461f      	mov	r7, r3
 80074b8:	42be      	cmp	r6, r7
 80074ba:	680b      	ldr	r3, [r1, #0]
 80074bc:	4682      	mov	sl, r0
 80074be:	460c      	mov	r4, r1
 80074c0:	4690      	mov	r8, r2
 80074c2:	d82c      	bhi.n	800751e <__ssputs_r+0x6e>
 80074c4:	898a      	ldrh	r2, [r1, #12]
 80074c6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80074ca:	d026      	beq.n	800751a <__ssputs_r+0x6a>
 80074cc:	6965      	ldr	r5, [r4, #20]
 80074ce:	6909      	ldr	r1, [r1, #16]
 80074d0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80074d4:	eba3 0901 	sub.w	r9, r3, r1
 80074d8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80074dc:	1c7b      	adds	r3, r7, #1
 80074de:	444b      	add	r3, r9
 80074e0:	106d      	asrs	r5, r5, #1
 80074e2:	429d      	cmp	r5, r3
 80074e4:	bf38      	it	cc
 80074e6:	461d      	movcc	r5, r3
 80074e8:	0553      	lsls	r3, r2, #21
 80074ea:	d527      	bpl.n	800753c <__ssputs_r+0x8c>
 80074ec:	4629      	mov	r1, r5
 80074ee:	f7ff ff53 	bl	8007398 <_malloc_r>
 80074f2:	4606      	mov	r6, r0
 80074f4:	b360      	cbz	r0, 8007550 <__ssputs_r+0xa0>
 80074f6:	6921      	ldr	r1, [r4, #16]
 80074f8:	464a      	mov	r2, r9
 80074fa:	f000 faeb 	bl	8007ad4 <memcpy>
 80074fe:	89a3      	ldrh	r3, [r4, #12]
 8007500:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007504:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007508:	81a3      	strh	r3, [r4, #12]
 800750a:	6126      	str	r6, [r4, #16]
 800750c:	6165      	str	r5, [r4, #20]
 800750e:	444e      	add	r6, r9
 8007510:	eba5 0509 	sub.w	r5, r5, r9
 8007514:	6026      	str	r6, [r4, #0]
 8007516:	60a5      	str	r5, [r4, #8]
 8007518:	463e      	mov	r6, r7
 800751a:	42be      	cmp	r6, r7
 800751c:	d900      	bls.n	8007520 <__ssputs_r+0x70>
 800751e:	463e      	mov	r6, r7
 8007520:	6820      	ldr	r0, [r4, #0]
 8007522:	4632      	mov	r2, r6
 8007524:	4641      	mov	r1, r8
 8007526:	f000 faab 	bl	8007a80 <memmove>
 800752a:	68a3      	ldr	r3, [r4, #8]
 800752c:	1b9b      	subs	r3, r3, r6
 800752e:	60a3      	str	r3, [r4, #8]
 8007530:	6823      	ldr	r3, [r4, #0]
 8007532:	4433      	add	r3, r6
 8007534:	6023      	str	r3, [r4, #0]
 8007536:	2000      	movs	r0, #0
 8007538:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800753c:	462a      	mov	r2, r5
 800753e:	f000 fad7 	bl	8007af0 <_realloc_r>
 8007542:	4606      	mov	r6, r0
 8007544:	2800      	cmp	r0, #0
 8007546:	d1e0      	bne.n	800750a <__ssputs_r+0x5a>
 8007548:	6921      	ldr	r1, [r4, #16]
 800754a:	4650      	mov	r0, sl
 800754c:	f7ff feb8 	bl	80072c0 <_free_r>
 8007550:	230c      	movs	r3, #12
 8007552:	f8ca 3000 	str.w	r3, [sl]
 8007556:	89a3      	ldrh	r3, [r4, #12]
 8007558:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800755c:	81a3      	strh	r3, [r4, #12]
 800755e:	f04f 30ff 	mov.w	r0, #4294967295
 8007562:	e7e9      	b.n	8007538 <__ssputs_r+0x88>

08007564 <_svfiprintf_r>:
 8007564:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007568:	4698      	mov	r8, r3
 800756a:	898b      	ldrh	r3, [r1, #12]
 800756c:	061b      	lsls	r3, r3, #24
 800756e:	b09d      	sub	sp, #116	; 0x74
 8007570:	4607      	mov	r7, r0
 8007572:	460d      	mov	r5, r1
 8007574:	4614      	mov	r4, r2
 8007576:	d50e      	bpl.n	8007596 <_svfiprintf_r+0x32>
 8007578:	690b      	ldr	r3, [r1, #16]
 800757a:	b963      	cbnz	r3, 8007596 <_svfiprintf_r+0x32>
 800757c:	2140      	movs	r1, #64	; 0x40
 800757e:	f7ff ff0b 	bl	8007398 <_malloc_r>
 8007582:	6028      	str	r0, [r5, #0]
 8007584:	6128      	str	r0, [r5, #16]
 8007586:	b920      	cbnz	r0, 8007592 <_svfiprintf_r+0x2e>
 8007588:	230c      	movs	r3, #12
 800758a:	603b      	str	r3, [r7, #0]
 800758c:	f04f 30ff 	mov.w	r0, #4294967295
 8007590:	e0d0      	b.n	8007734 <_svfiprintf_r+0x1d0>
 8007592:	2340      	movs	r3, #64	; 0x40
 8007594:	616b      	str	r3, [r5, #20]
 8007596:	2300      	movs	r3, #0
 8007598:	9309      	str	r3, [sp, #36]	; 0x24
 800759a:	2320      	movs	r3, #32
 800759c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80075a0:	f8cd 800c 	str.w	r8, [sp, #12]
 80075a4:	2330      	movs	r3, #48	; 0x30
 80075a6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800774c <_svfiprintf_r+0x1e8>
 80075aa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80075ae:	f04f 0901 	mov.w	r9, #1
 80075b2:	4623      	mov	r3, r4
 80075b4:	469a      	mov	sl, r3
 80075b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80075ba:	b10a      	cbz	r2, 80075c0 <_svfiprintf_r+0x5c>
 80075bc:	2a25      	cmp	r2, #37	; 0x25
 80075be:	d1f9      	bne.n	80075b4 <_svfiprintf_r+0x50>
 80075c0:	ebba 0b04 	subs.w	fp, sl, r4
 80075c4:	d00b      	beq.n	80075de <_svfiprintf_r+0x7a>
 80075c6:	465b      	mov	r3, fp
 80075c8:	4622      	mov	r2, r4
 80075ca:	4629      	mov	r1, r5
 80075cc:	4638      	mov	r0, r7
 80075ce:	f7ff ff6f 	bl	80074b0 <__ssputs_r>
 80075d2:	3001      	adds	r0, #1
 80075d4:	f000 80a9 	beq.w	800772a <_svfiprintf_r+0x1c6>
 80075d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80075da:	445a      	add	r2, fp
 80075dc:	9209      	str	r2, [sp, #36]	; 0x24
 80075de:	f89a 3000 	ldrb.w	r3, [sl]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	f000 80a1 	beq.w	800772a <_svfiprintf_r+0x1c6>
 80075e8:	2300      	movs	r3, #0
 80075ea:	f04f 32ff 	mov.w	r2, #4294967295
 80075ee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80075f2:	f10a 0a01 	add.w	sl, sl, #1
 80075f6:	9304      	str	r3, [sp, #16]
 80075f8:	9307      	str	r3, [sp, #28]
 80075fa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80075fe:	931a      	str	r3, [sp, #104]	; 0x68
 8007600:	4654      	mov	r4, sl
 8007602:	2205      	movs	r2, #5
 8007604:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007608:	4850      	ldr	r0, [pc, #320]	; (800774c <_svfiprintf_r+0x1e8>)
 800760a:	f7f8 fde1 	bl	80001d0 <memchr>
 800760e:	9a04      	ldr	r2, [sp, #16]
 8007610:	b9d8      	cbnz	r0, 800764a <_svfiprintf_r+0xe6>
 8007612:	06d0      	lsls	r0, r2, #27
 8007614:	bf44      	itt	mi
 8007616:	2320      	movmi	r3, #32
 8007618:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800761c:	0711      	lsls	r1, r2, #28
 800761e:	bf44      	itt	mi
 8007620:	232b      	movmi	r3, #43	; 0x2b
 8007622:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007626:	f89a 3000 	ldrb.w	r3, [sl]
 800762a:	2b2a      	cmp	r3, #42	; 0x2a
 800762c:	d015      	beq.n	800765a <_svfiprintf_r+0xf6>
 800762e:	9a07      	ldr	r2, [sp, #28]
 8007630:	4654      	mov	r4, sl
 8007632:	2000      	movs	r0, #0
 8007634:	f04f 0c0a 	mov.w	ip, #10
 8007638:	4621      	mov	r1, r4
 800763a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800763e:	3b30      	subs	r3, #48	; 0x30
 8007640:	2b09      	cmp	r3, #9
 8007642:	d94d      	bls.n	80076e0 <_svfiprintf_r+0x17c>
 8007644:	b1b0      	cbz	r0, 8007674 <_svfiprintf_r+0x110>
 8007646:	9207      	str	r2, [sp, #28]
 8007648:	e014      	b.n	8007674 <_svfiprintf_r+0x110>
 800764a:	eba0 0308 	sub.w	r3, r0, r8
 800764e:	fa09 f303 	lsl.w	r3, r9, r3
 8007652:	4313      	orrs	r3, r2
 8007654:	9304      	str	r3, [sp, #16]
 8007656:	46a2      	mov	sl, r4
 8007658:	e7d2      	b.n	8007600 <_svfiprintf_r+0x9c>
 800765a:	9b03      	ldr	r3, [sp, #12]
 800765c:	1d19      	adds	r1, r3, #4
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	9103      	str	r1, [sp, #12]
 8007662:	2b00      	cmp	r3, #0
 8007664:	bfbb      	ittet	lt
 8007666:	425b      	neglt	r3, r3
 8007668:	f042 0202 	orrlt.w	r2, r2, #2
 800766c:	9307      	strge	r3, [sp, #28]
 800766e:	9307      	strlt	r3, [sp, #28]
 8007670:	bfb8      	it	lt
 8007672:	9204      	strlt	r2, [sp, #16]
 8007674:	7823      	ldrb	r3, [r4, #0]
 8007676:	2b2e      	cmp	r3, #46	; 0x2e
 8007678:	d10c      	bne.n	8007694 <_svfiprintf_r+0x130>
 800767a:	7863      	ldrb	r3, [r4, #1]
 800767c:	2b2a      	cmp	r3, #42	; 0x2a
 800767e:	d134      	bne.n	80076ea <_svfiprintf_r+0x186>
 8007680:	9b03      	ldr	r3, [sp, #12]
 8007682:	1d1a      	adds	r2, r3, #4
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	9203      	str	r2, [sp, #12]
 8007688:	2b00      	cmp	r3, #0
 800768a:	bfb8      	it	lt
 800768c:	f04f 33ff 	movlt.w	r3, #4294967295
 8007690:	3402      	adds	r4, #2
 8007692:	9305      	str	r3, [sp, #20]
 8007694:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800775c <_svfiprintf_r+0x1f8>
 8007698:	7821      	ldrb	r1, [r4, #0]
 800769a:	2203      	movs	r2, #3
 800769c:	4650      	mov	r0, sl
 800769e:	f7f8 fd97 	bl	80001d0 <memchr>
 80076a2:	b138      	cbz	r0, 80076b4 <_svfiprintf_r+0x150>
 80076a4:	9b04      	ldr	r3, [sp, #16]
 80076a6:	eba0 000a 	sub.w	r0, r0, sl
 80076aa:	2240      	movs	r2, #64	; 0x40
 80076ac:	4082      	lsls	r2, r0
 80076ae:	4313      	orrs	r3, r2
 80076b0:	3401      	adds	r4, #1
 80076b2:	9304      	str	r3, [sp, #16]
 80076b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80076b8:	4825      	ldr	r0, [pc, #148]	; (8007750 <_svfiprintf_r+0x1ec>)
 80076ba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80076be:	2206      	movs	r2, #6
 80076c0:	f7f8 fd86 	bl	80001d0 <memchr>
 80076c4:	2800      	cmp	r0, #0
 80076c6:	d038      	beq.n	800773a <_svfiprintf_r+0x1d6>
 80076c8:	4b22      	ldr	r3, [pc, #136]	; (8007754 <_svfiprintf_r+0x1f0>)
 80076ca:	bb1b      	cbnz	r3, 8007714 <_svfiprintf_r+0x1b0>
 80076cc:	9b03      	ldr	r3, [sp, #12]
 80076ce:	3307      	adds	r3, #7
 80076d0:	f023 0307 	bic.w	r3, r3, #7
 80076d4:	3308      	adds	r3, #8
 80076d6:	9303      	str	r3, [sp, #12]
 80076d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076da:	4433      	add	r3, r6
 80076dc:	9309      	str	r3, [sp, #36]	; 0x24
 80076de:	e768      	b.n	80075b2 <_svfiprintf_r+0x4e>
 80076e0:	fb0c 3202 	mla	r2, ip, r2, r3
 80076e4:	460c      	mov	r4, r1
 80076e6:	2001      	movs	r0, #1
 80076e8:	e7a6      	b.n	8007638 <_svfiprintf_r+0xd4>
 80076ea:	2300      	movs	r3, #0
 80076ec:	3401      	adds	r4, #1
 80076ee:	9305      	str	r3, [sp, #20]
 80076f0:	4619      	mov	r1, r3
 80076f2:	f04f 0c0a 	mov.w	ip, #10
 80076f6:	4620      	mov	r0, r4
 80076f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80076fc:	3a30      	subs	r2, #48	; 0x30
 80076fe:	2a09      	cmp	r2, #9
 8007700:	d903      	bls.n	800770a <_svfiprintf_r+0x1a6>
 8007702:	2b00      	cmp	r3, #0
 8007704:	d0c6      	beq.n	8007694 <_svfiprintf_r+0x130>
 8007706:	9105      	str	r1, [sp, #20]
 8007708:	e7c4      	b.n	8007694 <_svfiprintf_r+0x130>
 800770a:	fb0c 2101 	mla	r1, ip, r1, r2
 800770e:	4604      	mov	r4, r0
 8007710:	2301      	movs	r3, #1
 8007712:	e7f0      	b.n	80076f6 <_svfiprintf_r+0x192>
 8007714:	ab03      	add	r3, sp, #12
 8007716:	9300      	str	r3, [sp, #0]
 8007718:	462a      	mov	r2, r5
 800771a:	4b0f      	ldr	r3, [pc, #60]	; (8007758 <_svfiprintf_r+0x1f4>)
 800771c:	a904      	add	r1, sp, #16
 800771e:	4638      	mov	r0, r7
 8007720:	f3af 8000 	nop.w
 8007724:	1c42      	adds	r2, r0, #1
 8007726:	4606      	mov	r6, r0
 8007728:	d1d6      	bne.n	80076d8 <_svfiprintf_r+0x174>
 800772a:	89ab      	ldrh	r3, [r5, #12]
 800772c:	065b      	lsls	r3, r3, #25
 800772e:	f53f af2d 	bmi.w	800758c <_svfiprintf_r+0x28>
 8007732:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007734:	b01d      	add	sp, #116	; 0x74
 8007736:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800773a:	ab03      	add	r3, sp, #12
 800773c:	9300      	str	r3, [sp, #0]
 800773e:	462a      	mov	r2, r5
 8007740:	4b05      	ldr	r3, [pc, #20]	; (8007758 <_svfiprintf_r+0x1f4>)
 8007742:	a904      	add	r1, sp, #16
 8007744:	4638      	mov	r0, r7
 8007746:	f000 f879 	bl	800783c <_printf_i>
 800774a:	e7eb      	b.n	8007724 <_svfiprintf_r+0x1c0>
 800774c:	0800abbc 	.word	0x0800abbc
 8007750:	0800abc6 	.word	0x0800abc6
 8007754:	00000000 	.word	0x00000000
 8007758:	080074b1 	.word	0x080074b1
 800775c:	0800abc2 	.word	0x0800abc2

08007760 <_printf_common>:
 8007760:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007764:	4616      	mov	r6, r2
 8007766:	4699      	mov	r9, r3
 8007768:	688a      	ldr	r2, [r1, #8]
 800776a:	690b      	ldr	r3, [r1, #16]
 800776c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007770:	4293      	cmp	r3, r2
 8007772:	bfb8      	it	lt
 8007774:	4613      	movlt	r3, r2
 8007776:	6033      	str	r3, [r6, #0]
 8007778:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800777c:	4607      	mov	r7, r0
 800777e:	460c      	mov	r4, r1
 8007780:	b10a      	cbz	r2, 8007786 <_printf_common+0x26>
 8007782:	3301      	adds	r3, #1
 8007784:	6033      	str	r3, [r6, #0]
 8007786:	6823      	ldr	r3, [r4, #0]
 8007788:	0699      	lsls	r1, r3, #26
 800778a:	bf42      	ittt	mi
 800778c:	6833      	ldrmi	r3, [r6, #0]
 800778e:	3302      	addmi	r3, #2
 8007790:	6033      	strmi	r3, [r6, #0]
 8007792:	6825      	ldr	r5, [r4, #0]
 8007794:	f015 0506 	ands.w	r5, r5, #6
 8007798:	d106      	bne.n	80077a8 <_printf_common+0x48>
 800779a:	f104 0a19 	add.w	sl, r4, #25
 800779e:	68e3      	ldr	r3, [r4, #12]
 80077a0:	6832      	ldr	r2, [r6, #0]
 80077a2:	1a9b      	subs	r3, r3, r2
 80077a4:	42ab      	cmp	r3, r5
 80077a6:	dc26      	bgt.n	80077f6 <_printf_common+0x96>
 80077a8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80077ac:	1e13      	subs	r3, r2, #0
 80077ae:	6822      	ldr	r2, [r4, #0]
 80077b0:	bf18      	it	ne
 80077b2:	2301      	movne	r3, #1
 80077b4:	0692      	lsls	r2, r2, #26
 80077b6:	d42b      	bmi.n	8007810 <_printf_common+0xb0>
 80077b8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80077bc:	4649      	mov	r1, r9
 80077be:	4638      	mov	r0, r7
 80077c0:	47c0      	blx	r8
 80077c2:	3001      	adds	r0, #1
 80077c4:	d01e      	beq.n	8007804 <_printf_common+0xa4>
 80077c6:	6823      	ldr	r3, [r4, #0]
 80077c8:	6922      	ldr	r2, [r4, #16]
 80077ca:	f003 0306 	and.w	r3, r3, #6
 80077ce:	2b04      	cmp	r3, #4
 80077d0:	bf02      	ittt	eq
 80077d2:	68e5      	ldreq	r5, [r4, #12]
 80077d4:	6833      	ldreq	r3, [r6, #0]
 80077d6:	1aed      	subeq	r5, r5, r3
 80077d8:	68a3      	ldr	r3, [r4, #8]
 80077da:	bf0c      	ite	eq
 80077dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80077e0:	2500      	movne	r5, #0
 80077e2:	4293      	cmp	r3, r2
 80077e4:	bfc4      	itt	gt
 80077e6:	1a9b      	subgt	r3, r3, r2
 80077e8:	18ed      	addgt	r5, r5, r3
 80077ea:	2600      	movs	r6, #0
 80077ec:	341a      	adds	r4, #26
 80077ee:	42b5      	cmp	r5, r6
 80077f0:	d11a      	bne.n	8007828 <_printf_common+0xc8>
 80077f2:	2000      	movs	r0, #0
 80077f4:	e008      	b.n	8007808 <_printf_common+0xa8>
 80077f6:	2301      	movs	r3, #1
 80077f8:	4652      	mov	r2, sl
 80077fa:	4649      	mov	r1, r9
 80077fc:	4638      	mov	r0, r7
 80077fe:	47c0      	blx	r8
 8007800:	3001      	adds	r0, #1
 8007802:	d103      	bne.n	800780c <_printf_common+0xac>
 8007804:	f04f 30ff 	mov.w	r0, #4294967295
 8007808:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800780c:	3501      	adds	r5, #1
 800780e:	e7c6      	b.n	800779e <_printf_common+0x3e>
 8007810:	18e1      	adds	r1, r4, r3
 8007812:	1c5a      	adds	r2, r3, #1
 8007814:	2030      	movs	r0, #48	; 0x30
 8007816:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800781a:	4422      	add	r2, r4
 800781c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007820:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007824:	3302      	adds	r3, #2
 8007826:	e7c7      	b.n	80077b8 <_printf_common+0x58>
 8007828:	2301      	movs	r3, #1
 800782a:	4622      	mov	r2, r4
 800782c:	4649      	mov	r1, r9
 800782e:	4638      	mov	r0, r7
 8007830:	47c0      	blx	r8
 8007832:	3001      	adds	r0, #1
 8007834:	d0e6      	beq.n	8007804 <_printf_common+0xa4>
 8007836:	3601      	adds	r6, #1
 8007838:	e7d9      	b.n	80077ee <_printf_common+0x8e>
	...

0800783c <_printf_i>:
 800783c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007840:	7e0f      	ldrb	r7, [r1, #24]
 8007842:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007844:	2f78      	cmp	r7, #120	; 0x78
 8007846:	4691      	mov	r9, r2
 8007848:	4680      	mov	r8, r0
 800784a:	460c      	mov	r4, r1
 800784c:	469a      	mov	sl, r3
 800784e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007852:	d807      	bhi.n	8007864 <_printf_i+0x28>
 8007854:	2f62      	cmp	r7, #98	; 0x62
 8007856:	d80a      	bhi.n	800786e <_printf_i+0x32>
 8007858:	2f00      	cmp	r7, #0
 800785a:	f000 80d4 	beq.w	8007a06 <_printf_i+0x1ca>
 800785e:	2f58      	cmp	r7, #88	; 0x58
 8007860:	f000 80c0 	beq.w	80079e4 <_printf_i+0x1a8>
 8007864:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007868:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800786c:	e03a      	b.n	80078e4 <_printf_i+0xa8>
 800786e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007872:	2b15      	cmp	r3, #21
 8007874:	d8f6      	bhi.n	8007864 <_printf_i+0x28>
 8007876:	a101      	add	r1, pc, #4	; (adr r1, 800787c <_printf_i+0x40>)
 8007878:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800787c:	080078d5 	.word	0x080078d5
 8007880:	080078e9 	.word	0x080078e9
 8007884:	08007865 	.word	0x08007865
 8007888:	08007865 	.word	0x08007865
 800788c:	08007865 	.word	0x08007865
 8007890:	08007865 	.word	0x08007865
 8007894:	080078e9 	.word	0x080078e9
 8007898:	08007865 	.word	0x08007865
 800789c:	08007865 	.word	0x08007865
 80078a0:	08007865 	.word	0x08007865
 80078a4:	08007865 	.word	0x08007865
 80078a8:	080079ed 	.word	0x080079ed
 80078ac:	08007915 	.word	0x08007915
 80078b0:	080079a7 	.word	0x080079a7
 80078b4:	08007865 	.word	0x08007865
 80078b8:	08007865 	.word	0x08007865
 80078bc:	08007a0f 	.word	0x08007a0f
 80078c0:	08007865 	.word	0x08007865
 80078c4:	08007915 	.word	0x08007915
 80078c8:	08007865 	.word	0x08007865
 80078cc:	08007865 	.word	0x08007865
 80078d0:	080079af 	.word	0x080079af
 80078d4:	682b      	ldr	r3, [r5, #0]
 80078d6:	1d1a      	adds	r2, r3, #4
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	602a      	str	r2, [r5, #0]
 80078dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80078e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80078e4:	2301      	movs	r3, #1
 80078e6:	e09f      	b.n	8007a28 <_printf_i+0x1ec>
 80078e8:	6820      	ldr	r0, [r4, #0]
 80078ea:	682b      	ldr	r3, [r5, #0]
 80078ec:	0607      	lsls	r7, r0, #24
 80078ee:	f103 0104 	add.w	r1, r3, #4
 80078f2:	6029      	str	r1, [r5, #0]
 80078f4:	d501      	bpl.n	80078fa <_printf_i+0xbe>
 80078f6:	681e      	ldr	r6, [r3, #0]
 80078f8:	e003      	b.n	8007902 <_printf_i+0xc6>
 80078fa:	0646      	lsls	r6, r0, #25
 80078fc:	d5fb      	bpl.n	80078f6 <_printf_i+0xba>
 80078fe:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007902:	2e00      	cmp	r6, #0
 8007904:	da03      	bge.n	800790e <_printf_i+0xd2>
 8007906:	232d      	movs	r3, #45	; 0x2d
 8007908:	4276      	negs	r6, r6
 800790a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800790e:	485a      	ldr	r0, [pc, #360]	; (8007a78 <_printf_i+0x23c>)
 8007910:	230a      	movs	r3, #10
 8007912:	e012      	b.n	800793a <_printf_i+0xfe>
 8007914:	682b      	ldr	r3, [r5, #0]
 8007916:	6820      	ldr	r0, [r4, #0]
 8007918:	1d19      	adds	r1, r3, #4
 800791a:	6029      	str	r1, [r5, #0]
 800791c:	0605      	lsls	r5, r0, #24
 800791e:	d501      	bpl.n	8007924 <_printf_i+0xe8>
 8007920:	681e      	ldr	r6, [r3, #0]
 8007922:	e002      	b.n	800792a <_printf_i+0xee>
 8007924:	0641      	lsls	r1, r0, #25
 8007926:	d5fb      	bpl.n	8007920 <_printf_i+0xe4>
 8007928:	881e      	ldrh	r6, [r3, #0]
 800792a:	4853      	ldr	r0, [pc, #332]	; (8007a78 <_printf_i+0x23c>)
 800792c:	2f6f      	cmp	r7, #111	; 0x6f
 800792e:	bf0c      	ite	eq
 8007930:	2308      	moveq	r3, #8
 8007932:	230a      	movne	r3, #10
 8007934:	2100      	movs	r1, #0
 8007936:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800793a:	6865      	ldr	r5, [r4, #4]
 800793c:	60a5      	str	r5, [r4, #8]
 800793e:	2d00      	cmp	r5, #0
 8007940:	bfa2      	ittt	ge
 8007942:	6821      	ldrge	r1, [r4, #0]
 8007944:	f021 0104 	bicge.w	r1, r1, #4
 8007948:	6021      	strge	r1, [r4, #0]
 800794a:	b90e      	cbnz	r6, 8007950 <_printf_i+0x114>
 800794c:	2d00      	cmp	r5, #0
 800794e:	d04b      	beq.n	80079e8 <_printf_i+0x1ac>
 8007950:	4615      	mov	r5, r2
 8007952:	fbb6 f1f3 	udiv	r1, r6, r3
 8007956:	fb03 6711 	mls	r7, r3, r1, r6
 800795a:	5dc7      	ldrb	r7, [r0, r7]
 800795c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007960:	4637      	mov	r7, r6
 8007962:	42bb      	cmp	r3, r7
 8007964:	460e      	mov	r6, r1
 8007966:	d9f4      	bls.n	8007952 <_printf_i+0x116>
 8007968:	2b08      	cmp	r3, #8
 800796a:	d10b      	bne.n	8007984 <_printf_i+0x148>
 800796c:	6823      	ldr	r3, [r4, #0]
 800796e:	07de      	lsls	r6, r3, #31
 8007970:	d508      	bpl.n	8007984 <_printf_i+0x148>
 8007972:	6923      	ldr	r3, [r4, #16]
 8007974:	6861      	ldr	r1, [r4, #4]
 8007976:	4299      	cmp	r1, r3
 8007978:	bfde      	ittt	le
 800797a:	2330      	movle	r3, #48	; 0x30
 800797c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007980:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007984:	1b52      	subs	r2, r2, r5
 8007986:	6122      	str	r2, [r4, #16]
 8007988:	f8cd a000 	str.w	sl, [sp]
 800798c:	464b      	mov	r3, r9
 800798e:	aa03      	add	r2, sp, #12
 8007990:	4621      	mov	r1, r4
 8007992:	4640      	mov	r0, r8
 8007994:	f7ff fee4 	bl	8007760 <_printf_common>
 8007998:	3001      	adds	r0, #1
 800799a:	d14a      	bne.n	8007a32 <_printf_i+0x1f6>
 800799c:	f04f 30ff 	mov.w	r0, #4294967295
 80079a0:	b004      	add	sp, #16
 80079a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079a6:	6823      	ldr	r3, [r4, #0]
 80079a8:	f043 0320 	orr.w	r3, r3, #32
 80079ac:	6023      	str	r3, [r4, #0]
 80079ae:	4833      	ldr	r0, [pc, #204]	; (8007a7c <_printf_i+0x240>)
 80079b0:	2778      	movs	r7, #120	; 0x78
 80079b2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80079b6:	6823      	ldr	r3, [r4, #0]
 80079b8:	6829      	ldr	r1, [r5, #0]
 80079ba:	061f      	lsls	r7, r3, #24
 80079bc:	f851 6b04 	ldr.w	r6, [r1], #4
 80079c0:	d402      	bmi.n	80079c8 <_printf_i+0x18c>
 80079c2:	065f      	lsls	r7, r3, #25
 80079c4:	bf48      	it	mi
 80079c6:	b2b6      	uxthmi	r6, r6
 80079c8:	07df      	lsls	r7, r3, #31
 80079ca:	bf48      	it	mi
 80079cc:	f043 0320 	orrmi.w	r3, r3, #32
 80079d0:	6029      	str	r1, [r5, #0]
 80079d2:	bf48      	it	mi
 80079d4:	6023      	strmi	r3, [r4, #0]
 80079d6:	b91e      	cbnz	r6, 80079e0 <_printf_i+0x1a4>
 80079d8:	6823      	ldr	r3, [r4, #0]
 80079da:	f023 0320 	bic.w	r3, r3, #32
 80079de:	6023      	str	r3, [r4, #0]
 80079e0:	2310      	movs	r3, #16
 80079e2:	e7a7      	b.n	8007934 <_printf_i+0xf8>
 80079e4:	4824      	ldr	r0, [pc, #144]	; (8007a78 <_printf_i+0x23c>)
 80079e6:	e7e4      	b.n	80079b2 <_printf_i+0x176>
 80079e8:	4615      	mov	r5, r2
 80079ea:	e7bd      	b.n	8007968 <_printf_i+0x12c>
 80079ec:	682b      	ldr	r3, [r5, #0]
 80079ee:	6826      	ldr	r6, [r4, #0]
 80079f0:	6961      	ldr	r1, [r4, #20]
 80079f2:	1d18      	adds	r0, r3, #4
 80079f4:	6028      	str	r0, [r5, #0]
 80079f6:	0635      	lsls	r5, r6, #24
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	d501      	bpl.n	8007a00 <_printf_i+0x1c4>
 80079fc:	6019      	str	r1, [r3, #0]
 80079fe:	e002      	b.n	8007a06 <_printf_i+0x1ca>
 8007a00:	0670      	lsls	r0, r6, #25
 8007a02:	d5fb      	bpl.n	80079fc <_printf_i+0x1c0>
 8007a04:	8019      	strh	r1, [r3, #0]
 8007a06:	2300      	movs	r3, #0
 8007a08:	6123      	str	r3, [r4, #16]
 8007a0a:	4615      	mov	r5, r2
 8007a0c:	e7bc      	b.n	8007988 <_printf_i+0x14c>
 8007a0e:	682b      	ldr	r3, [r5, #0]
 8007a10:	1d1a      	adds	r2, r3, #4
 8007a12:	602a      	str	r2, [r5, #0]
 8007a14:	681d      	ldr	r5, [r3, #0]
 8007a16:	6862      	ldr	r2, [r4, #4]
 8007a18:	2100      	movs	r1, #0
 8007a1a:	4628      	mov	r0, r5
 8007a1c:	f7f8 fbd8 	bl	80001d0 <memchr>
 8007a20:	b108      	cbz	r0, 8007a26 <_printf_i+0x1ea>
 8007a22:	1b40      	subs	r0, r0, r5
 8007a24:	6060      	str	r0, [r4, #4]
 8007a26:	6863      	ldr	r3, [r4, #4]
 8007a28:	6123      	str	r3, [r4, #16]
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007a30:	e7aa      	b.n	8007988 <_printf_i+0x14c>
 8007a32:	6923      	ldr	r3, [r4, #16]
 8007a34:	462a      	mov	r2, r5
 8007a36:	4649      	mov	r1, r9
 8007a38:	4640      	mov	r0, r8
 8007a3a:	47d0      	blx	sl
 8007a3c:	3001      	adds	r0, #1
 8007a3e:	d0ad      	beq.n	800799c <_printf_i+0x160>
 8007a40:	6823      	ldr	r3, [r4, #0]
 8007a42:	079b      	lsls	r3, r3, #30
 8007a44:	d413      	bmi.n	8007a6e <_printf_i+0x232>
 8007a46:	68e0      	ldr	r0, [r4, #12]
 8007a48:	9b03      	ldr	r3, [sp, #12]
 8007a4a:	4298      	cmp	r0, r3
 8007a4c:	bfb8      	it	lt
 8007a4e:	4618      	movlt	r0, r3
 8007a50:	e7a6      	b.n	80079a0 <_printf_i+0x164>
 8007a52:	2301      	movs	r3, #1
 8007a54:	4632      	mov	r2, r6
 8007a56:	4649      	mov	r1, r9
 8007a58:	4640      	mov	r0, r8
 8007a5a:	47d0      	blx	sl
 8007a5c:	3001      	adds	r0, #1
 8007a5e:	d09d      	beq.n	800799c <_printf_i+0x160>
 8007a60:	3501      	adds	r5, #1
 8007a62:	68e3      	ldr	r3, [r4, #12]
 8007a64:	9903      	ldr	r1, [sp, #12]
 8007a66:	1a5b      	subs	r3, r3, r1
 8007a68:	42ab      	cmp	r3, r5
 8007a6a:	dcf2      	bgt.n	8007a52 <_printf_i+0x216>
 8007a6c:	e7eb      	b.n	8007a46 <_printf_i+0x20a>
 8007a6e:	2500      	movs	r5, #0
 8007a70:	f104 0619 	add.w	r6, r4, #25
 8007a74:	e7f5      	b.n	8007a62 <_printf_i+0x226>
 8007a76:	bf00      	nop
 8007a78:	0800abcd 	.word	0x0800abcd
 8007a7c:	0800abde 	.word	0x0800abde

08007a80 <memmove>:
 8007a80:	4288      	cmp	r0, r1
 8007a82:	b510      	push	{r4, lr}
 8007a84:	eb01 0402 	add.w	r4, r1, r2
 8007a88:	d902      	bls.n	8007a90 <memmove+0x10>
 8007a8a:	4284      	cmp	r4, r0
 8007a8c:	4623      	mov	r3, r4
 8007a8e:	d807      	bhi.n	8007aa0 <memmove+0x20>
 8007a90:	1e43      	subs	r3, r0, #1
 8007a92:	42a1      	cmp	r1, r4
 8007a94:	d008      	beq.n	8007aa8 <memmove+0x28>
 8007a96:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007a9a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007a9e:	e7f8      	b.n	8007a92 <memmove+0x12>
 8007aa0:	4402      	add	r2, r0
 8007aa2:	4601      	mov	r1, r0
 8007aa4:	428a      	cmp	r2, r1
 8007aa6:	d100      	bne.n	8007aaa <memmove+0x2a>
 8007aa8:	bd10      	pop	{r4, pc}
 8007aaa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007aae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007ab2:	e7f7      	b.n	8007aa4 <memmove+0x24>

08007ab4 <_sbrk_r>:
 8007ab4:	b538      	push	{r3, r4, r5, lr}
 8007ab6:	4d06      	ldr	r5, [pc, #24]	; (8007ad0 <_sbrk_r+0x1c>)
 8007ab8:	2300      	movs	r3, #0
 8007aba:	4604      	mov	r4, r0
 8007abc:	4608      	mov	r0, r1
 8007abe:	602b      	str	r3, [r5, #0]
 8007ac0:	f7fa fc2c 	bl	800231c <_sbrk>
 8007ac4:	1c43      	adds	r3, r0, #1
 8007ac6:	d102      	bne.n	8007ace <_sbrk_r+0x1a>
 8007ac8:	682b      	ldr	r3, [r5, #0]
 8007aca:	b103      	cbz	r3, 8007ace <_sbrk_r+0x1a>
 8007acc:	6023      	str	r3, [r4, #0]
 8007ace:	bd38      	pop	{r3, r4, r5, pc}
 8007ad0:	20000430 	.word	0x20000430

08007ad4 <memcpy>:
 8007ad4:	440a      	add	r2, r1
 8007ad6:	4291      	cmp	r1, r2
 8007ad8:	f100 33ff 	add.w	r3, r0, #4294967295
 8007adc:	d100      	bne.n	8007ae0 <memcpy+0xc>
 8007ade:	4770      	bx	lr
 8007ae0:	b510      	push	{r4, lr}
 8007ae2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007ae6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007aea:	4291      	cmp	r1, r2
 8007aec:	d1f9      	bne.n	8007ae2 <memcpy+0xe>
 8007aee:	bd10      	pop	{r4, pc}

08007af0 <_realloc_r>:
 8007af0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007af4:	4680      	mov	r8, r0
 8007af6:	4614      	mov	r4, r2
 8007af8:	460e      	mov	r6, r1
 8007afa:	b921      	cbnz	r1, 8007b06 <_realloc_r+0x16>
 8007afc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007b00:	4611      	mov	r1, r2
 8007b02:	f7ff bc49 	b.w	8007398 <_malloc_r>
 8007b06:	b92a      	cbnz	r2, 8007b14 <_realloc_r+0x24>
 8007b08:	f7ff fbda 	bl	80072c0 <_free_r>
 8007b0c:	4625      	mov	r5, r4
 8007b0e:	4628      	mov	r0, r5
 8007b10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b14:	f000 f81b 	bl	8007b4e <_malloc_usable_size_r>
 8007b18:	4284      	cmp	r4, r0
 8007b1a:	4607      	mov	r7, r0
 8007b1c:	d802      	bhi.n	8007b24 <_realloc_r+0x34>
 8007b1e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007b22:	d812      	bhi.n	8007b4a <_realloc_r+0x5a>
 8007b24:	4621      	mov	r1, r4
 8007b26:	4640      	mov	r0, r8
 8007b28:	f7ff fc36 	bl	8007398 <_malloc_r>
 8007b2c:	4605      	mov	r5, r0
 8007b2e:	2800      	cmp	r0, #0
 8007b30:	d0ed      	beq.n	8007b0e <_realloc_r+0x1e>
 8007b32:	42bc      	cmp	r4, r7
 8007b34:	4622      	mov	r2, r4
 8007b36:	4631      	mov	r1, r6
 8007b38:	bf28      	it	cs
 8007b3a:	463a      	movcs	r2, r7
 8007b3c:	f7ff ffca 	bl	8007ad4 <memcpy>
 8007b40:	4631      	mov	r1, r6
 8007b42:	4640      	mov	r0, r8
 8007b44:	f7ff fbbc 	bl	80072c0 <_free_r>
 8007b48:	e7e1      	b.n	8007b0e <_realloc_r+0x1e>
 8007b4a:	4635      	mov	r5, r6
 8007b4c:	e7df      	b.n	8007b0e <_realloc_r+0x1e>

08007b4e <_malloc_usable_size_r>:
 8007b4e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007b52:	1f18      	subs	r0, r3, #4
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	bfbc      	itt	lt
 8007b58:	580b      	ldrlt	r3, [r1, r0]
 8007b5a:	18c0      	addlt	r0, r0, r3
 8007b5c:	4770      	bx	lr
	...

08007b60 <_init>:
 8007b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b62:	bf00      	nop
 8007b64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b66:	bc08      	pop	{r3}
 8007b68:	469e      	mov	lr, r3
 8007b6a:	4770      	bx	lr

08007b6c <_fini>:
 8007b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b6e:	bf00      	nop
 8007b70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b72:	bc08      	pop	{r3}
 8007b74:	469e      	mov	lr, r3
 8007b76:	4770      	bx	lr
